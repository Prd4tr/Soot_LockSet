class androidx.appcompat.app.AppCompatDelegateImpl$1 extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    final java.lang.Thread$UncaughtExceptionHandler val$defHandler;

    void <init>(java.lang.Thread$UncaughtExceptionHandler)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 this;
        java.lang.Thread$UncaughtExceptionHandler $u1;

        this := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $u1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        this.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler> = $u1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private boolean shouldWrapException(java.lang.Throwable)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 this;
        java.lang.Throwable $u4;
        boolean message;
        java.lang.String $u-1;

        this := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $u4 := @parameter0: java.lang.Throwable;

        message = $u4 instanceof android.content.res.Resources$NotFoundException;

        if message == 0 goto label2;

        $u-1 = virtualinvoke $u4.<java.lang.Throwable: java.lang.String getMessage()>();

        if $u-1 == null goto label2;

        message = virtualinvoke $u-1.<java.lang.String: boolean contains(java.lang.CharSequence)>("drawable");

        if message != 0 goto label1;

        message = virtualinvoke $u-1.<java.lang.String: boolean contains(java.lang.CharSequence)>("Drawable");

        if message == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        androidx.appcompat.app.AppCompatDelegateImpl$1 this;
        java.lang.Thread $u4;
        java.lang.Throwable $u5, $u-1#10;
        boolean $u-1;
        android.content.res.Resources$NotFoundException wrapped;
        java.lang.StringBuilder $u1;
        java.lang.String $u-1#5;
        java.lang.StackTraceElement[] $u-1#12;
        java.lang.Thread$UncaughtExceptionHandler $u1#14;

        this := @this: androidx.appcompat.app.AppCompatDelegateImpl$1;

        $u4 := @parameter0: java.lang.Thread;

        $u5 := @parameter1: java.lang.Throwable;

        $u-1 = specialinvoke this.<androidx.appcompat.app.AppCompatDelegateImpl$1: boolean shouldWrapException(java.lang.Throwable)>($u5);

        if $u-1 == 0 goto label1;

        wrapped = new android.content.res.Resources$NotFoundException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $u-1#5 = virtualinvoke $u5.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". If the resource you are trying to use is a vector resource, you may be referencing it in an unsupported way. See AppCompatDelegate.setCompatVectorFromResourcesEnabled() for more info.");

        $u-1#5 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke wrapped.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($u-1#5);

        $u-1#10 = virtualinvoke $u5.<java.lang.Throwable: java.lang.Throwable getCause()>();

        virtualinvoke wrapped.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>($u-1#10);

        $u-1#12 = virtualinvoke $u5.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke wrapped.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($u-1#12);

        $u1#14 = this.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler>;

        interfaceinvoke $u1#14.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($u4, wrapped);

        return;

     label1:
        $u1#14 = this.<androidx.appcompat.app.AppCompatDelegateImpl$1: java.lang.Thread$UncaughtExceptionHandler val$defHandler>;

        interfaceinvoke $u1#14.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($u4, $u5);

        return;
    }
}
