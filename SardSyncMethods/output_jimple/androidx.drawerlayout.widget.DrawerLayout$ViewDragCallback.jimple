class androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback extends androidx.customview.widget.ViewDragHelper$Callback
{
    private final int mAbsGravity;
    private androidx.customview.widget.ViewDragHelper mDragger;
    private final java.lang.Runnable mPeekRunnable;
    final androidx.drawerlayout.widget.DrawerLayout this$0;

    void <init>(androidx.drawerlayout.widget.DrawerLayout, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        int $u2;
        androidx.drawerlayout.widget.DrawerLayout $u1;
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1 $u1#2;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u1 := @parameter0: androidx.drawerlayout.widget.DrawerLayout;

        $u2 := @parameter1: int;

        this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0> = $u1;

        specialinvoke this.<androidx.customview.widget.ViewDragHelper$Callback: void <init>()>();

        $u1#2 = new androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1;

        specialinvoke $u1#2.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1: void <init>(androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback)>(this);

        this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: java.lang.Runnable mPeekRunnable> = $u1#2;

        this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: int mAbsGravity> = $u2;

        return;
    }

    private void closeOtherDrawer()
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        androidx.drawerlayout.widget.DrawerLayout $u2;
        android.view.View $u-1;
        int otherGrav;
        byte toClose;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        otherGrav = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: int mAbsGravity>;

        toClose = 3;

        if otherGrav != 3 goto label1;

        toClose = 5;

     label1:
        $u2 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke $u2.<androidx.drawerlayout.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>(toClose);

        if $u-1 == null goto label2;

        $u2 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke $u2.<androidx.drawerlayout.widget.DrawerLayout: void closeDrawer(android.view.View)>($u-1);

     label2:
        return;
    }

    public int clampViewPositionHorizontal(android.view.View, int, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u4;
        int $u5, $u6, $u-1#16;
        androidx.drawerlayout.widget.DrawerLayout width;
        boolean $u-1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u4 := @parameter0: android.view.View;

        $u5 := @parameter1: int;

        $u6 := @parameter2: int;

        width = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke width.<androidx.drawerlayout.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($u4, 3);

        if $u-1 == 0 goto label1;

        $u6 = virtualinvoke $u4.<android.view.View: int getWidth()>();

        $u6 = neg $u6;

        $u5 = staticinvoke <java.lang.Math: int min(int,int)>($u5, 0);

        $u5 = staticinvoke <java.lang.Math: int max(int,int)>($u6, $u5);

        return $u5;

     label1:
        width = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u6 = virtualinvoke width.<androidx.drawerlayout.widget.DrawerLayout: int getWidth()>();

        $u-1#16 = virtualinvoke $u4.<android.view.View: int getWidth()>();

        $u-1#16 = $u6 - $u-1#16;

        $u5 = staticinvoke <java.lang.Math: int min(int,int)>($u5, $u6);

        $u5 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#16, $u5);

        return $u5;
    }

    public int clampViewPositionVertical(android.view.View, int, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u2;
        int $u3, $u4;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u3 = virtualinvoke $u2.<android.view.View: int getTop()>();

        return $u3;
    }

    public int getViewHorizontalDragRange(android.view.View)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u2;
        androidx.drawerlayout.widget.DrawerLayout $u0;
        boolean $u-1;
        int $u-1#4;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u2 := @parameter0: android.view.View;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($u2);

        if $u-1 == 0 goto label1;

        $u-1#4 = virtualinvoke $u2.<android.view.View: int getWidth()>();

        return $u-1#4;

     label1:
        return 0;
    }

    public void onEdgeDragStarted(int, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        int $u3, $u4;
        androidx.drawerlayout.widget.DrawerLayout toCapture;
        android.view.View $u-1;
        androidx.customview.widget.ViewDragHelper $u1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u3 := @parameter0: int;

        $u4 := @parameter1: int;

        $u3 = $u3 & 1;

        if $u3 != 1 goto label1;

        toCapture = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke toCapture.<androidx.drawerlayout.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>(3);

        goto label2;

     label1:
        toCapture = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke toCapture.<androidx.drawerlayout.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>(5);

     label2:
        if $u-1 == null goto label3;

        toCapture = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u3 = virtualinvoke toCapture.<androidx.drawerlayout.widget.DrawerLayout: int getDrawerLockMode(android.view.View)>($u-1);

        if $u3 != 0 goto label3;

        $u1 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger>;

        virtualinvoke $u1.<androidx.customview.widget.ViewDragHelper: void captureChildView(android.view.View,int)>($u-1, $u4);

     label3:
        return;
    }

    public boolean onEdgeLock(int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        int $u2;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u2 := @parameter0: int;

        return 0;
    }

    public void onEdgeTouched(int, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        int $u5, $u6;
        androidx.drawerlayout.widget.DrawerLayout $u0;
        java.lang.Runnable $u1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u5 := @parameter0: int;

        $u6 := @parameter1: int;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u1 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: java.lang.Runnable mPeekRunnable>;

        virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: boolean postDelayed(java.lang.Runnable,long)>($u1, 160L);

        return;
    }

    public void onViewCaptured(android.view.View, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u3;
        int $u4;
        android.view.ViewGroup$LayoutParams $u-1;
        androidx.drawerlayout.widget.DrawerLayout$LayoutParams lp;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: int;

        $u-1 = virtualinvoke $u3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.drawerlayout.widget.DrawerLayout$LayoutParams) $u-1;

        lp.<androidx.drawerlayout.widget.DrawerLayout$LayoutParams: boolean isPeeking> = 0;

        specialinvoke this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: void closeOtherDrawer()>();

        return;
    }

    public void onViewDragStateChanged(int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        int $u4, $u1;
        androidx.drawerlayout.widget.DrawerLayout $u0;
        android.view.View $u-1;
        androidx.customview.widget.ViewDragHelper $u2;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u4 := @parameter0: int;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u1 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: int mAbsGravity>;

        $u2 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger>;

        $u-1 = virtualinvoke $u2.<androidx.customview.widget.ViewDragHelper: android.view.View getCapturedView()>();

        virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: void updateDrawerState(int,int,android.view.View)>($u1, $u4, $u-1);

        return;
    }

    public void onViewPositionChanged(android.view.View, int, int, int, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u5;
        int $u6, $u7, $u8, $u9;
        float $u3, $u2;
        androidx.drawerlayout.widget.DrawerLayout offset;
        boolean $u-1;
        byte $u2#18;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u5 := @parameter0: android.view.View;

        $u6 := @parameter1: int;

        $u7 := @parameter2: int;

        $u8 := @parameter3: int;

        $u9 := @parameter4: int;

        $u7 = virtualinvoke $u5.<android.view.View: int getWidth()>();

        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($u5, 3);

        if $u-1 == 0 goto label1;

        $u6 = $u7 + $u6;

        $u3 = (float) $u6;

        $u2 = (float) $u7;

        $u3 = $u3 / $u2;

        goto label2;

     label1:
        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u8 = virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: int getWidth()>();

        $u6 = $u8 - $u6;

        $u2 = (float) $u6;

        $u3 = (float) $u7;

        $u3 = $u2 / $u3;

     label2:
        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: void setDrawerViewOffset(android.view.View,float)>($u5, $u3);

        $u2#18 = $u3 cmpl 0.0F;

        if $u2#18 != 0 goto label3;

        $u2#18 = 4;

        goto label4;

     label3:
        $u2#18 = 0;

     label4:
        virtualinvoke $u5.<android.view.View: void setVisibility(int)>($u2#18);

        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: void invalidate()>();

        return;
    }

    public void onViewReleased(android.view.View, float, float)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u7;
        float $u8, $u9;
        byte $u5;
        androidx.drawerlayout.widget.DrawerLayout offset;
        int $u-1, $u-1#16;
        boolean $u-1#7;
        androidx.customview.widget.ViewDragHelper $u3;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u7 := @parameter0: android.view.View;

        $u8 := @parameter1: float;

        $u9 := @parameter2: float;

        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u9 = virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: float getDrawerViewOffset(android.view.View)>($u7);

        $u-1 = virtualinvoke $u7.<android.view.View: int getWidth()>();

        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1#7 = virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($u7, 3);

        if $u-1#7 == 0 goto label4;

        $u5 = $u8 cmpl 0.0F;

        if $u5 > 0 goto label2;

        $u5 = $u8 cmpl 0.0F;

        if $u5 != 0 goto label1;

        $u5 = $u9 cmpl 0.5F;

        if $u5 <= 0 goto label1;

        goto label2;

     label1:
        $u-1 = neg $u-1;

        goto label3;

     label2:
        $u-1 = 0;

     label3:
        goto label7;

     label4:
        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1#16 = virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: int getWidth()>();

        $u5 = $u8 cmpg 0.0F;

        if $u5 < 0 goto label6;

        $u5 = $u8 cmpl 0.0F;

        if $u5 != 0 goto label5;

        $u5 = $u9 cmpl 0.5F;

        if $u5 <= 0 goto label5;

        goto label6;

     label5:
        $u-1 = $u-1#16;

        goto label7;

     label6:
        $u-1 = $u-1#16 - $u-1;

     label7:
        $u3 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger>;

        $u-1#16 = virtualinvoke $u7.<android.view.View: int getTop()>();

        virtualinvoke $u3.<androidx.customview.widget.ViewDragHelper: boolean settleCapturedViewAt(int,int)>($u-1, $u-1#16);

        offset = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke offset.<androidx.drawerlayout.widget.DrawerLayout: void invalidate()>();

        return;
    }

    void peekDrawer()
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        androidx.customview.widget.ViewDragHelper $u6;
        int $u-1, leftEdge, childLeft;
        boolean leftEdge#8;
        androidx.drawerlayout.widget.DrawerLayout lp;
        android.view.View $u-1#10, toCapture;
        android.view.ViewGroup$LayoutParams $u-1#28;
        androidx.drawerlayout.widget.DrawerLayout$LayoutParams lp#30;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u6 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger>;

        $u-1 = virtualinvoke $u6.<androidx.customview.widget.ViewDragHelper: int getEdgeSize()>();

        leftEdge = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: int mAbsGravity>;

        childLeft = 0;

        if leftEdge != 3 goto label1;

        leftEdge#8 = 1;

        goto label2;

     label1:
        leftEdge#8 = 0;

     label2:
        if leftEdge#8 == 0 goto label4;

        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1#10 = virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>(3);

        toCapture = $u-1#10;

        if $u-1#10 == null goto label3;

        leftEdge = virtualinvoke $u-1#10.<android.view.View: int getWidth()>();

        childLeft = neg leftEdge;

     label3:
        $u-1 = childLeft + $u-1;

        goto label5;

     label4:
        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        toCapture = virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: android.view.View findDrawerWithGravity(int)>(5);

        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        leftEdge = virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: int getWidth()>();

        $u-1 = leftEdge - $u-1;

     label5:
        if toCapture == null goto label8;

        if leftEdge#8 == 0 goto label6;

        leftEdge = virtualinvoke toCapture.<android.view.View: int getLeft()>();

        if leftEdge < $u-1 goto label7;

     label6:
        if leftEdge#8 != 0 goto label8;

        leftEdge = virtualinvoke toCapture.<android.view.View: int getLeft()>();

        if leftEdge <= $u-1 goto label8;

     label7:
        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        leftEdge = virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: int getDrawerLockMode(android.view.View)>(toCapture);

        if leftEdge != 0 goto label8;

        $u-1#28 = virtualinvoke toCapture.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp#30 = (androidx.drawerlayout.widget.DrawerLayout$LayoutParams) $u-1#28;

        $u6 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger>;

        leftEdge = virtualinvoke toCapture.<android.view.View: int getTop()>();

        virtualinvoke $u6.<androidx.customview.widget.ViewDragHelper: boolean smoothSlideViewTo(android.view.View,int,int)>(toCapture, $u-1, leftEdge);

        lp#30.<androidx.drawerlayout.widget.DrawerLayout$LayoutParams: boolean isPeeking> = 1;

        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: void invalidate()>();

        specialinvoke this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: void closeOtherDrawer()>();

        lp = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        virtualinvoke lp.<androidx.drawerlayout.widget.DrawerLayout: void cancelChildViewTouch()>();

     label8:
        return;
    }

    public void removeCallbacks()
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        androidx.drawerlayout.widget.DrawerLayout $u0;
        java.lang.Runnable $u1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u1 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: java.lang.Runnable mPeekRunnable>;

        virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: boolean removeCallbacks(java.lang.Runnable)>($u1);

        return;
    }

    public void setDragger(androidx.customview.widget.ViewDragHelper)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        androidx.customview.widget.ViewDragHelper $u1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u1 := @parameter0: androidx.customview.widget.ViewDragHelper;

        this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.customview.widget.ViewDragHelper mDragger> = $u1;

        return;
    }

    public boolean tryCaptureView(android.view.View, int)
    {
        androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this;
        android.view.View $u3;
        int $u4;
        androidx.drawerlayout.widget.DrawerLayout $u0;
        boolean $u-1;

        this := @this: androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: int;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u-1 = virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: boolean isDrawerView(android.view.View)>($u3);

        if $u-1 == 0 goto label1;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u4 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: int mAbsGravity>;

        $u-1 = virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: boolean checkDrawerViewAbsoluteGravity(android.view.View,int)>($u3, $u4);

        if $u-1 == 0 goto label1;

        $u0 = this.<androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback: androidx.drawerlayout.widget.DrawerLayout this$0>;

        $u4 = virtualinvoke $u0.<androidx.drawerlayout.widget.DrawerLayout: int getDrawerLockMode(android.view.View)>($u3);

        if $u4 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
