public class androidx.appcompat.widget.ViewUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static java.lang.reflect.Method sComputeFitSystemWindowsMethod;

    static void <clinit>()
    {
        int e;
        java.lang.Class e#3;
        java.lang.Class[] $u2;
        java.lang.reflect.Method $u-1;
        boolean $u-1#13;
        java.lang.NoSuchMethodException e#16;

        <androidx.appcompat.widget.ViewUtils: java.lang.String TAG> = "ViewUtils";

        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 18 goto label8;

        e#3 = class "Landroid/view/View;";

        $u2 = newarray (java.lang.Class)[2];

        $u2[0] = class "Landroid/graphics/Rect;";

        $u2[1] = class "Landroid/graphics/Rect;";

     label1:
        $u-1 = virtualinvoke e#3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("computeFitSystemWindows", $u2);

     label2:
        <androidx.appcompat.widget.ViewUtils: java.lang.reflect.Method sComputeFitSystemWindowsMethod> = $u-1;

     label3:
        $u-1#13 = virtualinvoke $u-1.<java.lang.reflect.Method: boolean isAccessible()>();

     label4:
        if $u-1#13 != 0 goto label6;

        $u-1 = <androidx.appcompat.widget.ViewUtils: java.lang.reflect.Method sComputeFitSystemWindowsMethod>;

     label5:
        virtualinvoke $u-1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label6:
        return;

     label7:
        e#16 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ViewUtils", "Could not find method computeFitSystemWindows. Oh well.");

     label8:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.NoSuchMethodException from label5 to label6 with label7;
    }

    private void <init>()
    {
        androidx.appcompat.widget.ViewUtils this;

        this := @this: androidx.appcompat.widget.ViewUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void computeFitSystemWindows(android.view.View, android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View $u3;
        android.graphics.Rect $u4, $u5;
        java.lang.reflect.Method e;
        java.lang.Object[] $u1;
        java.lang.Exception e#6;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: android.graphics.Rect;

        $u5 := @parameter2: android.graphics.Rect;

        e = <androidx.appcompat.widget.ViewUtils: java.lang.reflect.Method sComputeFitSystemWindowsMethod>;

        if e == null goto label4;

     label1:
        $u1 = newarray (java.lang.Object)[2];

        $u1[0] = $u4;

        $u1[1] = $u5;

        virtualinvoke e.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u3, $u1);

     label2:
        return;

     label3:
        e#6 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewUtils", "Could not invoke computeFitSystemWindows", e#6);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isLayoutRtl(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: int getLayoutDirection(android.view.View)>($u2);

        if $u-1 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void makeOptionalFitsSystemWindows(android.view.View)
    {
        android.view.View $u6;
        java.lang.Class[] $u5;
        int method;
        java.lang.Class $u-1;
        java.lang.reflect.Method $u-1#7;
        boolean $u-1#9;
        java.lang.Object[] $u3;
        java.lang.IllegalAccessException method#13;
        java.lang.reflect.InvocationTargetException method#14;
        java.lang.NoSuchMethodException e;

        $u6 := @parameter0: android.view.View;

        method = <android.os.Build$VERSION: int SDK_INT>;

        if method < 16 goto label12;

     label01:
        $u-1 = virtualinvoke $u6.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $u5 = newarray (java.lang.Class)[0];

     label03:
        $u-1#7 = virtualinvoke $u-1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("makeOptionalFitsSystemWindows", $u5);

        $u-1#9 = virtualinvoke $u-1#7.<java.lang.reflect.Method: boolean isAccessible()>();

     label04:
        if $u-1#9 != 0 goto label06;

     label05:
        virtualinvoke $u-1#7.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label06:
        $u3 = newarray (java.lang.Object)[0];

     label07:
        virtualinvoke $u-1#7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u6, $u3);

     label08:
        return;

     label09:
        method#13 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewUtils", "Could not invoke makeOptionalFitsSystemWindows", method#13);

        return;

     label10:
        method#14 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewUtils", "Could not invoke makeOptionalFitsSystemWindows", method#14);

        return;

     label11:
        e := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ViewUtils", "Could not find method makeOptionalFitsSystemWindows. Oh well...");

     label12:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label11;
        catch java.lang.NoSuchMethodException from label03 to label04 with label11;
        catch java.lang.NoSuchMethodException from label05 to label06 with label11;
        catch java.lang.NoSuchMethodException from label07 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label10;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label10;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label10;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label09;
        catch java.lang.IllegalAccessException from label03 to label04 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
    }
}
