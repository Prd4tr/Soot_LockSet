class androidx.lifecycle.ClassesInfoCache extends java.lang.Object
{
    private static final int CALL_TYPE_NO_ARG;
    private static final int CALL_TYPE_PROVIDER;
    private static final int CALL_TYPE_PROVIDER_WITH_EVENT;
    static androidx.lifecycle.ClassesInfoCache sInstance;
    private final java.util.Map mCallbackMap;
    private final java.util.Map mHasLifecycleMethods;

    static void <clinit>()
    {
        androidx.lifecycle.ClassesInfoCache $u0;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_PROVIDER_WITH_EVENT> = 2;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_PROVIDER> = 1;

        <androidx.lifecycle.ClassesInfoCache: int CALL_TYPE_NO_ARG> = 0;

        $u0 = new androidx.lifecycle.ClassesInfoCache;

        specialinvoke $u0.<androidx.lifecycle.ClassesInfoCache: void <init>()>();

        <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache sInstance> = $u0;

        return;
    }

    void <init>()
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.util.HashMap $u0;

        this := @this: androidx.lifecycle.ClassesInfoCache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap> = $u0;

        $u0 = new java.util.HashMap;

        specialinvoke $u0.<java.util.HashMap: void <init>()>();

        this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods> = $u0;

        return;
    }

    private androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class, java.lang.reflect.Method[])
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.lang.Class $u17, $u-1;
        java.lang.reflect.Method[] $u18;
        java.util.HashMap handlerToEvent;
        androidx.lifecycle.ClassesInfoCache$CallbackInfo $u-1#2;
        java.util.Map methods;
        java.lang.Class[] $u-1#5;
        int methods#7, hasLifecycleMethods, event;
        java.util.Set $u-1#14;
        java.util.Iterator $u-1#16;
        boolean $u-1#18, $u-1#45;
        java.lang.Object $u-1#20;
        java.util.Map$Entry entry;
        androidx.lifecycle.ClassesInfoCache$MethodReference 'annotation';
        androidx.lifecycle.Lifecycle$Event params, methodReference#57;
        java.lang.reflect.Method entry#34;
        java.lang.'annotation'.Annotation $u-1#36;
        androidx.lifecycle.OnLifecycleEvent annotation#38;
        byte callType;
        java.lang.IllegalArgumentException methodReference;
        java.lang.Boolean $u-1#70;

        this := @this: androidx.lifecycle.ClassesInfoCache;

        $u17 := @parameter0: java.lang.Class;

        $u18 := @parameter1: java.lang.reflect.Method[];

        $u-1 = virtualinvoke $u17.<java.lang.Class: java.lang.Class getSuperclass()>();

        handlerToEvent = new java.util.HashMap;

        specialinvoke handlerToEvent.<java.util.HashMap: void <init>()>();

        if $u-1 == null goto label01;

        $u-1#2 = virtualinvoke this.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($u-1);

        if $u-1#2 == null goto label01;

        methods = $u-1#2.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mHandlerToEvent>;

        interfaceinvoke handlerToEvent.<java.util.Map: void putAll(java.util.Map)>(methods);

     label01:
        $u-1#5 = virtualinvoke $u17.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        methods#7 = lengthof $u-1#5;

        hasLifecycleMethods = 0;

     label02:
        if hasLifecycleMethods >= methods#7 goto label05;

        $u-1 = $u-1#5[hasLifecycleMethods];

        $u-1#2 = virtualinvoke this.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($u-1);

        methods = $u-1#2.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mHandlerToEvent>;

        $u-1#14 = interfaceinvoke methods.<java.util.Map: java.util.Set entrySet()>();

        $u-1#16 = interfaceinvoke $u-1#14.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $u-1#18 = interfaceinvoke $u-1#16.<java.util.Iterator: boolean hasNext()>();

        if $u-1#18 == 0 goto label04;

        $u-1#20 = interfaceinvoke $u-1#16.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $u-1#20;

        $u-1#20 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        'annotation' = (androidx.lifecycle.ClassesInfoCache$MethodReference) $u-1#20;

        $u-1#20 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        params = (androidx.lifecycle.Lifecycle$Event) $u-1#20;

        specialinvoke this.<androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>(handlerToEvent, 'annotation', params, $u17);

        goto label03;

     label04:
        hasLifecycleMethods = hasLifecycleMethods + 1;

        goto label02;

     label05:
        if $u18 == null goto label06;

        goto label07;

     label06:
        $u18 = specialinvoke this.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($u17);

     label07:
        $u-1#18 = 0;

        methods#7 = lengthof $u18;

        hasLifecycleMethods = 0;

     label08:
        if hasLifecycleMethods >= methods#7 goto label17;

        entry#34 = $u18[hasLifecycleMethods];

        $u-1#36 = virtualinvoke entry#34.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/lifecycle/OnLifecycleEvent;");

        annotation#38 = (androidx.lifecycle.OnLifecycleEvent) $u-1#36;

        if annotation#38 != null goto label09;

        goto label15;

     label09:
        $u-1#18 = 1;

        $u-1#5 = virtualinvoke entry#34.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        callType = 0;

        event = lengthof $u-1#5;

        if event <= 0 goto label11;

        callType = 1;

        $u-1 = $u-1#5[0];

        $u-1#45 = virtualinvoke $u-1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Landroidx/lifecycle/LifecycleOwner;");

        if $u-1#45 == 0 goto label10;

        goto label11;

     label10:
        methodReference = new java.lang.IllegalArgumentException;

        specialinvoke methodReference.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameter type. Must be one and instanceof LifecycleOwner");

        throw methodReference;

     label11:
        params = interfaceinvoke annotation#38.<androidx.lifecycle.OnLifecycleEvent: androidx.lifecycle.Lifecycle$Event value()>();

        event = lengthof $u-1#5;

        if event <= 1 goto label14;

        callType = 2;

        $u-1 = $u-1#5[1];

        $u-1#45 = virtualinvoke $u-1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Landroidx/lifecycle/Lifecycle$Event;");

        if $u-1#45 == 0 goto label13;

        methodReference#57 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY>;

        if params != methodReference#57 goto label12;

        goto label14;

     label12:
        methodReference = new java.lang.IllegalArgumentException;

        specialinvoke methodReference.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Second arg is supported only for ON_ANY value");

        throw methodReference;

     label13:
        methodReference = new java.lang.IllegalArgumentException;

        specialinvoke methodReference.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameter type. second arg must be an event");

        throw methodReference;

     label14:
        event = lengthof $u-1#5;

        if event > 2 goto label16;

        'annotation' = new androidx.lifecycle.ClassesInfoCache$MethodReference;

        specialinvoke 'annotation'.<androidx.lifecycle.ClassesInfoCache$MethodReference: void <init>(int,java.lang.reflect.Method)>(callType, entry#34);

        specialinvoke this.<androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>(handlerToEvent, 'annotation', params, $u17);

     label15:
        hasLifecycleMethods = hasLifecycleMethods + 1;

        goto label08;

     label16:
        methodReference = new java.lang.IllegalArgumentException;

        specialinvoke methodReference.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot have more than 2 params");

        throw methodReference;

     label17:
        $u-1#2 = new androidx.lifecycle.ClassesInfoCache$CallbackInfo;

        specialinvoke $u-1#2.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: void <init>(java.util.Map)>(handlerToEvent);

        methods = this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap>;

        interfaceinvoke methods.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($u17, $u-1#2);

        methods = this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        $u-1#70 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($u-1#18);

        interfaceinvoke methods.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($u17, $u-1#70);

        return $u-1#2;
    }

    private java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.lang.Class $u4;
        java.lang.IllegalArgumentException $u1;
        java.lang.reflect.Method[] $u-1;
        java.lang.NoClassDefFoundError e;

        this := @this: androidx.lifecycle.ClassesInfoCache;

        $u4 := @parameter0: java.lang.Class;

     label1:
        $u-1 = virtualinvoke $u4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label2:
        return $u-1;

     label3:
        e := @caughtexception;

        $u1 = new java.lang.IllegalArgumentException;

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("The observer class has some methods that use newer APIs which are not available in the current OS version. Lifecycles cannot access even other methods so you should make sure that your observer classes only access framework classes that are available in your min API level OR use lifecycle:compiler annotation processor.", e);

        throw $u1;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
    }

    private void verifyAndPutHandler(java.util.Map, androidx.lifecycle.ClassesInfoCache$MethodReference, androidx.lifecycle.Lifecycle$Event, java.lang.Class)
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.util.Map handlers;
        androidx.lifecycle.ClassesInfoCache$MethodReference $u7;
        androidx.lifecycle.Lifecycle$Event $u8, event;
        java.lang.Class $u9;
        java.lang.reflect.Method method;
        java.lang.IllegalArgumentException $u2;
        java.lang.Object $u-1;
        java.lang.StringBuilder $u3;
        java.lang.String $u-1#6;

        this := @this: androidx.lifecycle.ClassesInfoCache;

        handlers := @parameter0: java.util.Map;

        $u7 := @parameter1: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $u8 := @parameter2: androidx.lifecycle.Lifecycle$Event;

        $u9 := @parameter3: java.lang.Class;

        $u-1 = interfaceinvoke handlers.<java.util.Map: java.lang.Object get(java.lang.Object)>($u7);

        event = (androidx.lifecycle.Lifecycle$Event) $u-1;

        if event == null goto label2;

        if $u8 != event goto label1;

        goto label2;

     label1:
        method = $u7.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u2 = new java.lang.IllegalArgumentException;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $u-1#6 = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#6);

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $u-1#6 = virtualinvoke $u9.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#6);

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already declared with different @OnLifecycleEvent value: previous value ");

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(event);

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", new value ");

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u8);

        $u-1#6 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($u-1#6);

        throw $u2;

     label2:
        if event != null goto label3;

        interfaceinvoke handlers.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($u7, $u8);

     label3:
        return;
    }

    androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.lang.Class $u3;
        java.util.Map existing;
        java.lang.Object $u-1;
        androidx.lifecycle.ClassesInfoCache$CallbackInfo existing#4;

        this := @this: androidx.lifecycle.ClassesInfoCache;

        $u3 := @parameter0: java.lang.Class;

        existing = this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap>;

        $u-1 = interfaceinvoke existing.<java.util.Map: java.lang.Object get(java.lang.Object)>($u3);

        existing#4 = (androidx.lifecycle.ClassesInfoCache$CallbackInfo) $u-1;

        if existing#4 == null goto label1;

        return existing#4;

     label1:
        existing#4 = specialinvoke this.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($u3, null);

        return existing#4;
    }

    boolean hasLifecycleMethods(java.lang.Class)
    {
        androidx.lifecycle.ClassesInfoCache this;
        java.lang.Class $u8;
        java.lang.reflect.Method method;
        java.util.Map hasLifecycleMethods;
        java.lang.Object $u-1;
        java.lang.Boolean hasLifecycleMethods#4;
        boolean $u-1#5;
        java.lang.reflect.Method[] $u-1#7;
        int $u2, $u4;
        java.lang.'annotation'.Annotation $u-1#12;
        androidx.lifecycle.OnLifecycleEvent 'annotation';

        this := @this: androidx.lifecycle.ClassesInfoCache;

        $u8 := @parameter0: java.lang.Class;

        hasLifecycleMethods = this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        $u-1 = interfaceinvoke hasLifecycleMethods.<java.util.Map: java.lang.Object get(java.lang.Object)>($u8);

        hasLifecycleMethods#4 = (java.lang.Boolean) $u-1;

        if hasLifecycleMethods#4 == null goto label1;

        $u-1#5 = virtualinvoke hasLifecycleMethods#4.<java.lang.Boolean: boolean booleanValue()>();

        return $u-1#5;

     label1:
        $u-1#7 = specialinvoke this.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($u8);

        $u2 = lengthof $u-1#7;

        $u4 = 0;

     label2:
        if $u4 >= $u2 goto label4;

        method = $u-1#7[$u4];

        $u-1#12 = virtualinvoke method.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/lifecycle/OnLifecycleEvent;");

        'annotation' = (androidx.lifecycle.OnLifecycleEvent) $u-1#12;

        if 'annotation' == null goto label3;

        specialinvoke this.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($u8, $u-1#7);

        return 1;

     label3:
        $u4 = $u4 + 1;

        goto label2;

     label4:
        hasLifecycleMethods = this.<androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods>;

        hasLifecycleMethods#4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke hasLifecycleMethods.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($u8, hasLifecycleMethods#4);

        return 0;
    }
}
