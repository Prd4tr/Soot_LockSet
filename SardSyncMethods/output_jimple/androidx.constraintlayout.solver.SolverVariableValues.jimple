public class androidx.constraintlayout.solver.SolverVariableValues extends java.lang.Object implements androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables
{
    private static final boolean DEBUG;
    private static final boolean HASH;
    private static float epsilon;
    private int HASH_SIZE;
    private final int NONE;
    private int SIZE;
    int head;
    int[] keys;
    protected final androidx.constraintlayout.solver.Cache mCache;
    int mCount;
    private final androidx.constraintlayout.solver.ArrayRow mRow;
    int[] next;
    int[] nextKeys;
    int[] previous;
    float[] values;
    int[] variables;

    static void <clinit>()
    {
        <androidx.constraintlayout.solver.SolverVariableValues: boolean HASH> = 1;

        <androidx.constraintlayout.solver.SolverVariableValues: boolean DEBUG> = 0;

        <androidx.constraintlayout.solver.SolverVariableValues: float epsilon> = 0.001F;

        return;
    }

    void <init>(androidx.constraintlayout.solver.ArrayRow, androidx.constraintlayout.solver.Cache)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.ArrayRow $u4;
        androidx.constraintlayout.solver.Cache $u5;
        int[] $u2;
        float[] $u2#5;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u4 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $u5 := @parameter1: androidx.constraintlayout.solver.Cache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<androidx.constraintlayout.solver.SolverVariableValues: int NONE> = -1;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE> = 16;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE> = 16;

        $u2 = newarray (int)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys> = $u2;

        $u2 = newarray (int)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys> = $u2;

        $u2 = newarray (int)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables> = $u2;

        $u2#5 = newarray (float)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values> = $u2#5;

        $u2 = newarray (int)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous> = $u2;

        $u2 = newarray (int)[16];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next> = $u2;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = 0;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int head> = -1;

        this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow> = $u4;

        this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache> = $u5;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void clear()>();

        return;
    }

    private void addToHashMap(androidx.constraintlayout.solver.SolverVariable, int)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u6;
        int $u7, $u4, hash;
        int[] $u1;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u6 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u7 := @parameter1: int;

        hash = $u6.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $u4 = this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        $u4 = hash % $u4;

        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        hash = $u1[$u4];

        if hash != -1 goto label1;

        $u1[$u4] = $u7;

        goto label3;

     label1:
        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $u4 = $u1[hash];

        if $u4 == -1 goto label2;

        hash = $u1[hash];

        goto label1;

     label2:
        $u1[hash] = $u7;

     label3:
        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $u1[$u7] = -1;

        return;
    }

    private void addVariable(int, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int $u3, $u1;
        androidx.constraintlayout.solver.SolverVariable $u4;
        float $u5;
        int[] $u0;
        float[] $u0#3;
        androidx.constraintlayout.solver.ArrayRow $u0#7;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u3 := @parameter0: int;

        $u4 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter2: float;

        $u0 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u1 = $u4.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $u0[$u3] = $u1;

        $u0#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u0#3[$u3] = $u5;

        $u0 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u0[$u3] = -1;

        $u0 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u0[$u3] = -1;

        $u0#7 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke $u4.<androidx.constraintlayout.solver.SolverVariable: void addToRow(androidx.constraintlayout.solver.ArrayRow)>($u0#7);

        $u3 = $u4.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount>;

        $u3 = $u3 + 1;

        $u4.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = $u3;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $u3 = $u3 + 1;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = $u3;

        return;
    }

    private void displayHash()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int i, str, $u6;
        int[] str#3;
        java.lang.StringBuilder str#6;
        java.lang.String $u-1;
        boolean done;
        java.io.PrintStream $u2;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i = 0;

     label1:
        str = this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        if i >= str goto label6;

        str#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        str = str#3[i];

        if str == -1 goto label5;

        str#6 = new java.lang.StringBuilder;

        specialinvoke str#6.<java.lang.StringBuilder: void <init>()>();

        str = virtualinvoke this.<java.lang.Object: int hashCode()>();

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(str);

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hash [");

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] => ");

        $u-1 = virtualinvoke str#6.<java.lang.StringBuilder: java.lang.String toString()>();

        str#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        str = str#3[i];

        done = 0;

     label2:
        if done != 0 goto label4;

        str#6 = new java.lang.StringBuilder;

        specialinvoke str#6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        str#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u6 = str#3[str];

        virtualinvoke str#6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u6);

        $u-1 = virtualinvoke str#6.<java.lang.StringBuilder: java.lang.String toString()>();

        str#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $u6 = str#3[str];

        if $u6 == -1 goto label3;

        str = str#3[str];

        goto label2;

     label3:
        done = 1;

        goto label2;

     label4:
        $u2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $u2.<java.io.PrintStream: void println(java.lang.String)>($u-1);

     label5:
        i = i + 1;

        goto label1;

     label6:
        return;
    }

    private int findEmptySlot()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int i, $u1;
        int[] $u1#3;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i = 0;

     label1:
        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if i >= $u1 goto label3;

        $u1#3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u1 = $u1#3[i];

        if $u1 != -1 goto label2;

        return i;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return -1;
    }

    private void increaseSize()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int size, i#18;
        int[] i;
        float[] i#6;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        size = this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        size = size * 2;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        i = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(i, size);

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables> = i;

        i#6 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        i#6 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(i#6, size);

        this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values> = i#6;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        i = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(i, size);

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous> = i;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(i, size);

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next> = i;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(i, size);

        this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys> = i;

        i#18 = this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

     label1:
        if i#18 >= size goto label2;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        i[i#18] = -1;

        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i[i#18] = -1;

        i#18 = i#18 + 1;

        goto label1;

     label2:
        this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE> = size;

        return;
    }

    private void insertVariable(int, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int $u5, $u-1, $u3;
        androidx.constraintlayout.solver.SolverVariable $u6;
        float $u7;
        int[] $u2, $u1;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u5 := @parameter0: int;

        $u6 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u7 := @parameter2: float;

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int findEmptySlot()>();

        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void addVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>($u-1, $u6, $u7);

        if $u5 == -1 goto label1;

        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u2[$u-1] = $u5;

        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u3 = $u2[$u5];

        $u2[$u-1] = $u3;

        $u2[$u5] = $u-1;

        goto label3;

     label1:
        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u2[$u-1] = -1;

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if $u5 <= 0 goto label2;

        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        $u2[$u-1] = $u5;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int head> = $u-1;

        goto label3;

     label2:
        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u2[$u-1] = -1;

     label3:
        $u2 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u5 = $u2[$u-1];

        if $u5 == -1 goto label4;

        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u5 = $u2[$u-1];

        $u1[$u5] = $u-1;

     label4:
        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void addToHashMap(androidx.constraintlayout.solver.SolverVariable,int)>($u6, $u-1);

        return;
    }

    private void removeFromHashMap(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u8;
        int id, hash, hash#3, $u4;
        int[] key, currentKey;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u8 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        hash = $u8.<androidx.constraintlayout.solver.SolverVariable: int id>;

        id = this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        hash#3 = hash % id;

        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        hash = key[hash#3];

        if hash != -1 goto label1;

        return;

     label1:
        id = $u8.<androidx.constraintlayout.solver.SolverVariable: int id>;

        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u4 = key[hash];

        if $u4 != id goto label2;

        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        currentKey = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        id = currentKey[hash];

        key[hash#3] = id;

        currentKey[hash] = -1;

        return;

     label2:
        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        hash#3 = key[hash];

        if hash#3 == -1 goto label3;

        currentKey = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        hash#3 = key[hash];

        hash#3 = currentKey[hash#3];

        if hash#3 == id goto label3;

        hash = key[hash];

        goto label2;

     label3:
        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        hash#3 = key[hash];

        if hash#3 == -1 goto label4;

        currentKey = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u4 = currentKey[hash#3];

        if $u4 != id goto label4;

        id = key[hash#3];

        key[hash] = id;

        key[hash#3] = -1;

     label4:
        return;
    }

    public void add(androidx.constraintlayout.solver.SolverVariable, float, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u6;
        float $u7, $u4, $u1;
        boolean $u8;
        int $u-1;
        byte $u1#3;
        float[] $u1#7;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u6 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u7 := @parameter1: float;

        $u8 := @parameter2: boolean;

        $u4 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $u1 = neg $u4;

        $u1#3 = $u7 cmpl $u1;

        if $u1#3 <= 0 goto label1;

        $u1#3 = $u7 cmpg $u4;

        if $u1#3 >= 0 goto label1;

        return;

     label1:
        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u6);

        if $u-1 != -1 goto label2;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void put(androidx.constraintlayout.solver.SolverVariable,float)>($u6, $u7);

        return;

     label2:
        $u1#7 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u4 = $u1#7[$u-1];

        $u7 = $u4 + $u7;

        $u1#7[$u-1] = $u7;

        $u1 = $u1#7[$u-1];

        $u7 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $u4 = neg $u7;

        $u1#3 = $u1 cmpl $u4;

        if $u1#3 <= 0 goto label3;

        $u4 = $u1#7[$u-1];

        $u1#3 = $u4 cmpg $u7;

        if $u1#3 >= 0 goto label3;

        $u1#7[$u-1] = 0.0F;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>($u6, $u8);

     label3:
        return;
    }

    public void clear()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int count, i;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.ArrayRow $u3;
        int[] v;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i = 0;

     label1:
        if i >= count goto label3;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i);

        if $u-1 == null goto label2;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.SolverVariable: void removeFromRow(androidx.constraintlayout.solver.ArrayRow)>($u3);

     label2:
        i = i + 1;

        goto label1;

     label3:
        count = 0;

     label4:
        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if count >= i goto label5;

        v = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        v[count] = -1;

        v = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        v[count] = -1;

        count = count + 1;

        goto label4;

     label5:
        count = 0;

     label6:
        i = this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        if count >= i goto label7;

        v = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        v[count] = -1;

        count = count + 1;

        goto label6;

     label7:
        this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = 0;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int head> = -1;

        return;
    }

    public boolean contains(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u3;
        int $u-1;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u3 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u3);

        if $u-1 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void display()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int count, i;
        java.io.PrintStream $u3;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        java.lang.StringBuilder $u4;
        float $u-1#8;
        java.lang.String $u-1#11;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $u3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $u3.<java.io.PrintStream: void print(java.lang.String)>("{ ");

        i = 0;

     label1:
        if i >= count goto label4;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i);

        if $u-1 != null goto label2;

        goto label3;

     label2:
        $u3 = <java.lang.System: java.io.PrintStream out>;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $u-1#8 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float getVariableValue(int)>(i);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($u-1#8);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $u-1#11 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $u3.<java.io.PrintStream: void print(java.lang.String)>($u-1#11);

     label3:
        i = i + 1;

        goto label1;

     label4:
        $u3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $u3.<java.io.PrintStream: void println(java.lang.String)>(" }");

        return;
    }

    public void divideByAmount(float)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        float $u6, $u4;
        int count, j, i;
        float[] $u3;
        int[] $u3#6;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u6 := @parameter0: float;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        j = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i = 0;

     label1:
        if i >= count goto label3;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u4 = $u3[j];

        $u4 = $u4 / $u6;

        $u3[j] = $u4;

        $u3#6 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        j = $u3#6[j];

        if j != -1 goto label2;

        return;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    public float get(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u3;
        int $u-1;
        float[] $u1;
        float $u1#3;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u3 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u3);

        if $u-1 == -1 goto label1;

        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u1#3 = $u1[$u-1];

        return $u1#3;

     label1:
        return 0.0F;
    }

    public int getCurrentSize()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int ret0;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        ret0 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        return ret0;
    }

    public androidx.constraintlayout.solver.SolverVariable getVariable(int)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int $u7, count, j, i;
        int[] $u5;
        androidx.constraintlayout.solver.Cache $u1;
        androidx.constraintlayout.solver.SolverVariable[] $u1#6;
        androidx.constraintlayout.solver.SolverVariable $u1#9;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u7 := @parameter0: int;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if count != 0 goto label1;

        return null;

     label1:
        j = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i = 0;

     label2:
        if i >= count goto label5;

        if i != $u7 goto label3;

        if j == -1 goto label3;

        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $u1#6 = $u1.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u7 = $u5[j];

        $u1#9 = $u1#6[$u7];

        return $u1#9;

     label3:
        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        j = $u5[j];

        if j != -1 goto label4;

        return null;

     label4:
        i = i + 1;

        goto label2;

     label5:
        return null;
    }

    public float getVariableValue(int)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int $u5, count, j, i;
        float[] $u3;
        float $u3#4;
        int[] $u3#5;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u5 := @parameter0: int;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        j = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i = 0;

     label1:
        if i >= count goto label4;

        if i != $u5 goto label2;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u3#4 = $u3[j];

        return $u3#4;

     label2:
        $u3#5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        j = $u3#5[j];

        if j != -1 goto label3;

        goto label4;

     label3:
        i = i + 1;

        goto label1;

     label4:
        return 0.0F;
    }

    public int indexOf(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u7;
        int id, key, $u3#9;
        int[] $u3, $u4;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u7 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        id = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if id != 0 goto label1;

        return -1;

     label1:
        id = $u7.<androidx.constraintlayout.solver.SolverVariable: int id>;

        key = this.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        key = id % key;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        key = $u3[key];

        if key != -1 goto label2;

        return -1;

     label2:
        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u3#9 = $u3[key];

        if $u3#9 != id goto label3;

        return key;

     label3:
        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $u3#9 = $u3[key];

        if $u3#9 == -1 goto label4;

        $u4 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u3#9 = $u3[key];

        $u3#9 = $u4[$u3#9];

        if $u3#9 == id goto label4;

        key = $u3[key];

        goto label3;

     label4:
        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $u3#9 = $u3[key];

        if $u3#9 != -1 goto label5;

        return -1;

     label5:
        $u4 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u3#9 = $u3[key];

        $u3#9 = $u4[$u3#9];

        if $u3#9 != id goto label6;

        id = $u3[key];

        return id;

     label6:
        return -1;
    }

    public void invert()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        int count, j, i;
        float[] $u3;
        float $u4;
        int[] $u3#6;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        j = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i = 0;

     label1:
        if i >= count goto label3;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u4 = $u3[j];

        $u4 = $u4 * -1.0F;

        $u3[j] = $u4;

        $u3#6 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        j = $u3#6[j];

        if j != -1 goto label2;

        return;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    public void put(androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u9;
        float $u10, index, $u1;
        int $u-1, count, j, i, $u6#19, $u7;
        byte $u1#4;
        float[] $u1#10;
        int[] $u6;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u9 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u10 := @parameter1: float;

        index = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $u1 = neg index;

        $u1#4 = $u10 cmpl $u1;

        if $u1#4 <= 0 goto label1;

        $u1#4 = $u10 cmpg index;

        if $u1#4 >= 0 goto label1;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>($u9, 1);

        return;

     label1:
        $u-1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if $u-1 != 0 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void addVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>(0, $u9, $u10);

        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void addToHashMap(androidx.constraintlayout.solver.SolverVariable,int)>($u9, 0);

        this.<androidx.constraintlayout.solver.SolverVariableValues: int head> = 0;

        return;

     label2:
        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u9);

        if $u-1 == -1 goto label3;

        $u1#10 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u1#10[$u-1] = $u10;

        return;

     label3:
        $u-1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $u-1 = $u-1 + 1;

        count = this.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if $u-1 < count goto label4;

        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void increaseSize()>();

     label4:
        $u-1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        count = -1;

        j = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i = 0;

     label5:
        if i >= $u-1 goto label9;

        $u6 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u6#19 = $u6[j];

        $u7 = $u9.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $u6#19 != $u7 goto label6;

        $u1#10 = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $u1#10[j] = $u10;

        return;

     label6:
        $u6 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u6#19 = $u6[j];

        $u7 = $u9.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $u6#19 >= $u7 goto label7;

        count = j;

     label7:
        $u6 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        j = $u6[j];

        if j != -1 goto label8;

        goto label9;

     label8:
        i = i + 1;

        goto label5;

     label9:
        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void insertVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>(count, $u9, $u10);

        return;
    }

    public float remove(androidx.constraintlayout.solver.SolverVariable, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        androidx.constraintlayout.solver.SolverVariable $u7;
        boolean $u8;
        int $u5, $u-1, $u3#12;
        float[] value;
        float value#4;
        int[] $u3, $u4;
        androidx.constraintlayout.solver.ArrayRow $u1;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u7 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u8 := @parameter1: boolean;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u7);

        if $u-1 != -1 goto label1;

        return 0.0F;

     label1:
        specialinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void removeFromHashMap(androidx.constraintlayout.solver.SolverVariable)>($u7);

        value = this.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        value#4 = value[$u-1];

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        if $u5 != $u-1 goto label2;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u5 = $u3[$u-1];

        this.<androidx.constraintlayout.solver.SolverVariableValues: int head> = $u5;

     label2:
        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u3[$u-1] = -1;

        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u5 = $u3[$u-1];

        if $u5 == -1 goto label3;

        $u4 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u3#12 = $u3[$u-1];

        $u5 = $u4[$u-1];

        $u4[$u3#12] = $u5;

     label3:
        $u3 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u5 = $u3[$u-1];

        if $u5 == -1 goto label4;

        $u4 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u5 = $u3[$u-1];

        $u-1 = $u4[$u-1];

        $u4[$u5] = $u-1;

     label4:
        $u-1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $u-1 = $u-1 + -1;

        this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = $u-1;

        $u-1 = $u7.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount>;

        $u-1 = $u-1 + -1;

        $u7.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = $u-1;

        if $u8 == 0 goto label5;

        $u1 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke $u7.<androidx.constraintlayout.solver.SolverVariable: void removeFromRow(androidx.constraintlayout.solver.ArrayRow)>($u1);

     label5:
        return value#4;
    }

    public int sizeInBytes()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        return 0;
    }

    public java.lang.String toString()
    {
        androidx.constraintlayout.solver.SolverVariableValues this;
        java.lang.StringBuilder str;
        int $u-1, i, $u-1#18, $u5#25;
        java.lang.String $u-1#5;
        androidx.constraintlayout.solver.SolverVariable $u-1#9;
        float $u-1#13;
        int[] $u5, $u10;
        androidx.constraintlayout.solver.Cache $u8;
        androidx.constraintlayout.solver.SolverVariable[] $u8#30;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        $u-1 = virtualinvoke this.<java.lang.Object: int hashCode()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u-1);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" { ");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        $u-1 = this.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i = 0;

     label1:
        if i >= $u-1 goto label8;

        $u-1#9 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i);

        if $u-1#9 != null goto label2;

        goto label7;

     label2:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1#9);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $u-1#13 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float getVariableValue(int)>(i);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($u-1#13);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        $u-1#18 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>($u-1#9);

        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[p: ");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u5#25 = $u5[$u-1#18];

        if $u5#25 == -1 goto label3;

        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        $u8 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $u8#30 = $u8.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u10 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $u5#25 = $u10[$u-1#18];

        $u5#25 = $u5[$u5#25];

        $u-1#9 = $u8#30[$u5#25];

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1#9);

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", n: ");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u5#25 = $u5[$u-1#18];

        if $u5#25 == -1 goto label5;

        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        $u8 = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $u8#30 = $u8.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $u5 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $u10 = this.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $u-1#18 = $u10[$u-1#18];

        $u-1#18 = $u5[$u-1#18];

        $u-1#9 = $u8#30[$u-1#18];

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1#9);

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        i = i + 1;

        goto label1;

     label8:
        str = new java.lang.StringBuilder;

        specialinvoke str.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#5);

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $u-1#5 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        return $u-1#5;
    }

    public float use(androidx.constraintlayout.solver.ArrayRow, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues this, definition#6;
        androidx.constraintlayout.solver.ArrayRow $u9;
        boolean $u10;
        androidx.constraintlayout.solver.SolverVariable value;
        float $u-1, definitionValue#15;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables definition;
        int $u-1#7, j, i, definitionValue#12;
        int[] definitionValue;
        float[] definitionValue#14;
        androidx.constraintlayout.solver.Cache definitionVariable;
        androidx.constraintlayout.solver.SolverVariable[] definitionVariable#17;

        this := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $u9 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $u10 := @parameter1: boolean;

        value = $u9.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float get(androidx.constraintlayout.solver.SolverVariable)>(value);

        value = $u9.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>(value, $u10);

        definition = $u9.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        definition#6 = (androidx.constraintlayout.solver.SolverVariableValues) definition;

        $u-1#7 = virtualinvoke definition#6.<androidx.constraintlayout.solver.SolverVariableValues: int getCurrentSize()>();

        j = definition#6.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        j = 0;

        i = 0;

     label1:
        if j >= $u-1#7 goto label3;

        definitionValue = definition#6.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        definitionValue#12 = definitionValue[i];

        if definitionValue#12 == -1 goto label2;

        definitionValue#14 = definition#6.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        definitionValue#15 = definitionValue#14[i];

        definitionVariable = this.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        definitionVariable#17 = definitionVariable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        definitionValue = definition#6.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        definitionValue#12 = definitionValue[i];

        value = definitionVariable#17[definitionValue#12];

        definitionValue#15 = definitionValue#15 * $u-1;

        virtualinvoke this.<androidx.constraintlayout.solver.SolverVariableValues: void add(androidx.constraintlayout.solver.SolverVariable,float,boolean)>(value, definitionValue#15, $u10);

        j = j + 1;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return $u-1;
    }
}
