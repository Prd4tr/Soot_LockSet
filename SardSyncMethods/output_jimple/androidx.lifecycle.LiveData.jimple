public abstract class androidx.lifecycle.LiveData extends java.lang.Object
{
    static final java.lang.Object NOT_SET;
    static final int START_VERSION;
    int mActiveCount;
    private volatile java.lang.Object mData;
    final java.lang.Object mDataLock;
    private boolean mDispatchInvalidated;
    private boolean mDispatchingValue;
    private androidx.arch.core.internal.SafeIterableMap mObservers;
    volatile java.lang.Object mPendingData;
    private final java.lang.Runnable mPostValueRunnable;
    private int mVersion;

    static void <clinit>()
    {
        java.lang.Object $u0;

        <androidx.lifecycle.LiveData: int START_VERSION> = -1;

        $u0 = new java.lang.Object;

        specialinvoke $u0.<java.lang.Object: void <init>()>();

        <androidx.lifecycle.LiveData: java.lang.Object NOT_SET> = $u0;

        return;
    }

    public void <init>()
    {
        androidx.lifecycle.LiveData this;
        java.lang.Object $u0;
        androidx.arch.core.internal.SafeIterableMap $u0#2;
        androidx.lifecycle.LiveData$1 $u0#7;

        this := @this: androidx.lifecycle.LiveData;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.lang.Object;

        specialinvoke $u0.<java.lang.Object: void <init>()>();

        this.<androidx.lifecycle.LiveData: java.lang.Object mDataLock> = $u0;

        $u0#2 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke $u0#2.<androidx.arch.core.internal.SafeIterableMap: void <init>()>();

        this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers> = $u0#2;

        this.<androidx.lifecycle.LiveData: int mActiveCount> = 0;

        $u0 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        this.<androidx.lifecycle.LiveData: java.lang.Object mData> = $u0;

        $u0 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        this.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $u0;

        this.<androidx.lifecycle.LiveData: int mVersion> = -1;

        $u0#7 = new androidx.lifecycle.LiveData$1;

        specialinvoke $u0#7.<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>(this);

        this.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable> = $u0#7;

        return;
    }

    private static void assertMainThread(java.lang.String)
    {
        java.lang.String $u3;
        androidx.arch.core.executor.ArchTaskExecutor $u-1;
        boolean $u-1#3;
        java.lang.IllegalStateException $u0;
        java.lang.StringBuilder $u1;

        $u3 := @parameter0: java.lang.String;

        $u-1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $u-1#3 = virtualinvoke $u-1.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>();

        if $u-1#3 == 0 goto label1;

        return;

     label1:
        $u0 = new java.lang.IllegalStateException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot invoke ");

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u3);

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on a background");

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thread");

        $u3 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($u3);

        throw $u0;
    }

    private void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.LiveData$ObserverWrapper observer;
        boolean $u-1;
        int $u0, $u1;
        androidx.lifecycle.Observer $u0#6;
        java.lang.Object $u1#7;

        this := @this: androidx.lifecycle.LiveData;

        observer := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $u-1 = observer.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if $u-1 != 0 goto label1;

        return;

     label1:
        $u-1 = virtualinvoke observer.<androidx.lifecycle.LiveData$ObserverWrapper: boolean shouldBeActive()>();

        if $u-1 != 0 goto label2;

        virtualinvoke observer.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;

     label2:
        $u0 = observer.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion>;

        $u1 = this.<androidx.lifecycle.LiveData: int mVersion>;

        if $u0 < $u1 goto label3;

        return;

     label3:
        observer.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion> = $u1;

        $u0#6 = observer.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver>;

        $u1#7 = this.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        interfaceinvoke $u0#6.<androidx.lifecycle.Observer: void onChanged(java.lang.Object)>($u1#7);

        return;
    }

    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.LiveData$ObserverWrapper initiator, $u2#15;
        boolean $u0;
        androidx.arch.core.internal.SafeIterableMap iterator;
        androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions $u-1;
        java.lang.Object $u-1#10;
        java.util.Map$Entry $u2;

        this := @this: androidx.lifecycle.LiveData;

        initiator := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $u0 = this.<androidx.lifecycle.LiveData: boolean mDispatchingValue>;

        if $u0 == 0 goto label1;

        this.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 1;

        return;

     label1:
        this.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 1;

     label2:
        this.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 0;

        if initiator == null goto label3;

        specialinvoke this.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>(initiator);

        initiator = null;

        goto label5;

     label3:
        iterator = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1 = virtualinvoke iterator.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>();

     label4:
        $u0 = interfaceinvoke $u-1.<java.util.Iterator: boolean hasNext()>();

        if $u0 == 0 goto label5;

        $u-1#10 = interfaceinvoke $u-1.<java.util.Iterator: java.lang.Object next()>();

        $u2 = (java.util.Map$Entry) $u-1#10;

        $u-1#10 = interfaceinvoke $u2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $u2#15 = (androidx.lifecycle.LiveData$ObserverWrapper) $u-1#10;

        specialinvoke this.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>($u2#15);

        $u0 = this.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $u0 == 0 goto label4;

     label5:
        $u0 = this.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $u0 != 0 goto label2;

        this.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 0;

        return;
    }

    public java.lang.Object getValue()
    {
        androidx.lifecycle.LiveData this;
        java.lang.Object data, $u1;

        this := @this: androidx.lifecycle.LiveData;

        data = this.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        $u1 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        if data == $u1 goto label1;

        return data;

     label1:
        return null;
    }

    int getVersion()
    {
        androidx.lifecycle.LiveData this;
        int ret0;

        this := @this: androidx.lifecycle.LiveData;

        ret0 = this.<androidx.lifecycle.LiveData: int mVersion>;

        return ret0;
    }

    public boolean hasActiveObservers()
    {
        androidx.lifecycle.LiveData this;
        int $u0;

        this := @this: androidx.lifecycle.LiveData;

        $u0 = this.<androidx.lifecycle.LiveData: int mActiveCount>;

        if $u0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasObservers()
    {
        androidx.lifecycle.LiveData this;
        int $u-1;
        androidx.arch.core.internal.SafeIterableMap $u0;

        this := @this: androidx.lifecycle.LiveData;

        $u0 = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1 = virtualinvoke $u0.<androidx.arch.core.internal.SafeIterableMap: int size()>();

        if $u-1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void observe(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.LifecycleOwner $u5;
        androidx.lifecycle.Observer observer;
        androidx.lifecycle.Lifecycle $u-1;
        androidx.lifecycle.Lifecycle$State $u-1#4, existing;
        androidx.lifecycle.LiveData$LifecycleBoundObserver wrapper;
        androidx.arch.core.internal.SafeIterableMap existing#8;
        java.lang.Object $u-1#9;
        androidx.lifecycle.LiveData$ObserverWrapper existing#11;
        boolean $u-1#12;
        java.lang.IllegalArgumentException $u2;

        this := @this: androidx.lifecycle.LiveData;

        $u5 := @parameter0: androidx.lifecycle.LifecycleOwner;

        observer := @parameter1: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observe");

        $u-1 = interfaceinvoke $u5.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $u-1#4 = virtualinvoke $u-1.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        existing = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $u-1#4 != existing goto label1;

        return;

     label1:
        wrapper = new androidx.lifecycle.LiveData$LifecycleBoundObserver;

        specialinvoke wrapper.<androidx.lifecycle.LiveData$LifecycleBoundObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)>(this, $u5, observer);

        existing#8 = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1#9 = virtualinvoke existing#8.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(observer, wrapper);

        existing#11 = (androidx.lifecycle.LiveData$ObserverWrapper) $u-1#9;

        if existing#11 == null goto label3;

        $u-1#12 = virtualinvoke existing#11.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>($u5);

        if $u-1#12 == 0 goto label2;

        goto label3;

     label2:
        $u2 = new java.lang.IllegalArgumentException;

        specialinvoke $u2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw $u2;

     label3:
        if existing#11 == null goto label4;

        return;

     label4:
        $u-1 = interfaceinvoke $u5.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        virtualinvoke $u-1.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>(wrapper);

        return;
    }

    public void observeForever(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.Observer observer;
        java.lang.Object $u-1;
        androidx.lifecycle.LiveData$AlwaysActiveObserver wrapper;
        androidx.arch.core.internal.SafeIterableMap existing;
        androidx.lifecycle.LiveData$ObserverWrapper existing#5;
        boolean $u2;
        java.lang.IllegalArgumentException $u2#7;

        this := @this: androidx.lifecycle.LiveData;

        observer := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observeForever");

        wrapper = new androidx.lifecycle.LiveData$AlwaysActiveObserver;

        specialinvoke wrapper.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)>(this, observer);

        existing = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1 = virtualinvoke existing.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(observer, wrapper);

        existing#5 = (androidx.lifecycle.LiveData$ObserverWrapper) $u-1;

        if existing#5 == null goto label2;

        $u2 = existing#5 instanceof androidx.lifecycle.LiveData$LifecycleBoundObserver;

        if $u2 != 0 goto label1;

        goto label2;

     label1:
        $u2#7 = new java.lang.IllegalArgumentException;

        specialinvoke $u2#7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw $u2#7;

     label2:
        if existing#5 == null goto label3;

        return;

     label3:
        virtualinvoke wrapper.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void activeStateChanged(boolean)>(1);

        return;
    }

    protected void onActive()
    {
        androidx.lifecycle.LiveData this;

        this := @this: androidx.lifecycle.LiveData;

        return;
    }

    protected void onInactive()
    {
        androidx.lifecycle.LiveData this;

        this := @this: androidx.lifecycle.LiveData;

        return;
    }

    protected void postValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData this;
        java.lang.Object value, $u3, $u0, $u2;
        androidx.arch.core.executor.ArchTaskExecutor $u-1;
        boolean postTask;
        java.lang.Runnable $u2#5;
        java.lang.Throwable $u2#6;

        this := @this: androidx.lifecycle.LiveData;

        value := @parameter0: java.lang.Object;

        $u0 = this.<androidx.lifecycle.LiveData: java.lang.Object mDataLock>;

        entermonitor $u0;

        postTask = 0;

     label1:
        $u2 = this.<androidx.lifecycle.LiveData: java.lang.Object mPendingData>;

        $u3 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

     label2:
        if $u2 != $u3 goto label3;

        postTask = 1;

     label3:
        this.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = value;

        exitmonitor $u0;

     label4:
        if postTask != 0 goto label5;

        return;

     label5:
        $u-1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $u2#5 = this.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable>;

        virtualinvoke $u-1.<androidx.arch.core.executor.ArchTaskExecutor: void postToMainThread(java.lang.Runnable)>($u2#5);

        return;

     label6:
        $u2#6 := @caughtexception;

     label7:
        exitmonitor $u0;

     label8:
        throw $u2#6;

     label9:
        $u2#6 := @caughtexception;

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void removeObserver(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.Observer observer;
        java.lang.Object $u-1;
        androidx.arch.core.internal.SafeIterableMap removed;
        androidx.lifecycle.LiveData$ObserverWrapper removed#4;

        this := @this: androidx.lifecycle.LiveData;

        observer := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObserver");

        removed = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1 = virtualinvoke removed.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>(observer);

        removed#4 = (androidx.lifecycle.LiveData$ObserverWrapper) $u-1;

        if removed#4 != null goto label1;

        return;

     label1:
        virtualinvoke removed#4.<androidx.lifecycle.LiveData$ObserverWrapper: void detachObserver()>();

        virtualinvoke removed#4.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;
    }

    public void removeObservers(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LiveData this;
        androidx.lifecycle.LifecycleOwner $u4;
        androidx.arch.core.internal.SafeIterableMap $u0;
        java.util.Iterator $u-1;
        boolean $u-1#5;
        java.lang.Object $u-1#7;
        java.util.Map$Entry entry;
        androidx.lifecycle.LiveData$ObserverWrapper $u2;
        androidx.lifecycle.Observer $u2#17;

        this := @this: androidx.lifecycle.LiveData;

        $u4 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObservers");

        $u0 = this.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $u-1 = virtualinvoke $u0.<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>();

     label1:
        $u-1#5 = interfaceinvoke $u-1.<java.util.Iterator: boolean hasNext()>();

        if $u-1#5 == 0 goto label2;

        $u-1#7 = interfaceinvoke $u-1.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $u-1#7;

        $u-1#7 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $u2 = (androidx.lifecycle.LiveData$ObserverWrapper) $u-1#7;

        $u-1#5 = virtualinvoke $u2.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>($u4);

        if $u-1#5 == 0 goto label1;

        $u-1#7 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $u2#17 = (androidx.lifecycle.Observer) $u-1#7;

        virtualinvoke this.<androidx.lifecycle.LiveData: void removeObserver(androidx.lifecycle.Observer)>($u2#17);

        goto label1;

     label2:
        return;
    }

    protected void setValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData this;
        java.lang.Object value;
        int $u0;

        this := @this: androidx.lifecycle.LiveData;

        value := @parameter0: java.lang.Object;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("setValue");

        $u0 = this.<androidx.lifecycle.LiveData: int mVersion>;

        $u0 = $u0 + 1;

        this.<androidx.lifecycle.LiveData: int mVersion> = $u0;

        this.<androidx.lifecycle.LiveData: java.lang.Object mData> = value;

        virtualinvoke this.<androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>(null);

        return;
    }
}
