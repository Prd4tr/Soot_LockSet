public final class androidx.core.graphics.ColorUtils extends java.lang.Object
{
    private static final int MIN_ALPHA_SEARCH_MAX_ITERATIONS;
    private static final int MIN_ALPHA_SEARCH_PRECISION;
    private static final java.lang.ThreadLocal TEMP_ARRAY;
    private static final double XYZ_EPSILON;
    private static final double XYZ_KAPPA;
    private static final double XYZ_WHITE_REFERENCE_X;
    private static final double XYZ_WHITE_REFERENCE_Y;
    private static final double XYZ_WHITE_REFERENCE_Z;

    static void <clinit>()
    {
        java.lang.ThreadLocal $u0;

        <androidx.core.graphics.ColorUtils: double XYZ_WHITE_REFERENCE_Z> = 108.883;

        <androidx.core.graphics.ColorUtils: double XYZ_WHITE_REFERENCE_Y> = 100.0;

        <androidx.core.graphics.ColorUtils: double XYZ_WHITE_REFERENCE_X> = 95.047;

        <androidx.core.graphics.ColorUtils: double XYZ_KAPPA> = 903.3;

        <androidx.core.graphics.ColorUtils: double XYZ_EPSILON> = 0.008856;

        <androidx.core.graphics.ColorUtils: int MIN_ALPHA_SEARCH_PRECISION> = 1;

        <androidx.core.graphics.ColorUtils: int MIN_ALPHA_SEARCH_MAX_ITERATIONS> = 10;

        $u0 = new java.lang.ThreadLocal;

        specialinvoke $u0.<java.lang.ThreadLocal: void <init>()>();

        <androidx.core.graphics.ColorUtils: java.lang.ThreadLocal TEMP_ARRAY> = $u0;

        return;
    }

    private void <init>()
    {
        androidx.core.graphics.ColorUtils this;

        this := @this: androidx.core.graphics.ColorUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static int HSLToColor(float[])
    {
        float[] $u13;
        float h, s, l, c;
        int hueSegment, hueSegment#26, g, b1;

        $u13 := @parameter0: float[];

        h = $u13[0];

        s = $u13[1];

        l = $u13[2];

        c = l * 2.0F;

        c = c - 1.0F;

        c = staticinvoke <java.lang.Math: float abs(float)>(c);

        c = 1.0F - c;

        s = c * s;

        c = 0.5F * s;

        l = l - c;

        c = h / 60.0F;

        c = c % 2.0F;

        c = c - 1.0F;

        c = staticinvoke <java.lang.Math: float abs(float)>(c);

        c = 1.0F - c;

        c = c * s;

        hueSegment = (int) h;

        hueSegment#26 = hueSegment / 60;

        hueSegment = 0;

        g = 0;

        b1 = 0;

        lookupswitch(hueSegment#26)
        {
            case 0: goto label7;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        goto label8;

     label2:
        s = s + l;

        s = s * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(s);

        s = l * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(s);

        l = c + l;

        l = l * 255.0F;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

        goto label8;

     label3:
        h = c + l;

        h = h * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(h);

        h = l * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(h);

        l = s + l;

        l = l * 255.0F;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

        goto label8;

     label4:
        h = l * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(h);

        h = c + l;

        h = h * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(h);

        l = s + l;

        l = l * 255.0F;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

        goto label8;

     label5:
        h = l * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(h);

        s = s + l;

        s = s * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(s);

        l = c + l;

        l = l * 255.0F;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

        goto label8;

     label6:
        h = c + l;

        h = h * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(h);

        s = s + l;

        s = s * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(s);

        l = 255.0F * l;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

        goto label8;

     label7:
        s = s + l;

        s = s * 255.0F;

        hueSegment = staticinvoke <java.lang.Math: int round(float)>(s);

        s = c + l;

        s = s * 255.0F;

        g = staticinvoke <java.lang.Math: int round(float)>(s);

        l = 255.0F * l;

        b1 = staticinvoke <java.lang.Math: int round(float)>(l);

     label8:
        hueSegment = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>(hueSegment, 0, 255);

        g = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>(g, 0, 255);

        b1 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>(b1, 0, 255);

        hueSegment = staticinvoke <android.graphics.Color: int rgb(int,int,int)>(hueSegment, g, b1);

        return hueSegment;
    }

    public static int LABToColor(double, double, double)
    {
        double $u8, $u10, $u12;
        double[] $u-1;
        int $u-1#6;

        $u8 := @parameter0: double;

        $u10 := @parameter1: double;

        $u12 := @parameter2: double;

        $u-1 = staticinvoke <androidx.core.graphics.ColorUtils: double[] getTempDouble3Array()>();

        staticinvoke <androidx.core.graphics.ColorUtils: void LABToXYZ(double,double,double,double[])>($u8, $u10, $u12, $u-1);

        $u8 = $u-1[0];

        $u10 = $u-1[1];

        $u12 = $u-1[2];

        $u-1#6 = staticinvoke <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>($u8, $u10, $u12);

        return $u-1#6;
    }

    public static void LABToXYZ(double, double, double, double[])
    {
        double $u23, $u25, $u27, fy, fx;
        double[] $u29;
        byte $u22;

        $u23 := @parameter0: double;

        $u25 := @parameter1: double;

        $u27 := @parameter2: double;

        $u29 := @parameter3: double[];

        fy = $u23 + 16.0;

        fy = fy / 116.0;

        $u25 = $u25 / 500.0;

        fx = $u25 + fy;

        $u25 = $u27 / 200.0;

        $u25 = fy - $u25;

        $u27 = staticinvoke <java.lang.Math: double pow(double,double)>(fx, 3.0);

        $u22 = $u27 cmpl 0.008856;

        if $u22 <= 0 goto label1;

        goto label2;

     label1:
        $u27 = fx * 116.0;

        $u27 = $u27 - 16.0;

        $u27 = $u27 / 903.3;

     label2:
        $u22 = $u23 cmpl 7.9996247999999985;

        if $u22 <= 0 goto label3;

        $u23 = staticinvoke <java.lang.Math: double pow(double,double)>(fy, 3.0);

        goto label4;

     label3:
        $u23 = $u23 / 903.3;

     label4:
        fy = staticinvoke <java.lang.Math: double pow(double,double)>($u25, 3.0);

        $u22 = fy cmpl 0.008856;

        if $u22 <= 0 goto label5;

        $u25 = fy;

        goto label6;

     label5:
        $u25 = 116.0 * $u25;

        $u25 = $u25 - 16.0;

        $u25 = $u25 / 903.3;

     label6:
        $u27 = 95.047 * $u27;

        $u29[0] = $u27;

        $u23 = 100.0 * $u23;

        $u29[1] = $u23;

        $u23 = 108.883 * $u25;

        $u29[2] = $u23;

        return;
    }

    public static void RGBToHSL(int, int, int, float[])
    {
        int $u16, $u17, $u18;
        float[] $u19;
        float deltaMaxMin, rf, rf#3, gf, bf, $u-1, $u-1#14;
        byte h;

        $u16 := @parameter0: int;

        $u17 := @parameter1: int;

        $u18 := @parameter2: int;

        $u19 := @parameter3: float[];

        rf = (float) $u16;

        rf#3 = rf / 255.0F;

        rf = (float) $u17;

        gf = rf / 255.0F;

        rf = (float) $u18;

        bf = rf / 255.0F;

        rf = staticinvoke <java.lang.Math: float max(float,float)>(gf, bf);

        $u-1 = staticinvoke <java.lang.Math: float max(float,float)>(rf#3, rf);

        rf = staticinvoke <java.lang.Math: float min(float,float)>(gf, bf);

        $u-1#14 = staticinvoke <java.lang.Math: float min(float,float)>(rf#3, rf);

        deltaMaxMin = $u-1 - $u-1#14;

        rf = $u-1 + $u-1#14;

        rf = rf / 2.0F;

        h = $u-1 cmpl $u-1#14;

        if h != 0 goto label1;

        deltaMaxMin = 0.0F;

        rf#3 = 0.0F;

        goto label5;

     label1:
        h = $u-1 cmpl rf#3;

        if h != 0 goto label2;

        rf#3 = gf - bf;

        rf#3 = rf#3 / deltaMaxMin;

        rf#3 = rf#3 % 6.0F;

        goto label4;

     label2:
        h = $u-1 cmpl gf;

        if h != 0 goto label3;

        rf#3 = bf - rf#3;

        rf#3 = rf#3 / deltaMaxMin;

        rf#3 = rf#3 + 2.0F;

        goto label4;

     label3:
        rf#3 = rf#3 - gf;

        rf#3 = rf#3 / deltaMaxMin;

        rf#3 = rf#3 + 4.0F;

     label4:
        gf = 2.0F * rf;

        gf = gf - 1.0F;

        gf = staticinvoke <java.lang.Math: float abs(float)>(gf);

        gf = 1.0F - gf;

        deltaMaxMin = deltaMaxMin / gf;

     label5:
        rf#3 = 60.0F * rf#3;

        rf#3 = rf#3 % 360.0F;

        h = rf#3 cmpg 0.0F;

        if h >= 0 goto label6;

        rf#3 = rf#3 + 360.0F;

     label6:
        rf#3 = staticinvoke <androidx.core.graphics.ColorUtils: float constrain(float,float,float)>(rf#3, 0.0F, 360.0F);

        $u19[0] = rf#3;

        deltaMaxMin = staticinvoke <androidx.core.graphics.ColorUtils: float constrain(float,float,float)>(deltaMaxMin, 0.0F, 1.0F);

        $u19[1] = deltaMaxMin;

        rf = staticinvoke <androidx.core.graphics.ColorUtils: float constrain(float,float,float)>(rf, 0.0F, 1.0F);

        $u19[2] = rf;

        return;
    }

    public static void RGBToLAB(int, int, int, double[])
    {
        int $u8, $u9, $u10;
        double[] $u11;
        double $u1, $u3, $u5;

        $u8 := @parameter0: int;

        $u9 := @parameter1: int;

        $u10 := @parameter2: int;

        $u11 := @parameter3: double[];

        staticinvoke <androidx.core.graphics.ColorUtils: void RGBToXYZ(int,int,int,double[])>($u8, $u9, $u10, $u11);

        $u1 = $u11[0];

        $u3 = $u11[1];

        $u5 = $u11[2];

        staticinvoke <androidx.core.graphics.ColorUtils: void XYZToLAB(double,double,double,double[])>($u1, $u3, $u5, $u11);

        return;
    }

    public static void RGBToXYZ(int, int, int, double[])
    {
        int $u22, $u23, $u24, $u1;
        double[] $u25;
        double sr, sg1, sb1, $u10, $u13;
        byte $u16;
        java.lang.IllegalArgumentException sr#73;

        $u22 := @parameter0: int;

        $u23 := @parameter1: int;

        $u24 := @parameter2: int;

        $u25 := @parameter3: double[];

        $u1 = lengthof $u25;

        if $u1 != 3 goto label7;

        sr = (double) $u22;

        staticinvoke <java.lang.Double: boolean isNaN(double)>(sr);

        sr = sr / 255.0;

        $u16 = sr cmpg 0.04045;

        if $u16 >= 0 goto label1;

        sr = sr / 12.92;

        goto label2;

     label1:
        sr = sr + 0.055;

        sr = sr / 1.055;

        sr = staticinvoke <java.lang.Math: double pow(double,double)>(sr, 2.4);

     label2:
        sg1 = (double) $u23;

        staticinvoke <java.lang.Double: boolean isNaN(double)>(sg1);

        sg1 = sg1 / 255.0;

        $u16 = sg1 cmpg 0.04045;

        if $u16 >= 0 goto label3;

        sg1 = sg1 / 12.92;

        goto label4;

     label3:
        sg1 = sg1 + 0.055;

        sg1 = sg1 / 1.055;

        sg1 = staticinvoke <java.lang.Math: double pow(double,double)>(sg1, 2.4);

     label4:
        sb1 = (double) $u24;

        staticinvoke <java.lang.Double: boolean isNaN(double)>(sb1);

        sb1 = sb1 / 255.0;

        $u16 = sb1 cmpg 0.04045;

        if $u16 >= 0 goto label5;

        sb1 = sb1 / 12.92;

        goto label6;

     label5:
        sb1 = 0.055 + sb1;

        sb1 = sb1 / 1.055;

        sb1 = staticinvoke <java.lang.Math: double pow(double,double)>(sb1, 2.4);

     label6:
        $u10 = 0.4124 * sr;

        $u13 = 0.3576 * sg1;

        $u10 = $u10 + $u13;

        $u13 = 0.1805 * sb1;

        $u10 = $u10 + $u13;

        $u10 = $u10 * 100.0;

        $u25[0] = $u10;

        $u10 = 0.2126 * sr;

        $u13 = 0.7152 * sg1;

        $u10 = $u10 + $u13;

        $u13 = 0.0722 * sb1;

        $u10 = $u10 + $u13;

        $u10 = $u10 * 100.0;

        $u25[1] = $u10;

        sr = 0.0193 * sr;

        sg1 = 0.1192 * sg1;

        sr = sr + sg1;

        sg1 = 0.9505 * sb1;

        sr = sr + sg1;

        sr = sr * 100.0;

        $u25[2] = sr;

        return;

     label7:
        sr#73 = new java.lang.IllegalArgumentException;

        specialinvoke sr#73.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outXyz must have a length of 3.");

        throw sr#73;
    }

    public static int XYZToColor(double, double, double)
    {
        double $u18, $u20, $u22, r, b, b1;
        int $u7, $u9, $u12;
        byte $u16;
        long $u-1;

        $u18 := @parameter0: double;

        $u20 := @parameter1: double;

        $u22 := @parameter2: double;

        r = 3.2406 * $u18;

        b = -1.5372 * $u20;

        r = r + b;

        b = -0.4986 * $u22;

        r = r + b;

        r = r / 100.0;

        b = -0.9689 * $u18;

        b1 = 1.8758 * $u20;

        b = b + b1;

        b1 = 0.0415 * $u22;

        b = b + b1;

        b = b / 100.0;

        $u18 = 0.0557 * $u18;

        $u20 = -0.204 * $u20;

        $u18 = $u18 + $u20;

        $u20 = 1.057 * $u22;

        $u18 = $u18 + $u20;

        $u18 = $u18 / 100.0;

        $u16 = r cmpl 0.0031308;

        if $u16 <= 0 goto label1;

        $u20 = staticinvoke <java.lang.Math: double pow(double,double)>(r, 0.4166666666666667);

        $u20 = $u20 * 1.055;

        $u20 = $u20 - 0.055;

        goto label2;

     label1:
        $u20 = r * 12.92;

     label2:
        $u16 = b cmpl 0.0031308;

        if $u16 <= 0 goto label3;

        $u22 = staticinvoke <java.lang.Math: double pow(double,double)>(b, 0.4166666666666667);

        $u22 = $u22 * 1.055;

        $u22 = $u22 - 0.055;

        goto label4;

     label3:
        $u22 = b * 12.92;

     label4:
        $u16 = $u18 cmpl 0.0031308;

        if $u16 <= 0 goto label5;

        $u18 = staticinvoke <java.lang.Math: double pow(double,double)>($u18, 0.4166666666666667);

        $u18 = $u18 * 1.055;

        $u18 = $u18 - 0.055;

        goto label6;

     label5:
        $u18 = $u18 * 12.92;

     label6:
        $u20 = $u20 * 255.0;

        $u-1 = staticinvoke <java.lang.Math: long round(double)>($u20);

        $u9 = (int) $u-1;

        $u9 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($u9, 0, 255);

        $u20 = $u22 * 255.0;

        $u-1 = staticinvoke <java.lang.Math: long round(double)>($u20);

        $u12 = (int) $u-1;

        $u12 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($u12, 0, 255);

        $u18 = 255.0 * $u18;

        $u-1 = staticinvoke <java.lang.Math: long round(double)>($u18);

        $u7 = (int) $u-1;

        $u7 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($u7, 0, 255);

        $u9 = staticinvoke <android.graphics.Color: int rgb(int,int,int)>($u9, $u12, $u7);

        return $u9;
    }

    public static void XYZToLAB(double, double, double, double[])
    {
        double[] $u13;
        double $u7, $u9, $u11, $u3;
        int $u0;
        java.lang.IllegalArgumentException $u0#33;

        $u7 := @parameter0: double;

        $u9 := @parameter1: double;

        $u11 := @parameter2: double;

        $u13 := @parameter3: double[];

        $u0 = lengthof $u13;

        if $u0 != 3 goto label1;

        $u7 = $u7 / 95.047;

        $u7 = staticinvoke <androidx.core.graphics.ColorUtils: double pivotXyzComponent(double)>($u7);

        $u9 = $u9 / 100.0;

        $u9 = staticinvoke <androidx.core.graphics.ColorUtils: double pivotXyzComponent(double)>($u9);

        $u11 = $u11 / 108.883;

        $u11 = staticinvoke <androidx.core.graphics.ColorUtils: double pivotXyzComponent(double)>($u11);

        $u3 = 116.0 * $u9;

        $u3 = $u3 - 16.0;

        $u3 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, $u3);

        $u13[0] = $u3;

        $u7 = $u7 - $u9;

        $u7 = $u7 * 500.0;

        $u13[1] = $u7;

        $u7 = $u9 - $u11;

        $u7 = $u7 * 200.0;

        $u13[2] = $u7;

        return;

     label1:
        $u0#33 = new java.lang.IllegalArgumentException;

        specialinvoke $u0#33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outLab must have a length of 3.");

        throw $u0#33;
    }

    public static int blendARGB(int, int, float)
    {
        int $u9, $u10, $u8, $u5;
        float $u11, inverseRatio, a, r, g, b;

        $u9 := @parameter0: int;

        $u10 := @parameter1: int;

        $u11 := @parameter2: float;

        inverseRatio = 1.0F - $u11;

        $u8 = staticinvoke <android.graphics.Color: int alpha(int)>($u9);

        a = (float) $u8;

        a = a * inverseRatio;

        $u8 = staticinvoke <android.graphics.Color: int alpha(int)>($u10);

        r = (float) $u8;

        r = r * $u11;

        a = a + r;

        $u8 = staticinvoke <android.graphics.Color: int red(int)>($u9);

        r = (float) $u8;

        r = r * inverseRatio;

        $u8 = staticinvoke <android.graphics.Color: int red(int)>($u10);

        g = (float) $u8;

        g = g * $u11;

        r = r + g;

        $u8 = staticinvoke <android.graphics.Color: int green(int)>($u9);

        g = (float) $u8;

        g = g * inverseRatio;

        $u8 = staticinvoke <android.graphics.Color: int green(int)>($u10);

        b = (float) $u8;

        b = b * $u11;

        g = g + b;

        $u9 = staticinvoke <android.graphics.Color: int blue(int)>($u9);

        b = (float) $u9;

        inverseRatio = b * inverseRatio;

        $u9 = staticinvoke <android.graphics.Color: int blue(int)>($u10);

        b = (float) $u9;

        $u11 = b * $u11;

        $u11 = inverseRatio + $u11;

        $u5 = (int) a;

        $u9 = (int) r;

        $u10 = (int) g;

        $u8 = (int) $u11;

        $u9 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($u5, $u9, $u10, $u8);

        return $u9;
    }

    public static void blendHSL(float[], float[], float, float[])
    {
        float[] $u4, $u5, $u7;
        float $u6, $u-1, inverseRatio#4, $u3;
        int inverseRatio;
        java.lang.IllegalArgumentException inverseRatio#21;

        $u4 := @parameter0: float[];

        $u5 := @parameter1: float[];

        $u6 := @parameter2: float;

        $u7 := @parameter3: float[];

        inverseRatio = lengthof $u7;

        if inverseRatio != 3 goto label1;

        inverseRatio#4 = 1.0F - $u6;

        $u-1 = $u4[0];

        $u3 = $u5[0];

        $u-1 = staticinvoke <androidx.core.graphics.ColorUtils: float circularInterpolate(float,float,float)>($u-1, $u3, $u6);

        $u7[0] = $u-1;

        $u-1 = $u4[1];

        $u-1 = $u-1 * inverseRatio#4;

        $u3 = $u5[1];

        $u3 = $u3 * $u6;

        $u-1 = $u-1 + $u3;

        $u7[1] = $u-1;

        $u-1 = $u4[2];

        inverseRatio#4 = $u-1 * inverseRatio#4;

        $u-1 = $u5[2];

        $u6 = $u-1 * $u6;

        $u6 = inverseRatio#4 + $u6;

        $u7[2] = $u6;

        return;

     label1:
        inverseRatio#21 = new java.lang.IllegalArgumentException;

        specialinvoke inverseRatio#21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("result must have a length of 3.");

        throw inverseRatio#21;
    }

    public static void blendLAB(double[], double[], double, double[])
    {
        double[] $u7, $u8, $u11;
        double $u9, inverseRatio#4, $u3, $u5;
        int inverseRatio;
        java.lang.IllegalArgumentException inverseRatio#23;

        $u7 := @parameter0: double[];

        $u8 := @parameter1: double[];

        $u9 := @parameter2: double;

        $u11 := @parameter3: double[];

        inverseRatio = lengthof $u11;

        if inverseRatio != 3 goto label1;

        inverseRatio#4 = 1.0 - $u9;

        $u3 = $u7[0];

        $u3 = $u3 * inverseRatio#4;

        $u5 = $u8[0];

        $u5 = $u5 * $u9;

        $u3 = $u3 + $u5;

        $u11[0] = $u3;

        $u3 = $u7[1];

        $u3 = $u3 * inverseRatio#4;

        $u5 = $u8[1];

        $u5 = $u5 * $u9;

        $u3 = $u3 + $u5;

        $u11[1] = $u3;

        $u3 = $u7[2];

        inverseRatio#4 = $u3 * inverseRatio#4;

        $u3 = $u8[2];

        $u9 = $u3 * $u9;

        $u9 = inverseRatio#4 + $u9;

        $u11[2] = $u9;

        return;

     label1:
        inverseRatio#23 = new java.lang.IllegalArgumentException;

        specialinvoke inverseRatio#23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outResult must have a length of 3.");

        throw inverseRatio#23;
    }

    public static double calculateContrast(int, int)
    {
        int $u9, $u8, $u-1;
        double $u-1#8, $u-1#12, luminance2;
        java.lang.IllegalArgumentException luminance1;
        java.lang.StringBuilder $u1;
        java.lang.String $u-1#22;

        $u8 := @parameter0: int;

        $u9 := @parameter1: int;

        $u-1 = staticinvoke <android.graphics.Color: int alpha(int)>($u9);

        if $u-1 != 255 goto label2;

        $u-1 = staticinvoke <android.graphics.Color: int alpha(int)>($u8);

        if $u-1 >= 255 goto label1;

        $u8 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeColors(int,int)>($u8, $u9);

     label1:
        $u-1#8 = staticinvoke <androidx.core.graphics.ColorUtils: double calculateLuminance(int)>($u8);

        $u-1#8 = $u-1#8 + 0.05;

        $u-1#12 = staticinvoke <androidx.core.graphics.ColorUtils: double calculateLuminance(int)>($u9);

        luminance2 = $u-1#12 + 0.05;

        $u-1#12 = staticinvoke <java.lang.Math: double max(double,double)>($u-1#8, luminance2);

        $u-1#8 = staticinvoke <java.lang.Math: double min(double,double)>($u-1#8, luminance2);

        $u-1#8 = $u-1#12 / $u-1#8;

        return $u-1#8;

     label2:
        luminance1 = new java.lang.IllegalArgumentException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background can not be translucent: #");

        $u-1#22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($u9);

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#22);

        $u-1#22 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke luminance1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($u-1#22);

        throw luminance1;
    }

    public static double calculateLuminance(int)
    {
        int $u5;
        double[] $u-1;
        double $u1;

        $u5 := @parameter0: int;

        $u-1 = staticinvoke <androidx.core.graphics.ColorUtils: double[] getTempDouble3Array()>();

        staticinvoke <androidx.core.graphics.ColorUtils: void colorToXYZ(int,double[])>($u5, $u-1);

        $u1 = $u-1[1];

        $u1 = $u1 / 100.0;

        return $u1;
    }

    public static int calculateMinimumAlpha(int, int, float)
    {
        int $u10, $u11, $u-1, minAlpha, maxAlpha, testAlpha, $u-1#19;
        float $u12;
        byte $u9;
        double $u-1#6, numIterations;
        java.lang.IllegalArgumentException testForeground;
        java.lang.StringBuilder testRatio;
        java.lang.String $u-1#27;

        $u10 := @parameter0: int;

        $u11 := @parameter1: int;

        $u12 := @parameter2: float;

        $u-1 = staticinvoke <android.graphics.Color: int alpha(int)>($u11);

        if $u-1 != 255 goto label6;

        $u-1 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>($u10, 255);

        $u-1#6 = staticinvoke <androidx.core.graphics.ColorUtils: double calculateContrast(int,int)>($u-1, $u11);

        numIterations = (double) $u12;

        $u9 = $u-1#6 cmpg numIterations;

        if $u9 >= 0 goto label1;

        return -1;

     label1:
        $u-1 = 0;

        minAlpha = 0;

        maxAlpha = 255;

     label2:
        if $u-1 > 10 goto label5;

        testAlpha = maxAlpha - minAlpha;

        if testAlpha <= 1 goto label8;

        testAlpha = minAlpha + maxAlpha;

        testAlpha = testAlpha / 2;

        $u-1#19 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>($u10, testAlpha);

        $u-1#6 = staticinvoke <androidx.core.graphics.ColorUtils: double calculateContrast(int,int)>($u-1#19, $u11);

        numIterations = (double) $u12;

        $u9 = $u-1#6 cmpg numIterations;

        if $u9 >= 0 goto label3;

        minAlpha = testAlpha;

        goto label4;

     label3:
        maxAlpha = testAlpha;

     label4:
        $u-1 = $u-1 + 1;

        goto label2;

     label5:
        return maxAlpha;

     label6:
        testForeground = new java.lang.IllegalArgumentException;

        testRatio = new java.lang.StringBuilder;

        specialinvoke testRatio.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke testRatio.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("background can not be translucent: #");

        $u-1#27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($u11);

        virtualinvoke testRatio.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#27);

        $u-1#27 = virtualinvoke testRatio.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke testForeground.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($u-1#27);

        goto label7;

     label7:
        throw testForeground;

     label8:
        return maxAlpha;
    }

    static float circularInterpolate(float, float, float)
    {
        float $u5, $u-1, $u3, $u4;
        byte $u0;

        $u3 := @parameter0: float;

        $u4 := @parameter1: float;

        $u5 := @parameter2: float;

        $u-1 = $u4 - $u3;

        $u-1 = staticinvoke <java.lang.Math: float abs(float)>($u-1);

        $u0 = $u-1 cmpl 180.0F;

        if $u0 <= 0 goto label2;

        $u0 = $u4 cmpl $u3;

        if $u0 <= 0 goto label1;

        $u3 = $u3 + 360.0F;

        goto label2;

     label1:
        $u4 = $u4 + 360.0F;

     label2:
        $u4 = $u4 - $u3;

        $u4 = $u4 * $u5;

        $u3 = $u4 + $u3;

        $u3 = $u3 % 360.0F;

        return $u3;
    }

    public static void colorToHSL(int, float[])
    {
        int $u3, $u-1, $u-1#2;
        float[] $u4;

        $u3 := @parameter0: int;

        $u4 := @parameter1: float[];

        $u-1 = staticinvoke <android.graphics.Color: int red(int)>($u3);

        $u-1#2 = staticinvoke <android.graphics.Color: int green(int)>($u3);

        $u3 = staticinvoke <android.graphics.Color: int blue(int)>($u3);

        staticinvoke <androidx.core.graphics.ColorUtils: void RGBToHSL(int,int,int,float[])>($u-1, $u-1#2, $u3, $u4);

        return;
    }

    public static void colorToLAB(int, double[])
    {
        int $u3, $u-1, $u-1#2;
        double[] $u4;

        $u3 := @parameter0: int;

        $u4 := @parameter1: double[];

        $u-1 = staticinvoke <android.graphics.Color: int red(int)>($u3);

        $u-1#2 = staticinvoke <android.graphics.Color: int green(int)>($u3);

        $u3 = staticinvoke <android.graphics.Color: int blue(int)>($u3);

        staticinvoke <androidx.core.graphics.ColorUtils: void RGBToLAB(int,int,int,double[])>($u-1, $u-1#2, $u3, $u4);

        return;
    }

    public static void colorToXYZ(int, double[])
    {
        int $u3, $u-1, $u-1#2;
        double[] $u4;

        $u3 := @parameter0: int;

        $u4 := @parameter1: double[];

        $u-1 = staticinvoke <android.graphics.Color: int red(int)>($u3);

        $u-1#2 = staticinvoke <android.graphics.Color: int green(int)>($u3);

        $u3 = staticinvoke <android.graphics.Color: int blue(int)>($u3);

        staticinvoke <androidx.core.graphics.ColorUtils: void RGBToXYZ(int,int,int,double[])>($u-1, $u-1#2, $u3, $u4);

        return;
    }

    private static int compositeAlpha(int, int)
    {
        int $u2, $u3;

        $u2 := @parameter0: int;

        $u3 := @parameter1: int;

        $u3 = 255 - $u3;

        $u2 = 255 - $u2;

        $u2 = $u3 * $u2;

        $u2 = $u2 / 255;

        $u2 = 255 - $u2;

        return $u2;
    }

    public static int compositeColors(int, int)
    {
        int $u7, $u8, $u-1, $u-1#2, $u-1#3, $u-1#4, $u-1#6, $u-1#12;

        $u7 := @parameter0: int;

        $u8 := @parameter1: int;

        $u-1 = staticinvoke <android.graphics.Color: int alpha(int)>($u8);

        $u-1#2 = staticinvoke <android.graphics.Color: int alpha(int)>($u7);

        $u-1#3 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeAlpha(int,int)>($u-1#2, $u-1);

        $u-1#4 = staticinvoke <android.graphics.Color: int red(int)>($u7);

        $u-1#6 = staticinvoke <android.graphics.Color: int red(int)>($u8);

        $u-1#4 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>($u-1#4, $u-1#2, $u-1#6, $u-1, $u-1#3);

        $u-1#6 = staticinvoke <android.graphics.Color: int green(int)>($u7);

        $u-1#12 = staticinvoke <android.graphics.Color: int green(int)>($u8);

        $u-1#6 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>($u-1#6, $u-1#2, $u-1#12, $u-1, $u-1#3);

        $u7 = staticinvoke <android.graphics.Color: int blue(int)>($u7);

        $u8 = staticinvoke <android.graphics.Color: int blue(int)>($u8);

        $u7 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>($u7, $u-1#2, $u8, $u-1, $u-1#3);

        $u7 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($u-1#3, $u-1#4, $u-1#6, $u7);

        return $u7;
    }

    public static android.graphics.Color compositeColors(android.graphics.Color, android.graphics.Color)
    {
        android.graphics.Color $u9, $u10;
        android.graphics.ColorSpace$Model $u-1, $u-1#3;
        boolean $u-1#5;
        android.graphics.ColorSpace $u-1#7, $u-1#9;
        float[] $u-1#17, $u-1#19;
        float $u-1#21, sa, $u-1#23, ai;
        int $u-1#28, i#37;
        byte i;
        java.lang.IllegalArgumentException s;
        java.lang.StringBuilder src;
        java.lang.String $u-1#56;

        $u9 := @parameter0: android.graphics.Color;

        $u10 := @parameter1: android.graphics.Color;

        $u-1 = virtualinvoke $u9.<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>();

        $u-1#3 = virtualinvoke $u10.<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>();

        $u-1#5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($u-1, $u-1#3);

        if $u-1#5 == 0 goto label6;

        $u-1#7 = virtualinvoke $u10.<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>();

        $u-1#9 = virtualinvoke $u9.<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>();

        $u-1#5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($u-1#7, $u-1#9);

        if $u-1#5 == 0 goto label1;

        goto label2;

     label1:
        $u-1#7 = virtualinvoke $u10.<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>();

        $u9 = virtualinvoke $u9.<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>($u-1#7);

     label2:
        $u-1#17 = virtualinvoke $u9.<android.graphics.Color: float[] getComponents()>();

        $u-1#19 = virtualinvoke $u10.<android.graphics.Color: float[] getComponents()>();

        $u-1#21 = virtualinvoke $u9.<android.graphics.Color: float alpha()>();

        sa = $u-1#21;

        $u-1#23 = virtualinvoke $u10.<android.graphics.Color: float alpha()>();

        ai = 1.0F - $u-1#21;

        $u-1#23 = $u-1#23 * ai;

        $u-1#28 = virtualinvoke $u10.<android.graphics.Color: int getComponentCount()>();

        $u-1#28 = $u-1#28 + -1;

        ai = $u-1#21 + $u-1#23;

        $u-1#19[$u-1#28] = ai;

        ai = $u-1#19[$u-1#28];

        i = ai cmpl 0.0F;

        if i <= 0 goto label3;

        sa = $u-1#19[$u-1#28];

        sa = $u-1#21 / sa;

        $u-1#21 = $u-1#19[$u-1#28];

        $u-1#23 = $u-1#23 / $u-1#21;

     label3:
        i#37 = 0;

     label4:
        if i#37 >= $u-1#28 goto label5;

        $u-1#21 = $u-1#17[i#37];

        $u-1#21 = $u-1#21 * sa;

        ai = $u-1#19[i#37];

        ai = ai * $u-1#23;

        $u-1#21 = $u-1#21 + ai;

        $u-1#19[i#37] = $u-1#21;

        i#37 = i#37 + 1;

        goto label4;

     label5:
        $u-1#7 = virtualinvoke $u10.<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>();

        $u9 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>($u-1#19, $u-1#7);

        return $u9;

     label6:
        s = new java.lang.IllegalArgumentException;

        src = new java.lang.StringBuilder;

        specialinvoke src.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke src.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Color models must match (");

        $u-1 = virtualinvoke $u9.<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>();

        virtualinvoke src.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1);

        virtualinvoke src.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs. ");

        $u-1 = virtualinvoke $u10.<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>();

        virtualinvoke src.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u-1);

        virtualinvoke src.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $u-1#56 = virtualinvoke src.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke s.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($u-1#56);

        goto label7;

     label7:
        throw s;
    }

    private static int compositeComponent(int, int, int, int, int)
    {
        int $u3, $u4, $u5, $u6, $u7;

        $u3 := @parameter0: int;

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: int;

        $u7 := @parameter4: int;

        if $u7 != 0 goto label1;

        return 0;

     label1:
        $u3 = $u3 * 255;

        $u3 = $u3 * $u4;

        $u5 = $u5 * $u6;

        $u4 = 255 - $u4;

        $u4 = $u5 * $u4;

        $u3 = $u3 + $u4;

        $u4 = $u7 * 255;

        $u3 = $u3 / $u4;

        return $u3;
    }

    private static float constrain(float, float, float)
    {
        float $u1, $u2, $u3;
        byte $u0;

        $u1 := @parameter0: float;

        $u2 := @parameter1: float;

        $u3 := @parameter2: float;

        $u0 = $u1 cmpg $u2;

        if $u0 >= 0 goto label1;

        return $u2;

     label1:
        $u0 = $u1 cmpl $u3;

        if $u0 <= 0 goto label2;

        return $u3;

     label2:
        return $u1;
    }

    private static int constrain(int, int, int)
    {
        int $u1, $u2, $u3;

        $u1 := @parameter0: int;

        $u2 := @parameter1: int;

        $u3 := @parameter2: int;

        if $u1 >= $u2 goto label1;

        return $u2;

     label1:
        if $u1 <= $u3 goto label2;

        return $u3;

     label2:
        return $u1;
    }

    public static double distanceEuclidean(double[], double[])
    {
        double[] $u9, $u10;
        double $u1, $u3, $u7;

        $u9 := @parameter0: double[];

        $u10 := @parameter1: double[];

        $u1 = $u9[0];

        $u3 = $u10[0];

        $u1 = $u1 - $u3;

        $u1 = staticinvoke <java.lang.Math: double pow(double,double)>($u1, 2.0);

        $u3 = $u9[1];

        $u7 = $u10[1];

        $u3 = $u3 - $u7;

        $u3 = staticinvoke <java.lang.Math: double pow(double,double)>($u3, 2.0);

        $u1 = $u1 + $u3;

        $u3 = $u9[2];

        $u7 = $u10[2];

        $u3 = $u3 - $u7;

        $u3 = staticinvoke <java.lang.Math: double pow(double,double)>($u3, 2.0);

        $u1 = $u1 + $u3;

        $u1 = staticinvoke <java.lang.Math: double sqrt(double)>($u1);

        return $u1;
    }

    private static double[] getTempDouble3Array()
    {
        java.lang.Object $u-1;
        java.lang.ThreadLocal result;
        double[] result#3;

        result = <androidx.core.graphics.ColorUtils: java.lang.ThreadLocal TEMP_ARRAY>;

        $u-1 = virtualinvoke result.<java.lang.ThreadLocal: java.lang.Object get()>();

        result#3 = (double[]) $u-1;

        if result#3 != null goto label1;

        result#3 = newarray (double)[3];

        result = <androidx.core.graphics.ColorUtils: java.lang.ThreadLocal TEMP_ARRAY>;

        virtualinvoke result.<java.lang.ThreadLocal: void set(java.lang.Object)>(result#3);

     label1:
        return result#3;
    }

    private static double pivotXyzComponent(double)
    {
        double $u4;
        byte $u2;

        $u4 := @parameter0: double;

        $u2 = $u4 cmpl 0.008856;

        if $u2 <= 0 goto label1;

        $u4 = staticinvoke <java.lang.Math: double pow(double,double)>($u4, 0.3333333333333333);

        return $u4;

     label1:
        $u4 = 903.3 * $u4;

        $u4 = $u4 + 16.0;

        $u4 = $u4 / 116.0;

        return $u4;
    }

    public static int setAlphaComponent(int, int)
    {
        int $u2, $u3;
        java.lang.IllegalArgumentException $u0;

        $u2 := @parameter0: int;

        $u3 := @parameter1: int;

        if $u3 < 0 goto label1;

        if $u3 > 255 goto label1;

        $u2 = 16777215 & $u2;

        $u3 = $u3 << 24;

        $u2 = $u2 | $u3;

        return $u2;

     label1:
        $u0 = new java.lang.IllegalArgumentException;

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("alpha must be between 0 and 255.");

        throw $u0;
    }
}
