public final class androidx.core.os.HandlerCompat extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        androidx.core.os.HandlerCompat this;

        this := @this: androidx.core.os.HandlerCompat;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.os.Handler createAsync(android.os.Looper)
    {
        android.os.Looper $u7;
        int e;
        android.os.Handler $u-1;
        java.lang.Class e#7, $u3;
        java.lang.Class[] $u2;
        java.lang.reflect.Constructor $u-1#13;
        java.lang.Object[] cause;
        java.lang.Boolean $u-1#17;
        java.lang.Object $u-1#19;
        java.lang.reflect.InvocationTargetException e#22;
        java.lang.Throwable $u-1#23;
        boolean $u2#25;
        java.lang.Error $u2#28;
        java.lang.RuntimeException $u2#29;
        java.lang.NoSuchMethodException e#32;
        java.lang.InstantiationException e#33;
        java.lang.IllegalAccessException e#34;

        $u7 := @parameter0: android.os.Looper;

        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 28 goto label01;

        $u-1 = staticinvoke <android.os.Handler: android.os.Handler createAsync(android.os.Looper)>($u7);

        return $u-1;

     label01:
        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 16 goto label15;

        e#7 = class "Landroid/os/Handler;";

        $u2 = newarray (java.lang.Class)[3];

        $u2[0] = class "Landroid/os/Looper;";

        $u2[1] = class "Landroid/os/Handler$Callback;";

        $u3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $u2[2] = $u3;

     label02:
        $u-1#13 = virtualinvoke e#7.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($u2);

     label03:
        cause = newarray (java.lang.Object)[3];

        cause[0] = $u7;

        cause[1] = null;

     label04:
        $u-1#17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

     label05:
        cause[2] = $u-1#17;

     label06:
        $u-1#19 = virtualinvoke $u-1#13.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(cause);

     label07:
        $u-1 = (android.os.Handler) $u-1#19;

        return $u-1;

     label08:
        e#22 := @caughtexception;

        $u-1#23 = virtualinvoke e#22.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $u2#25 = $u-1#23 instanceof java.lang.RuntimeException;

        if $u2#25 != 0 goto label10;

        $u2#25 = $u-1#23 instanceof java.lang.Error;

        if $u2#25 == 0 goto label09;

        $u2#28 = (java.lang.Error) $u-1#23;

        throw $u2#28;

     label09:
        $u2#29 = new java.lang.RuntimeException;

        specialinvoke $u2#29.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($u-1#23);

        throw $u2#29;

     label10:
        $u2#29 = (java.lang.RuntimeException) $u-1#23;

        throw $u2#29;

     label11:
        e#32 := @caughtexception;

        goto label14;

     label12:
        e#33 := @caughtexception;

        goto label14;

     label13:
        e#34 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("HandlerCompat", "Unable to invoke Handler(Looper, Callback, boolean) constructor");

     label15:
        $u-1 = new android.os.Handler;

        specialinvoke $u-1.<android.os.Handler: void <init>(android.os.Looper)>($u7);

        return $u-1;

        catch java.lang.IllegalAccessException from label02 to label03 with label13;
        catch java.lang.IllegalAccessException from label04 to label05 with label13;
        catch java.lang.IllegalAccessException from label06 to label07 with label13;
        catch java.lang.InstantiationException from label02 to label03 with label12;
        catch java.lang.InstantiationException from label04 to label05 with label12;
        catch java.lang.InstantiationException from label06 to label07 with label12;
        catch java.lang.NoSuchMethodException from label02 to label03 with label11;
        catch java.lang.NoSuchMethodException from label04 to label05 with label11;
        catch java.lang.NoSuchMethodException from label06 to label07 with label11;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label08;
    }

    public static android.os.Handler createAsync(android.os.Looper, android.os.Handler$Callback)
    {
        android.os.Looper $u7;
        android.os.Handler$Callback $u8;
        int e;
        android.os.Handler $u-1;
        java.lang.Class e#7, $u3;
        java.lang.Class[] $u2;
        java.lang.reflect.Constructor $u-1#13;
        java.lang.Object[] cause;
        java.lang.Boolean $u-1#16;
        java.lang.Object $u-1#18;
        java.lang.reflect.InvocationTargetException e#21;
        java.lang.Throwable $u-1#22;
        boolean $u2#24;
        java.lang.Error $u2#27;
        java.lang.RuntimeException $u2#28;
        java.lang.NoSuchMethodException e#31;
        java.lang.InstantiationException e#32;
        java.lang.IllegalAccessException e#33;

        $u7 := @parameter0: android.os.Looper;

        $u8 := @parameter1: android.os.Handler$Callback;

        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 28 goto label01;

        $u-1 = staticinvoke <android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>($u7, $u8);

        return $u-1;

     label01:
        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 16 goto label15;

        e#7 = class "Landroid/os/Handler;";

        $u2 = newarray (java.lang.Class)[3];

        $u2[0] = class "Landroid/os/Looper;";

        $u2[1] = class "Landroid/os/Handler$Callback;";

        $u3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $u2[2] = $u3;

     label02:
        $u-1#13 = virtualinvoke e#7.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($u2);

     label03:
        cause = newarray (java.lang.Object)[3];

        cause[0] = $u7;

        cause[1] = $u8;

     label04:
        $u-1#16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

     label05:
        cause[2] = $u-1#16;

     label06:
        $u-1#18 = virtualinvoke $u-1#13.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(cause);

     label07:
        $u-1 = (android.os.Handler) $u-1#18;

        return $u-1;

     label08:
        e#21 := @caughtexception;

        $u-1#22 = virtualinvoke e#21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $u2#24 = $u-1#22 instanceof java.lang.RuntimeException;

        if $u2#24 != 0 goto label10;

        $u2#24 = $u-1#22 instanceof java.lang.Error;

        if $u2#24 == 0 goto label09;

        $u2#27 = (java.lang.Error) $u-1#22;

        throw $u2#27;

     label09:
        $u2#28 = new java.lang.RuntimeException;

        specialinvoke $u2#28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($u-1#22);

        throw $u2#28;

     label10:
        $u2#28 = (java.lang.RuntimeException) $u-1#22;

        throw $u2#28;

     label11:
        e#31 := @caughtexception;

        goto label14;

     label12:
        e#32 := @caughtexception;

        goto label14;

     label13:
        e#33 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("HandlerCompat", "Unable to invoke Handler(Looper, Callback, boolean) constructor");

     label15:
        $u-1 = new android.os.Handler;

        specialinvoke $u-1.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($u7, $u8);

        return $u-1;

        catch java.lang.IllegalAccessException from label02 to label03 with label13;
        catch java.lang.IllegalAccessException from label04 to label05 with label13;
        catch java.lang.IllegalAccessException from label06 to label07 with label13;
        catch java.lang.InstantiationException from label02 to label03 with label12;
        catch java.lang.InstantiationException from label04 to label05 with label12;
        catch java.lang.InstantiationException from label06 to label07 with label12;
        catch java.lang.NoSuchMethodException from label02 to label03 with label11;
        catch java.lang.NoSuchMethodException from label04 to label05 with label11;
        catch java.lang.NoSuchMethodException from label06 to label07 with label11;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label08;
    }

    public static boolean postDelayed(android.os.Handler, java.lang.Runnable, java.lang.Object, long)
    {
        android.os.Handler $u2;
        java.lang.Runnable $u3;
        java.lang.Object $u4;
        long $u5;
        int message;
        boolean $u-1;
        android.os.Message $u-1#5;

        $u2 := @parameter0: android.os.Handler;

        $u3 := @parameter1: java.lang.Runnable;

        $u4 := @parameter2: java.lang.Object;

        $u5 := @parameter3: long;

        message = <android.os.Build$VERSION: int SDK_INT>;

        if message < 28 goto label1;

        $u-1 = virtualinvoke $u2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>($u3, $u4, $u5);

        return $u-1;

     label1:
        $u-1#5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($u2, $u3);

        $u-1#5.<android.os.Message: java.lang.Object obj> = $u4;

        $u-1 = virtualinvoke $u2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($u-1#5, $u5);

        return $u-1;
    }

    public static void <clinit>()
    {
        <androidx.core.os.HandlerCompat: java.lang.String TAG> = "HandlerCompat";

        return;
    }
}
