public class androidx.arch.core.executor.ArchTaskExecutor extends androidx.arch.core.executor.TaskExecutor
{
    private static final java.util.concurrent.Executor sIOThreadExecutor;
    private static volatile androidx.arch.core.executor.ArchTaskExecutor sInstance;
    private static final java.util.concurrent.Executor sMainThreadExecutor;
    private androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor;
    private androidx.arch.core.executor.TaskExecutor mDelegate;

    static void <clinit>()
    {
        androidx.arch.core.executor.ArchTaskExecutor$1 $u0;
        androidx.arch.core.executor.ArchTaskExecutor$2 $u0#2;

        $u0 = new androidx.arch.core.executor.ArchTaskExecutor$1;

        specialinvoke $u0.<androidx.arch.core.executor.ArchTaskExecutor$1: void <init>()>();

        <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor> = $u0;

        $u0#2 = new androidx.arch.core.executor.ArchTaskExecutor$2;

        specialinvoke $u0#2.<androidx.arch.core.executor.ArchTaskExecutor$2: void <init>()>();

        <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor> = $u0#2;

        return;
    }

    private void <init>()
    {
        androidx.arch.core.executor.ArchTaskExecutor this;
        androidx.arch.core.executor.DefaultTaskExecutor $u0;

        this := @this: androidx.arch.core.executor.ArchTaskExecutor;

        specialinvoke this.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        $u0 = new androidx.arch.core.executor.DefaultTaskExecutor;

        specialinvoke $u0.<androidx.arch.core.executor.DefaultTaskExecutor: void <init>()>();

        this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor> = $u0;

        this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate> = $u0;

        return;
    }

    public static java.util.concurrent.Executor getIOThreadExecutor()
    {
        java.util.concurrent.Executor ret0;

        ret0 = <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor>;

        return ret0;
    }

    public static androidx.arch.core.executor.ArchTaskExecutor getInstance()
    {
        androidx.arch.core.executor.ArchTaskExecutor $u0;
        java.lang.Throwable $u1;

        $u0 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        if $u0 == null goto label1;

        $u0 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        return $u0;

     label1:
        entermonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label2:
        $u0 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        if $u0 != null goto label3;

        $u0 = new androidx.arch.core.executor.ArchTaskExecutor;

        specialinvoke $u0.<androidx.arch.core.executor.ArchTaskExecutor: void <init>()>();

        <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance> = $u0;

     label3:
        exitmonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label4:
        $u0 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance>;

        return $u0;

     label5:
        $u1 := @caughtexception;

     label6:
        exitmonitor class "Landroidx/arch/core/executor/ArchTaskExecutor;";

     label7:
        throw $u1;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static java.util.concurrent.Executor getMainThreadExecutor()
    {
        java.util.concurrent.Executor ret0;

        ret0 = <androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor>;

        return ret0;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor this;
        java.lang.Runnable $u2;
        androidx.arch.core.executor.TaskExecutor $u0;

        this := @this: androidx.arch.core.executor.ArchTaskExecutor;

        $u2 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        virtualinvoke $u0.<androidx.arch.core.executor.TaskExecutor: void executeOnDiskIO(java.lang.Runnable)>($u2);

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.ArchTaskExecutor this;
        boolean $u-1;
        androidx.arch.core.executor.TaskExecutor $u0;

        this := @this: androidx.arch.core.executor.ArchTaskExecutor;

        $u0 = this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        $u-1 = virtualinvoke $u0.<androidx.arch.core.executor.TaskExecutor: boolean isMainThread()>();

        return $u-1;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.ArchTaskExecutor this;
        java.lang.Runnable $u2;
        androidx.arch.core.executor.TaskExecutor $u0;

        this := @this: androidx.arch.core.executor.ArchTaskExecutor;

        $u2 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate>;

        virtualinvoke $u0.<androidx.arch.core.executor.TaskExecutor: void postToMainThread(java.lang.Runnable)>($u2);

        return;
    }

    public void setDelegate(androidx.arch.core.executor.TaskExecutor)
    {
        androidx.arch.core.executor.ArchTaskExecutor this;
        androidx.arch.core.executor.TaskExecutor $u2;

        this := @this: androidx.arch.core.executor.ArchTaskExecutor;

        $u2 := @parameter0: androidx.arch.core.executor.TaskExecutor;

        if $u2 != null goto label1;

        $u2 = this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor>;

        goto label1;

     label1:
        this.<androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate> = $u2;

        return;
    }
}
