final class androidx.core.content.res.GrowingArrayUtils extends java.lang.Object
{

    private void <init>()
    {
        androidx.core.content.res.GrowingArrayUtils this;

        this := @this: androidx.core.content.res.GrowingArrayUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static int[] append(int[], int, int)
    {
        int $u3, $u4, $u-1, $u1;
        int[] $u2, newArray;

        $u2 := @parameter0: int[];

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u-1 = $u3 + 1;

        $u1 = lengthof $u2;

        if $u-1 <= $u1 goto label1;

        $u-1 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u3);

        newArray = newarray (int)[$u-1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u2, 0, newArray, 0, $u3);

        $u2 = newArray;

     label1:
        $u2[$u3] = $u4;

        return $u2;
    }

    public static long[] append(long[], int, long)
    {
        int $u3, $u-1, $u1;
        long $u4;
        long[] $u2, newArray;

        $u2 := @parameter0: long[];

        $u3 := @parameter1: int;

        $u4 := @parameter2: long;

        $u-1 = $u3 + 1;

        $u1 = lengthof $u2;

        if $u-1 <= $u1 goto label1;

        $u-1 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u3);

        newArray = newarray (long)[$u-1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u2, 0, newArray, 0, $u3);

        $u2 = newArray;

     label1:
        $u2[$u3] = $u4;

        return $u2;
    }

    public static java.lang.Object[] append(java.lang.Object[], int, java.lang.Object)
    {
        int $u3, newArray, $u1;
        java.lang.Object element, $u-1#10;
        java.lang.Object[] array, newArray#12;
        java.lang.Class $u-1;

        array := @parameter0: java.lang.Object[];

        $u3 := @parameter1: int;

        element := @parameter2: java.lang.Object;

        newArray = $u3 + 1;

        $u1 = lengthof array;

        if newArray <= $u1 goto label1;

        $u-1 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $u-1 = virtualinvoke $u-1.<java.lang.Class: java.lang.Class getComponentType()>();

        newArray = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u3);

        $u-1#10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($u-1, newArray);

        newArray#12 = (java.lang.Object[]) $u-1#10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, newArray#12, 0, $u3);

        array = newArray#12;

     label1:
        array[$u3] = element;

        return array;
    }

    public static boolean[] append(boolean[], int, boolean)
    {
        int $u3, $u-1, $u1;
        boolean $u4;
        boolean[] $u2, newArray;

        $u2 := @parameter0: boolean[];

        $u3 := @parameter1: int;

        $u4 := @parameter2: boolean;

        $u-1 = $u3 + 1;

        $u1 = lengthof $u2;

        if $u-1 <= $u1 goto label1;

        $u-1 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u3);

        newArray = newarray (boolean)[$u-1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u2, 0, newArray, 0, $u3);

        $u2 = newArray;

     label1:
        $u2[$u3] = $u4;

        return $u2;
    }

    public static int growSize(int)
    {
        int $u1;

        $u1 := @parameter0: int;

        if $u1 > 4 goto label1;

        return 8;

     label1:
        $u1 = $u1 * 2;

        return $u1;
    }

    public static int[] insert(int[], int, int, int)
    {
        int[] $u3, newArray#6;
        int $u4, $u5, $u6, newArray, $u1;

        $u3 := @parameter0: int[];

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: int;

        newArray = $u4 + 1;

        $u1 = lengthof $u3;

        if newArray > $u1 goto label1;

        newArray = $u5 + 1;

        $u4 = $u4 - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, $u3, newArray, $u4);

        $u3[$u5] = $u6;

        return $u3;

     label1:
        $u4 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u4);

        newArray#6 = newarray (int)[$u4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, 0, newArray#6, 0, $u5);

        newArray#6[$u5] = $u6;

        $u4 = $u5 + 1;

        $u6 = lengthof $u3;

        $u6 = $u6 - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, newArray#6, $u4, $u6);

        return newArray#6;
    }

    public static long[] insert(long[], int, int, long)
    {
        long[] $u3, newArray#6;
        int $u4, $u5, newArray, $u1;
        long $u6;

        $u3 := @parameter0: long[];

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: long;

        newArray = $u4 + 1;

        $u1 = lengthof $u3;

        if newArray > $u1 goto label1;

        newArray = $u5 + 1;

        $u4 = $u4 - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, $u3, newArray, $u4);

        $u3[$u5] = $u6;

        return $u3;

     label1:
        $u4 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u4);

        newArray#6 = newarray (long)[$u4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, 0, newArray#6, 0, $u5);

        newArray#6[$u5] = $u6;

        $u4 = $u5 + 1;

        newArray = lengthof $u3;

        newArray = newArray - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, newArray#6, $u4, newArray);

        return newArray#6;
    }

    public static java.lang.Object[] insert(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] array, newArray#13;
        int $u4, $u5, newArray, $u1;
        java.lang.Object element, $u-1#11;
        java.lang.Class $u-1;

        array := @parameter0: java.lang.Object[];

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        element := @parameter3: java.lang.Object;

        newArray = $u4 + 1;

        $u1 = lengthof array;

        if newArray > $u1 goto label1;

        newArray = $u5 + 1;

        $u4 = $u4 - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, $u5, array, newArray, $u4);

        array[$u5] = element;

        return array;

     label1:
        $u-1 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $u-1 = virtualinvoke $u-1.<java.lang.Class: java.lang.Class getComponentType()>();

        $u4 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u4);

        $u-1#11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($u-1, $u4);

        newArray#13 = (java.lang.Object[]) $u-1#11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, newArray#13, 0, $u5);

        newArray#13[$u5] = element;

        $u4 = $u5 + 1;

        newArray = lengthof array;

        newArray = newArray - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, $u5, newArray#13, $u4, newArray);

        return newArray#13;
    }

    public static boolean[] insert(boolean[], int, int, boolean)
    {
        boolean[] $u3, newArray#6;
        int $u4, $u5, newArray, $u1;
        boolean $u6;

        $u3 := @parameter0: boolean[];

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: boolean;

        newArray = $u4 + 1;

        $u1 = lengthof $u3;

        if newArray > $u1 goto label1;

        newArray = $u5 + 1;

        $u4 = $u4 - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, $u3, newArray, $u4);

        $u3[$u5] = $u6;

        return $u3;

     label1:
        $u4 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($u4);

        newArray#6 = newarray (boolean)[$u4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, 0, newArray#6, 0, $u5);

        newArray#6[$u5] = $u6;

        $u4 = $u5 + 1;

        newArray = lengthof $u3;

        newArray = newArray - $u5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($u3, $u5, newArray#6, $u4, newArray);

        return newArray#6;
    }
}
