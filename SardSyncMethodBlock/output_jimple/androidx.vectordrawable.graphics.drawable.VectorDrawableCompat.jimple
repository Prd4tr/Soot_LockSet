public class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat extends androidx.vectordrawable.graphics.drawable.VectorDrawableCommon
{
    private static final boolean DBG_VECTOR_DRAWABLE;
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private static final int LINECAP_BUTT;
    private static final int LINECAP_ROUND;
    private static final int LINECAP_SQUARE;
    private static final int LINEJOIN_BEVEL;
    private static final int LINEJOIN_MITER;
    private static final int LINEJOIN_ROUND;
    static final java.lang.String LOGTAG;
    private static final int MAX_CACHED_BITMAP_SIZE;
    private static final java.lang.String SHAPE_CLIP_PATH;
    private static final java.lang.String SHAPE_GROUP;
    private static final java.lang.String SHAPE_PATH;
    private static final java.lang.String SHAPE_VECTOR;
    private boolean mAllowCaching;
    private android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate;
    private android.graphics.ColorFilter mColorFilter;
    private boolean mMutated;
    private android.graphics.PorterDuffColorFilter mTintFilter;
    private final android.graphics.Rect mTmpBounds;
    private final float[] mTmpFloats;
    private final android.graphics.Matrix mTmpMatrix;
    private androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState;

    static void <clinit>()
    {
        android.graphics.PorterDuff$Mode $u0;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_VECTOR> = "vector";

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_PATH> = "path";

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_GROUP> = "group";

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String SHAPE_CLIP_PATH> = "clip-path";

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int MAX_CACHED_BITMAP_SIZE> = 2048;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: java.lang.String LOGTAG> = "VectorDrawableCompat";

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_ROUND> = 1;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_MITER> = 0;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINEJOIN_BEVEL> = 2;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_SQUARE> = 2;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_ROUND> = 1;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int LINECAP_BUTT> = 0;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean DBG_VECTOR_DRAWABLE> = 0;

        $u0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE> = $u0;

        return;
    }

    void <init>()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        float[] $u0;
        android.graphics.Matrix $u0#4;
        android.graphics.Rect $u0#5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#6;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $u0 = newarray (float)[9];

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $u0;

        $u0#4 = new android.graphics.Matrix;

        specialinvoke $u0#4.<android.graphics.Matrix: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $u0#4;

        $u0#5 = new android.graphics.Rect;

        specialinvoke $u0#5.<android.graphics.Rect: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $u0#5;

        $u0#6 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke $u0#6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $u0#6;

        return;
    }

    void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u4;
        android.content.res.ColorStateList $u1;
        android.graphics.PorterDuff$Mode $u2;
        android.graphics.PorterDuffColorFilter $u-1;
        float[] $u0;
        android.graphics.Matrix $u0#4;
        android.graphics.Rect $u0#5;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u4 := @parameter0: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = 1;

        $u0 = newarray (float)[9];

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats> = $u0;

        $u0#4 = new android.graphics.Matrix;

        specialinvoke $u0#4.<android.graphics.Matrix: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix> = $u0#4;

        $u0#5 = new android.graphics.Rect;

        specialinvoke $u0#5.<android.graphics.Rect: void <init>()>();

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds> = $u0#5;

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $u4;

        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $u1 = $u4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $u2 = $u4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $u-1 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($u-1, $u1, $u2);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $u-1;

        return;
    }

    static int applyAlpha(int, float)
    {
        float $u3, $u1;
        int $u-1, $u2;

        $u2 := @parameter0: int;

        $u3 := @parameter1: float;

        $u-1 = staticinvoke <android.graphics.Color: int alpha(int)>($u2);

        $u2 = $u2 & 16777215;

        $u1 = (float) $u-1;

        $u3 = $u1 * $u3;

        $u-1 = (int) $u3;

        $u-1 = $u-1 << 24;

        $u2 = $u2 | $u-1;

        return $u2;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources, int, android.content.res.Resources$Theme)
    {
        android.content.res.Resources $u7;
        int $u8, parser;
        android.content.res.Resources$Theme $u9;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat drawable;
        android.graphics.drawable.Drawable $u-1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $u1;
        android.graphics.drawable.Drawable$ConstantState $u-1#10;
        android.content.res.XmlResourceParser $u-1#12;
        android.util.AttributeSet $u-1#14;
        org.xmlpull.v1.XmlPullParserException $u4;
        java.io.IOException parser#24;

        $u7 := @parameter0: android.content.res.Resources;

        $u8 := @parameter1: int;

        $u9 := @parameter2: android.content.res.Resources$Theme;

        parser = <android.os.Build$VERSION: int SDK_INT>;

        if parser < 24 goto label01;

        drawable = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>();

        $u-1 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>($u7, $u8, $u9);

        drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable> = $u-1;

        $u1 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $u-1 = drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1#10 = virtualinvoke $u-1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $u1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($u-1#10);

        drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate> = $u1;

        return drawable;

     label01:
        $u-1#12 = virtualinvoke $u7.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($u8);

        $u-1#14 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($u-1#12);

     label02:
        $u8 = interfaceinvoke $u-1#12.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if $u8 == 2 goto label04;

        if $u8 == 1 goto label04;

        goto label02;

     label04:
        if $u8 != 2 goto label07;

     label05:
        drawable = staticinvoke <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($u7, $u-1#12, $u-1#14, $u9);

     label06:
        return drawable;

     label07:
        $u4 = new org.xmlpull.v1.XmlPullParserException;

     label08:
        specialinvoke $u4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

     label09:
        throw $u4;

     label10:
        parser#24 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", parser#24);

        goto label12;

     label11:
        $u4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("VectorDrawableCompat", "parser error", $u4);

     label12:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label03 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label10 with label11;
        catch java.io.IOException from label01 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public static androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources $u1;
        org.xmlpull.v1.XmlPullParser $u2;
        android.util.AttributeSet $u3;
        android.content.res.Resources$Theme $u4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat drawable;

        $u1 := @parameter0: android.content.res.Resources;

        $u2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $u3 := @parameter2: android.util.AttributeSet;

        $u4 := @parameter3: android.content.res.Resources$Theme;

        drawable = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void <init>()>();

        virtualinvoke drawable.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($u1, $u2, $u3, $u4);

        return drawable;
    }

    private void inflateInternal(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.Resources $u17;
        org.xmlpull.v1.XmlPullParser $u18;
        android.util.AttributeSet $u19;
        android.content.res.Resources$Theme $u20;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer pathRenderer;
        java.util.ArrayDeque groupStack;
        boolean noPathTag, $u-1#20;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup eventType, path#47;
        int $u-1, eventType#4, $u-1#9;
        java.lang.String path1, $u-1#14, $u15;
        java.lang.Object $u-1#16;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath path1#22;
        java.util.ArrayList $u15#23;
        androidx.collection.ArrayMap $u15#26;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath path;
        org.xmlpull.v1.XmlPullParserException path#62;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u17 := @parameter0: android.content.res.Resources;

        $u18 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $u19 := @parameter2: android.util.AttributeSet;

        $u20 := @parameter3: android.content.res.Resources$Theme;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        pathRenderer = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        noPathTag = 1;

        groupStack = new java.util.ArrayDeque;

        specialinvoke groupStack.<java.util.ArrayDeque: void <init>()>();

        eventType = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup>;

        virtualinvoke groupStack.<java.util.ArrayDeque: void push(java.lang.Object)>(eventType);

        eventType#4 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        $u-1 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $u-1 = $u-1 + 1;

     label01:
        if eventType#4 == 1 goto label11;

        $u-1#9 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $u-1#9 >= $u-1 goto label02;

        if eventType#4 == 3 goto label11;

     label02:
        path1 = "group";

        if eventType#4 != 2 goto label09;

        $u-1#14 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $u-1#16 = virtualinvoke groupStack.<java.util.ArrayDeque: java.lang.Object peek()>();

        eventType = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) $u-1#16;

        $u15 = "path";

        $u-1#20 = virtualinvoke $u15.<java.lang.String: boolean equals(java.lang.Object)>($u-1#14);

        if $u-1#20 == 0 goto label04;

        path1#22 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath;

        specialinvoke path1#22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void <init>()>();

        virtualinvoke path1#22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($u17, $u19, $u20, $u18);

        $u15#23 = eventType.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $u15#23.<java.util.ArrayList: boolean add(java.lang.Object)>(path1#22);

        path1 = virtualinvoke path1#22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        if path1 == null goto label03;

        $u15#26 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        path1 = virtualinvoke path1#22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: java.lang.String getPathName()>();

        virtualinvoke $u15#26.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(path1, path1#22);

     label03:
        noPathTag = 0;

        eventType#4 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $u-1#9 = path1#22.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int mChangingConfigurations>;

        eventType#4 = eventType#4 | $u-1#9;

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = eventType#4;

        goto label08;

     label04:
        $u15 = "clip-path";

        $u-1#20 = virtualinvoke $u15.<java.lang.String: boolean equals(java.lang.Object)>($u-1#14);

        if $u-1#20 == 0 goto label06;

        path = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath;

        specialinvoke path.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void <init>()>();

        virtualinvoke path.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($u17, $u19, $u20, $u18);

        $u15#23 = eventType.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $u15#23.<java.util.ArrayList: boolean add(java.lang.Object)>(path);

        path1 = virtualinvoke path.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        if path1 == null goto label05;

        $u15#26 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        path1 = virtualinvoke path.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: java.lang.String getPathName()>();

        virtualinvoke $u15#26.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(path1, path);

     label05:
        eventType#4 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $u-1#9 = path.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath: int mChangingConfigurations>;

        eventType#4 = eventType#4 | $u-1#9;

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = eventType#4;

        goto label08;

     label06:
        $u-1#20 = virtualinvoke path1.<java.lang.String: boolean equals(java.lang.Object)>($u-1#14);

        if $u-1#20 == 0 goto label08;

        path#47 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        specialinvoke path#47.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void <init>()>();

        virtualinvoke path#47.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser)>($u17, $u19, $u20, $u18);

        $u15#23 = eventType.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        virtualinvoke $u15#23.<java.util.ArrayList: boolean add(java.lang.Object)>(path#47);

        virtualinvoke groupStack.<java.util.ArrayDeque: void push(java.lang.Object)>(path#47);

        path1 = virtualinvoke path#47.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        if path1 == null goto label07;

        $u15#26 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        path1 = virtualinvoke path#47.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        virtualinvoke $u15#26.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(path1, path#47);

     label07:
        eventType#4 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations>;

        $u-1#9 = path#47.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: int mChangingConfigurations>;

        eventType#4 = eventType#4 | $u-1#9;

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = eventType#4;

        goto label08;

     label08:
        goto label10;

     label09:
        if eventType#4 != 3 goto label08;

        $u-1#14 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $u-1#20 = virtualinvoke path1.<java.lang.String: boolean equals(java.lang.Object)>($u-1#14);

        if $u-1#20 == 0 goto label10;

        virtualinvoke groupStack.<java.util.ArrayDeque: java.lang.Object pop()>();

     label10:
        eventType#4 = interfaceinvoke $u18.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label11:
        if noPathTag != 0 goto label12;

        return;

     label12:
        path#62 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke path#62.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("no path defined");

        goto label13;

     label13:
        throw path#62;
    }

    private boolean needMirroring()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u0;
        boolean $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        $u-1 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean isAutoMirrored()>();

        if $u-1 == 0 goto label1;

        $u0 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(this);

        if $u0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static android.graphics.PorterDuff$Mode parseTintModeCompat(int, android.graphics.PorterDuff$Mode)
    {
        int $u1;
        android.graphics.PorterDuff$Mode $u2;

        $u1 := @parameter0: int;

        $u2 := @parameter1: android.graphics.PorterDuff$Mode;

        if $u1 == 3 goto label7;

        if $u1 == 5 goto label6;

        if $u1 == 9 goto label5;

        lookupswitch($u1)
        {
            case 14: goto label4;
            case 15: goto label3;
            case 16: goto label2;
            default: goto label1;
        };

     label1:
        return $u2;

     label2:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>;

        return $u2;

     label3:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>;

        return $u2;

     label4:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>;

        return $u2;

     label5:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        return $u2;

     label6:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        return $u2;

     label7:
        $u2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        return $u2;
    }

    private void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup, int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup $u6, $u3#33;
        int $u7, i, $u-1#25;
        java.lang.String indent, $u-1;
        java.lang.StringBuilder child;
        float child#11;
        android.graphics.Matrix $u-1#17;
        java.util.ArrayList child#24;
        java.lang.Object $u-1#28;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject child#30;
        boolean $u3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath $u3#36;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u6 := @parameter0: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        $u7 := @parameter1: int;

        indent = "";

        i = 0;

     label1:
        if i >= $u7 goto label2;

        child = new java.lang.StringBuilder;

        specialinvoke child.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        indent = virtualinvoke child.<java.lang.StringBuilder: java.lang.String toString()>();

        i = i + 1;

        goto label1;

     label2:
        child = new java.lang.StringBuilder;

        specialinvoke child.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current group is :");

        $u-1 = virtualinvoke $u6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()>();

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rotation is ");

        child#11 = $u6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float mRotate>;

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(child#11);

        $u-1 = virtualinvoke child.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", $u-1);

        child = new java.lang.StringBuilder;

        specialinvoke child.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matrix is :");

        $u-1#17 = virtualinvoke $u6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()>();

        indent = virtualinvoke $u-1#17.<android.graphics.Matrix: java.lang.String toString()>();

        virtualinvoke child.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(indent);

        indent = virtualinvoke child.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("VectorDrawableCompat", indent);

        i = 0;

     label3:
        child#24 = $u6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $u-1#25 = virtualinvoke child#24.<java.util.ArrayList: int size()>();

        if i >= $u-1#25 goto label6;

        child#24 = $u6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.util.ArrayList mChildren>;

        $u-1#28 = virtualinvoke child#24.<java.util.ArrayList: java.lang.Object get(int)>(i);

        child#30 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject) $u-1#28;

        $u3 = child#30 instanceof androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup;

        if $u3 == 0 goto label4;

        $u3#33 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup) child#30;

        $u-1#25 = $u7 + 1;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,int)>($u3#33, $u-1#25);

        goto label5;

     label4:
        $u3#36 = (androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath) child#30;

        $u-1#25 = $u7 + 1;

        virtualinvoke $u3#36.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void printVPath(int)>($u-1#25);

     label5:
        i = i + 1;

        goto label3;

     label6:
        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.TypedArray $u8;
        org.xmlpull.v1.XmlPullParser $u9;
        android.content.res.Resources$Theme $u10;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer pathRenderer;
        int $u-1;
        android.graphics.PorterDuff$Mode tint;
        android.content.res.ColorStateList $u-1#11;
        boolean name;
        float name#19;
        byte alphaInFloat;
        java.lang.String $u-1#52;
        androidx.collection.ArrayMap $u6;
        org.xmlpull.v1.XmlPullParserException alphaInFloat#55;
        java.lang.StringBuilder name#56;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u8 := @parameter0: android.content.res.TypedArray;

        $u9 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $u10 := @parameter2: android.content.res.Resources$Theme;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        pathRenderer = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u8, $u9, "tintMode", 6, -1);

        tint = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        tint = staticinvoke <androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode)>($u-1, tint);

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = tint;

        $u-1#11 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.ColorStateList getNamedColorStateList(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int)>($u8, $u9, $u10, "tint", 1);

        if $u-1#11 == null goto label1;

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = $u-1#11;

     label1:
        name = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        name = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>($u8, $u9, "autoMirrored", 5, name);

        state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = name;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        name#19 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($u8, $u9, "viewportWidth", 7, name#19);

        pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth> = name#19;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        name#19 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($u8, $u9, "viewportHeight", 8, name#19);

        pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight> = name#19;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        alphaInFloat = name#19 cmpg 0.0F;

        if alphaInFloat <= 0 goto label5;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        alphaInFloat = name#19 cmpg 0.0F;

        if alphaInFloat <= 0 goto label4;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        name#19 = virtualinvoke $u8.<android.content.res.TypedArray: float getDimension(int,float)>(3, name#19);

        pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth> = name#19;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        name#19 = virtualinvoke $u8.<android.content.res.TypedArray: float getDimension(int,float)>(2, name#19);

        pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight> = name#19;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        alphaInFloat = name#19 cmpg 0.0F;

        if alphaInFloat <= 0 goto label3;

        name#19 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        alphaInFloat = name#19 cmpg 0.0F;

        if alphaInFloat <= 0 goto label2;

        name#19 = virtualinvoke pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()>();

        name#19 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($u8, $u9, "alpha", 4, name#19);

        virtualinvoke pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)>(name#19);

        $u-1#52 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        if $u-1#52 == null goto label6;

        pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: java.lang.String mRootName> = $u-1#52;

        $u6 = pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        virtualinvoke $u6.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u-1#52, pathRenderer);

        return;

     label2:
        alphaInFloat#55 = new org.xmlpull.v1.XmlPullParserException;

        name#56 = new java.lang.StringBuilder;

        specialinvoke name#56.<java.lang.StringBuilder: void <init>()>();

        $u-1#52 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#52);

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires height > 0");

        $u-1#52 = virtualinvoke name#56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke alphaInFloat#55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($u-1#52);

        throw alphaInFloat#55;

     label3:
        alphaInFloat#55 = new org.xmlpull.v1.XmlPullParserException;

        name#56 = new java.lang.StringBuilder;

        specialinvoke name#56.<java.lang.StringBuilder: void <init>()>();

        $u-1#52 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#52);

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires width > 0");

        $u-1#52 = virtualinvoke name#56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke alphaInFloat#55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($u-1#52);

        throw alphaInFloat#55;

     label4:
        alphaInFloat#55 = new org.xmlpull.v1.XmlPullParserException;

        name#56 = new java.lang.StringBuilder;

        specialinvoke name#56.<java.lang.StringBuilder: void <init>()>();

        $u-1#52 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#52);

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportHeight > 0");

        $u-1#52 = virtualinvoke name#56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke alphaInFloat#55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($u-1#52);

        throw alphaInFloat#55;

     label5:
        alphaInFloat#55 = new org.xmlpull.v1.XmlPullParserException;

        name#56 = new java.lang.StringBuilder;

        specialinvoke name#56.<java.lang.StringBuilder: void <init>()>();

        $u-1#52 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#52);

        virtualinvoke name#56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<vector> tag requires viewportWidth > 0");

        $u-1#52 = virtualinvoke name#56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke alphaInFloat#55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($u-1#52);

        throw alphaInFloat#55;

     label6:
        return;
    }

    public volatile void applyTheme(android.content.res.Resources$Theme)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.Resources$Theme $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void applyTheme(android.content.res.Resources$Theme)>($u1);

        return;
    }

    public boolean canApplyTheme()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean canApplyTheme(android.graphics.drawable.Drawable)>($u0);

     label1:
        return 0;
    }

    public volatile void clearColorFilter()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void clearColorFilter()>();

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.Canvas $u13;
        android.graphics.drawable.Drawable colorFilter;
        android.graphics.Rect colorFilter#3;
        int $u-1, $u-1#44, $u-1#54, needMirroring;
        android.graphics.ColorFilter colorFilter#10;
        android.graphics.Matrix canvasScaleX;
        float[] $u2;
        float canvasScaleX#16, canvasScaleY, canvasSkewX, canvasSkewY;
        byte scaledWidth;
        boolean $u-1#62;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u2#71;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u13 := @parameter0: android.graphics.Canvas;

        colorFilter = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if colorFilter == null goto label01;

        colorFilter = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke colorFilter.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($u13);

        return;

     label01:
        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void copyBounds(android.graphics.Rect)>(colorFilter#3);

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $u-1 = virtualinvoke colorFilter#3.<android.graphics.Rect: int width()>();

        if $u-1 <= 0 goto label10;

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $u-1 = virtualinvoke colorFilter#3.<android.graphics.Rect: int height()>();

        if $u-1 > 0 goto label02;

        return;

     label02:
        colorFilter#10 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        if colorFilter#10 != null goto label03;

        colorFilter#10 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

     label03:
        canvasScaleX = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        virtualinvoke $u13.<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>(canvasScaleX);

        canvasScaleX = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Matrix mTmpMatrix>;

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        virtualinvoke canvasScaleX.<android.graphics.Matrix: void getValues(float[])>($u2);

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        canvasScaleX#16 = $u2[0];

        canvasScaleX#16 = staticinvoke <java.lang.Math: float abs(float)>(canvasScaleX#16);

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        canvasScaleY = $u2[4];

        canvasScaleY = staticinvoke <java.lang.Math: float abs(float)>(canvasScaleY);

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        canvasSkewX = $u2[1];

        canvasSkewX = staticinvoke <java.lang.Math: float abs(float)>(canvasSkewX);

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: float[] mTmpFloats>;

        canvasSkewY = $u2[3];

        canvasSkewY = staticinvoke <java.lang.Math: float abs(float)>(canvasSkewY);

        scaledWidth = canvasSkewX cmpl 0.0F;

        if scaledWidth != 0 goto label04;

        scaledWidth = canvasSkewY cmpl 0.0F;

        if scaledWidth == 0 goto label05;

     label04:
        canvasScaleX#16 = 1.0F;

        canvasScaleY = 1.0F;

     label05:
        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $u-1 = virtualinvoke colorFilter#3.<android.graphics.Rect: int width()>();

        canvasSkewX = (float) $u-1;

        canvasScaleX#16 = canvasSkewX * canvasScaleX#16;

        $u-1 = (int) canvasScaleX#16;

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        $u-1#44 = virtualinvoke colorFilter#3.<android.graphics.Rect: int height()>();

        canvasScaleX#16 = (float) $u-1#44;

        canvasScaleX#16 = canvasScaleX#16 * canvasScaleY;

        $u-1#44 = (int) canvasScaleX#16;

        $u-1 = staticinvoke <java.lang.Math: int min(int,int)>(2048, $u-1);

        $u-1#44 = staticinvoke <java.lang.Math: int min(int,int)>(2048, $u-1#44);

        if $u-1 <= 0 goto label10;

        if $u-1#44 > 0 goto label06;

        return;

     label06:
        $u-1#54 = virtualinvoke $u13.<android.graphics.Canvas: int save()>();

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        needMirroring = colorFilter#3.<android.graphics.Rect: int left>;

        canvasScaleX#16 = (float) needMirroring;

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        needMirroring = colorFilter#3.<android.graphics.Rect: int top>;

        canvasScaleY = (float) needMirroring;

        virtualinvoke $u13.<android.graphics.Canvas: void translate(float,float)>(canvasScaleX#16, canvasScaleY);

        $u-1#62 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean needMirroring()>();

        if $u-1#62 == 0 goto label07;

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        needMirroring = virtualinvoke colorFilter#3.<android.graphics.Rect: int width()>();

        canvasScaleX#16 = (float) needMirroring;

        virtualinvoke $u13.<android.graphics.Canvas: void translate(float,float)>(canvasScaleX#16, 0.0F);

        virtualinvoke $u13.<android.graphics.Canvas: void scale(float,float)>(-1.0F, 1.0F);

     label07:
        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke colorFilter#3.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void createCachedBitmapIfNeeded(int,int)>($u-1, $u-1#44);

        $u-1#62 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching>;

        if $u-1#62 != 0 goto label08;

        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>($u-1, $u-1#44);

        goto label09;

     label08:
        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u-1#62 = virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean canReuseCache()>();

        if $u-1#62 != 0 goto label09;

        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCachedBitmap(int,int)>($u-1, $u-1#44);

        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void updateCacheStates()>();

     label09:
        $u2#71 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        colorFilter#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.Rect mTmpBounds>;

        virtualinvoke $u2#71.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect)>($u13, colorFilter#10, colorFilter#3);

        virtualinvoke $u13.<android.graphics.Canvas: void restoreToCount(int)>($u-1#54);

     label10:
        return;
    }

    public int getAlpha()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;
        int $u-1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#5;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $u0#6;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: int getAlpha(android.graphics.drawable.Drawable)>($u0);

        return $u-1;

     label1:
        $u0#5 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#6 = $u0#5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u-1 = virtualinvoke $u0#6.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        return $u-1;
    }

    public int getChangingConfigurations()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;
        int $u-1, $u-1#8;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        return $u-1;

     label1:
        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getChangingConfigurations()>();

        $u1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u-1#8 = virtualinvoke $u1.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()>();

        $u-1 = $u-1 | $u-1#8;

        return $u-1;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.ColorFilter $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)>($u0);

        return $u-1;

     label1:
        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter>;

        return $u-1;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;
        int $u0#2;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState $u0#4;
        android.graphics.drawable.Drawable$ConstantState $u-1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#8;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0#2 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0#2 < 24 goto label1;

        $u0#4 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        specialinvoke $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: void <init>(android.graphics.drawable.Drawable$ConstantState)>($u-1);

        return $u0#4;

     label1:
        $u0#8 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#2 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        $u0#8.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $u0#2;

        $u0#8 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        return $u0#8;
    }

    public volatile android.graphics.drawable.Drawable getCurrent()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable getCurrent()>();

        return $u-1;
    }

    public int getIntrinsicHeight()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $u0#5;
        float $u0#6;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $u-1;

     label1:
        $u0#4 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#5 = $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u0#6 = $u0#5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        $u-1 = (int) $u0#6;

        return $u-1;
    }

    public int getIntrinsicWidth()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#4;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $u0#5;
        float $u0#6;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $u-1;

     label1:
        $u0#4 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#5 = $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u0#6 = $u0#5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        $u-1 = (int) $u0#6;

        return $u-1;
    }

    public volatile int getMinimumHeight()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getMinimumHeight()>();

        return $u-1;
    }

    public volatile int getMinimumWidth()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int getMinimumWidth()>();

        return $u-1;
    }

    public int getOpacity()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $u-1;

     label1:
        return -3;
    }

    public volatile boolean getPadding(android.graphics.Rect)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u-1;
        android.graphics.Rect $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: android.graphics.Rect;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean getPadding(android.graphics.Rect)>($u1);

        return $u-1;
    }

    public float getPixelSize()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        float scaleX, scaleY, viewportWidth, viewportHeight;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState intrinsicWidth;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer intrinsicWidth#2;
        byte intrinsicWidth#7;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if intrinsicWidth == null goto label2;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        if intrinsicWidth#2 == null goto label2;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleY = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        intrinsicWidth#7 = scaleY cmpl 0.0F;

        if intrinsicWidth#7 == 0 goto label2;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleY = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        intrinsicWidth#7 = scaleY cmpl 0.0F;

        if intrinsicWidth#7 == 0 goto label2;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleY = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        intrinsicWidth#7 = scaleY cmpl 0.0F;

        if intrinsicWidth#7 == 0 goto label2;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleY = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        intrinsicWidth#7 = scaleY cmpl 0.0F;

        if intrinsicWidth#7 != 0 goto label1;

        goto label2;

     label1:
        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleX = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseWidth>;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        scaleY = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mBaseHeight>;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        viewportWidth = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportWidth>;

        intrinsicWidth = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        intrinsicWidth#2 = intrinsicWidth.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        viewportHeight = intrinsicWidth#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float mViewportHeight>;

        scaleX = viewportWidth / scaleX;

        scaleY = viewportHeight / scaleY;

        scaleY = staticinvoke <java.lang.Math: float min(float,float)>(scaleX, scaleY);

        return scaleY;

     label2:
        return 1.0F;
    }

    public volatile int[] getState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int[] $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: int[] getState()>();

        return $u-1;
    }

    java.lang.Object getTargetByName(java.lang.String)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        java.lang.String $u2;
        java.lang.Object $u-1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $u0#2;
        androidx.collection.ArrayMap $u0#3;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: java.lang.String;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#2 = $u0.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u0#3 = $u0#2.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: androidx.collection.ArrayMap mVGTargetsMap>;

        $u-1 = virtualinvoke $u0#3.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($u2);

        return $u-1;
    }

    public volatile android.graphics.Region getTransparentRegion()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.Region $u-1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.Region getTransparentRegion()>();

        return $u-1;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.Resources $u2;
        org.xmlpull.v1.XmlPullParser $u3;
        android.util.AttributeSet $u4;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: android.content.res.Resources;

        $u3 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $u4 := @parameter2: android.util.AttributeSet;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>($u2, $u3, $u4);

        return;

     label1:
        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($u2, $u3, $u4, null);

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.Resources $u7;
        org.xmlpull.v1.XmlPullParser $u8;
        android.util.AttributeSet $u9;
        android.content.res.Resources$Theme $u10;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer pathRenderer;
        android.content.res.ColorStateList $u4;
        android.graphics.PorterDuff$Mode $u5;
        android.graphics.drawable.Drawable state;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state#3;
        int[] a;
        android.content.res.TypedArray $u-1;
        int $u-1#7;
        android.graphics.PorterDuffColorFilter $u3;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u7 := @parameter0: android.content.res.Resources;

        $u8 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $u9 := @parameter2: android.util.AttributeSet;

        $u10 := @parameter3: android.content.res.Resources$Theme;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if state == null goto label1;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(state, $u7, $u8, $u9, $u10);

        return;

     label1:
        state#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        pathRenderer = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer;

        specialinvoke pathRenderer.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void <init>()>();

        state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer> = pathRenderer;

        a = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY>;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u7, $u10, $u9, a);

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>($u-1, $u8, $u10);

        virtualinvoke $u-1.<android.content.res.TypedArray: void recycle()>();

        $u-1#7 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int getChangingConfigurations()>();

        state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int mChangingConfigurations> = $u-1#7;

        state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mCacheDirty> = 1;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($u7, $u8, $u9, $u10);

        $u3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $u4 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $u5 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $u3 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($u3, $u4, $u5);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $u3;

        return;
    }

    public void invalidateSelf()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void invalidateSelf()>();

        return;

     label1:
        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void invalidateSelf()>();

        return;
    }

    public boolean isAutoMirrored()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#4;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>($u0);

        return $u-1;

     label1:
        $u0#4 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u-1 = $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored>;

        return $u-1;
    }

    public boolean isStateful()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.drawable.Drawable $u0;
        boolean $u-1;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#7;
        android.content.res.ColorStateList $u0#11;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $u-1;

     label1:
        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean isStateful()>();

        if $u-1 != 0 goto label3;

        $u0#7 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        if $u0#7 == null goto label2;

        $u-1 = virtualinvoke $u0#7.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean isStateful()>();

        if $u-1 != 0 goto label3;

        $u0#7 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#11 = $u0#7.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $u0#11 == null goto label2;

        $u0#7 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#11 = $u0#7.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $u-1 = virtualinvoke $u0#11.<android.content.res.ColorStateList: boolean isStateful()>();

        if $u-1 == 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public volatile void jumpToCurrentState()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void jumpToCurrentState()>();

        return;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u1, $u0#5;
        android.graphics.drawable.Drawable $u-1;
        boolean $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u-1 == null goto label1;

        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u-1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        return this;

     label1:
        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mMutated>;

        if $u0 != 0 goto label2;

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: android.graphics.drawable.Drawable mutate()>();

        if $u-1 != this goto label2;

        $u0#5 = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState;

        $u1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        specialinvoke $u0#5.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)>($u1);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState> = $u0#5;

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mMutated> = 1;

     label2:
        return this;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.Rect $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: android.graphics.Rect;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($u2);

     label1:
        return;
    }

    protected boolean onStateChange(int[])
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int[] $u6;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state;
        android.content.res.ColorStateList $u3;
        android.graphics.PorterDuff$Mode $u4;
        android.graphics.drawable.Drawable changed;
        boolean $u-1, $u-1#11;
        android.graphics.PorterDuffColorFilter $u2;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u6 := @parameter0: int[];

        changed = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if changed == null goto label1;

        changed = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u-1 = virtualinvoke changed.<android.graphics.drawable.Drawable: boolean setState(int[])>($u6);

        return $u-1;

     label1:
        $u-1 = 0;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u3 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $u3 == null goto label2;

        $u4 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $u4 == null goto label2;

        $u2 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $u3 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $u4 = state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $u2 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($u2, $u3, $u4);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $u2;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        $u-1 = 1;

     label2:
        $u-1#11 = virtualinvoke state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean isStateful()>();

        if $u-1#11 == 0 goto label3;

        $u-1#11 = virtualinvoke state.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean onStateChanged(int[])>($u6);

        if $u-1#11 == 0 goto label3;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        return 1;

     label3:
        return $u-1;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        java.lang.Runnable $u2;
        long $u3;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: java.lang.Runnable;

        $u3 := @parameter1: long;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>($u2, $u3);

        return;

     label1:
        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void scheduleSelf(java.lang.Runnable,long)>($u2, $u3);

        return;
    }

    void setAllowCaching(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: boolean;

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: boolean mAllowCaching> = $u1;

        return;
    }

    public void setAlpha(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u2, $u-1;
        android.graphics.drawable.Drawable $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#3;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer $u0#4;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setAlpha(int)>($u2);

        return;

     label1:
        $u0#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#4 = $u0#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        $u-1 = virtualinvoke $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()>();

        if $u-1 == $u2 goto label2;

        $u0#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#4 = $u0#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer>;

        virtualinvoke $u0#4.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)>($u2);

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u2;
        android.graphics.drawable.Drawable $u0;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState $u0#3;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: boolean;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>($u0, $u2);

        return;

     label1:
        $u0#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u0#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: boolean mAutoMirrored> = $u2;

        return;
    }

    public volatile void setChangingConfigurations(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: int;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setChangingConfigurations(int)>($u1);

        return;
    }

    public volatile void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u1;
        android.graphics.PorterDuff$Mode $u2;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: int;

        $u2 := @parameter1: android.graphics.PorterDuff$Mode;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setColorFilter(int,android.graphics.PorterDuff$Mode)>($u1, $u2);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.ColorFilter $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: android.graphics.ColorFilter;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($u2);

        return;

     label1:
        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.ColorFilter mColorFilter> = $u2;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

        return;
    }

    public volatile void setFilterBitmap(boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: boolean;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setFilterBitmap(boolean)>($u1);

        return;
    }

    public volatile void setHotspot(float, float)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        float $u1, $u2;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: float;

        $u2 := @parameter1: float;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspot(float,float)>($u1, $u2);

        return;
    }

    public volatile void setHotspotBounds(int, int, int, int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u1, $u2, $u3, $u4;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: int;

        $u2 := @parameter1: int;

        $u3 := @parameter2: int;

        $u4 := @parameter3: int;

        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void setHotspotBounds(int,int,int,int)>($u1, $u2, $u3, $u4);

        return;
    }

    public volatile boolean setState(int[])
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u-1;
        int[] $u1;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u1 := @parameter0: int[];

        $u-1 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setState(int[])>($u1);

        return $u-1;
    }

    public void setTint(int)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        int $u2;
        android.content.res.ColorStateList $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTint(android.graphics.drawable.Drawable,int)>($u0, $u2);

        return;

     label1:
        $u-1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>($u2);

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void setTintList(android.content.res.ColorStateList)>($u-1);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.content.res.ColorStateList $u4, $u1;
        android.graphics.PorterDuff$Mode $u2;
        android.graphics.PorterDuffColorFilter $u-1;
        android.graphics.drawable.Drawable state;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state#3;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u4 := @parameter0: android.content.res.ColorStateList;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if state == null goto label1;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>(state, $u4);

        return;

     label1:
        state#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u1 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        if $u1 == $u4 goto label2;

        state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint> = $u4;

        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $u2 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        $u-1 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($u-1, $u4, $u2);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $u-1;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.PorterDuff$Mode $u4, $u1;
        android.content.res.ColorStateList $u2;
        android.graphics.PorterDuffColorFilter $u-1;
        android.graphics.drawable.Drawable state;
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState state#3;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u4 := @parameter0: android.graphics.PorterDuff$Mode;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if state == null goto label1;

        state = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>(state, $u4);

        return;

     label1:
        state#3 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState>;

        $u1 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode>;

        if $u1 == $u4 goto label2;

        state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.graphics.PorterDuff$Mode mTintMode> = $u4;

        $u-1 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter>;

        $u2 = state#3.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: android.content.res.ColorStateList mTint>;

        $u-1 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>($u-1, $u2, $u4);

        this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.PorterDuffColorFilter mTintFilter> = $u-1;

        virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void invalidateSelf()>();

     label2:
        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        boolean $u2, $u3;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: boolean;

        $u3 := @parameter1: boolean;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        $u2 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($u2, $u3);

        return $u2;

     label1:
        $u2 = specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: boolean setVisible(boolean,boolean)>($u2, $u3);

        return $u2;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        java.lang.Runnable $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u2 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        if $u0 == null goto label1;

        $u0 = this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: android.graphics.drawable.Drawable mDelegateDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>($u2);

        return;

     label1:
        specialinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCommon: void unscheduleSelf(java.lang.Runnable)>($u2);

        return;
    }

    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter, android.content.res.ColorStateList, android.graphics.PorterDuff$Mode)
    {
        androidx.vectordrawable.graphics.drawable.VectorDrawableCompat this;
        android.graphics.PorterDuffColorFilter $u3;
        android.content.res.ColorStateList $u4;
        android.graphics.PorterDuff$Mode $u5;
        int[] $u-1;
        int $u-1#4;

        this := @this: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;

        $u3 := @parameter0: android.graphics.PorterDuffColorFilter;

        $u4 := @parameter1: android.content.res.ColorStateList;

        $u5 := @parameter2: android.graphics.PorterDuff$Mode;

        if $u4 == null goto label2;

        if $u5 != null goto label1;

        goto label2;

     label1:
        $u-1 = virtualinvoke this.<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: int[] getState()>();

        $u-1#4 = virtualinvoke $u4.<android.content.res.ColorStateList: int getColorForState(int[],int)>($u-1, 0);

        $u3 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $u3.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>($u-1#4, $u5);

        return $u3;

     label2:
        return null;
    }
}
