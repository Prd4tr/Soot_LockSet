public class androidx.core.graphics.TypefaceCompatUtil extends java.lang.Object
{
    private static final java.lang.String CACHE_FILE_PREFIX;
    private static final java.lang.String TAG;

    private void <init>()
    {
        androidx.core.graphics.TypefaceCompatUtil this;

        this := @this: androidx.core.graphics.TypefaceCompatUtil;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable $u1;
        java.io.IOException $u0;

        $u1 := @parameter0: java.io.Closeable;

        if $u1 == null goto label4;

     label1:
        interfaceinvoke $u1.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $u0 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.nio.ByteBuffer copyToDirectBuffer(android.content.Context, android.content.res.Resources, int)
    {
        android.content.Context $u3;
        android.content.res.Resources $u4;
        int $u5;
        java.io.File $u-1;
        boolean $u-1#3;
        java.nio.ByteBuffer $u-1#4;
        java.lang.Throwable $u1;

        $u3 := @parameter0: android.content.Context;

        $u4 := @parameter1: android.content.res.Resources;

        $u5 := @parameter2: int;

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($u3);

        if $u-1 != null goto label1;

        return null;

     label1:
        $u-1#3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>($u-1, $u4, $u5);

     label2:
        if $u-1#3 != 0 goto label3;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return null;

     label3:
        $u-1#4 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(java.io.File)>($u-1);

     label4:
        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return $u-1#4;

     label5:
        $u1 := @caughtexception;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        throw $u1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, android.content.res.Resources, int)
    {
        java.io.File $u2;
        android.content.res.Resources $u3;
        int $u4;
        java.io.InputStream is, $u-1;
        boolean $u-1#4;
        java.lang.Throwable $u1;

        $u2 := @parameter0: java.io.File;

        $u3 := @parameter1: android.content.res.Resources;

        $u4 := @parameter2: int;

        is = null;

     label1:
        $u-1 = virtualinvoke $u3.<android.content.res.Resources: java.io.InputStream openRawResource(int)>($u4);

     label2:
        is = $u-1;

     label3:
        $u-1#4 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>($u2, $u-1);

     label4:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($u-1);

        return $u-1#4;

     label5:
        $u1 := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(is);

        throw $u1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean copyToFile(java.io.File, java.io.InputStream)
    {
        java.io.File $u7;
        java.io.InputStream $u8;
        java.io.FileOutputStream os, buffer;
        android.os.StrictMode$ThreadPolicy $u-1;
        byte[] buffer#6;
        int $u-1#7;
        java.lang.Throwable $u2;
        java.io.IOException buffer#13;
        java.lang.StringBuilder readLen;
        java.lang.String $u-1#17;

        $u7 := @parameter0: java.io.File;

        $u8 := @parameter1: java.io.InputStream;

        os = null;

        $u-1 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label01:
        buffer = new java.io.FileOutputStream;

     label02:
        specialinvoke buffer.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($u7, 0);

     label03:
        os = buffer;

     label04:
        buffer#6 = newarray (byte)[1024];

     label05:
        $u-1#7 = virtualinvoke $u8.<java.io.InputStream: int read(byte[])>(buffer#6);

     label06:
        if $u-1#7 == -1 goto label09;

     label07:
        virtualinvoke buffer.<java.io.FileOutputStream: void write(byte[],int,int)>(buffer#6, 0, $u-1#7);

     label08:
        goto label05;

     label09:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(buffer);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($u-1);

        return 1;

     label10:
        $u2 := @caughtexception;

        goto label14;

     label11:
        buffer#13 := @caughtexception;

     label12:
        readLen = new java.lang.StringBuilder;

        specialinvoke readLen.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke readLen.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error copying resource contents to temp file: ");

        $u-1#17 = virtualinvoke buffer#13.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke readLen.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#17);

        $u-1#17 = virtualinvoke readLen.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TypefaceCompatUtil", $u-1#17);

     label13:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(os);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($u-1);

        return 0;

     label14:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(os);

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($u-1);

        goto label15;

     label15:
        throw $u2;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    public static java.io.File getTempFile(android.content.Context)
    {
        android.content.Context $u6;
        java.io.File $u-1, file;
        java.lang.StringBuilder prefix;
        int $u-1#4;
        java.lang.String $u-1#9, $u-1#15;
        boolean $u-1#17;
        java.io.IOException $u5;

        $u6 := @parameter0: android.content.Context;

        $u-1 = virtualinvoke $u6.<android.content.Context: java.io.File getCacheDir()>();

        if $u-1 != null goto label1;

        return null;

     label1:
        prefix = new java.lang.StringBuilder;

        specialinvoke prefix.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".font");

        $u-1#4 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u-1#4);

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $u-1#4 = staticinvoke <android.os.Process: int myTid()>();

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u-1#4);

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $u-1#9 = virtualinvoke prefix.<java.lang.StringBuilder: java.lang.String toString()>();

        $u-1#4 = 0;

     label2:
        if $u-1#4 >= 100 goto label8;

        file = new java.io.File;

        prefix = new java.lang.StringBuilder;

        specialinvoke prefix.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#9);

        virtualinvoke prefix.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u-1#4);

        $u-1#15 = virtualinvoke prefix.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke file.<java.io.File: void <init>(java.io.File,java.lang.String)>($u-1, $u-1#15);

     label3:
        $u-1#17 = virtualinvoke file.<java.io.File: boolean createNewFile()>();

     label4:
        if $u-1#17 == 0 goto label5;

        return file;

     label5:
        goto label7;

     label6:
        $u5 := @caughtexception;

     label7:
        $u-1#4 = $u-1#4 + 1;

        goto label2;

     label8:
        return null;

        catch java.io.IOException from label3 to label4 with label6;
    }

    public static java.nio.ByteBuffer mmap(android.content.Context, android.os.CancellationSignal, android.net.Uri)
    {
        android.content.Context $u10;
        android.os.CancellationSignal $u11;
        android.net.Uri $u12;
        android.content.ContentResolver $u-1;
        android.os.ParcelFileDescriptor $u-1#3;
        java.io.FileInputStream fis;
        java.io.FileDescriptor $u-1#6;
        java.nio.channels.FileChannel $u-1#8;
        long $u-1#10;
        java.nio.channels.FileChannel$MapMode $u5;
        java.nio.MappedByteBuffer $u-1#12;
        java.lang.Throwable channel, $u5#15, fis#16, channel#17;
        java.io.IOException pfd;

        $u10 := @parameter0: android.content.Context;

        $u11 := @parameter1: android.os.CancellationSignal;

        $u12 := @parameter2: android.net.Uri;

        $u-1 = virtualinvoke $u10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        $u-1#3 = virtualinvoke $u-1.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>($u12, "r", $u11);

     label02:
        if $u-1#3 != null goto label05;

        if $u-1#3 == null goto label24;

     label03:
        virtualinvoke $u-1#3.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        return null;

     label05:
        fis = new java.io.FileInputStream;

        $u-1#6 = virtualinvoke $u-1#3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke fis.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($u-1#6);

     label06:
        $u-1#8 = virtualinvoke fis.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $u-1#10 = virtualinvoke $u-1#8.<java.nio.channels.FileChannel: long size()>();

        $u5 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $u-1#12 = virtualinvoke $u-1#8.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($u5, 0L, $u-1#10);

     label07:
        virtualinvoke fis.<java.io.FileInputStream: void close()>();

     label08:
        if $u-1#3 == null goto label25;

     label09:
        virtualinvoke $u-1#3.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        return $u-1#12;

     label11:
        channel := @caughtexception;

     label12:
        virtualinvoke fis.<java.io.FileInputStream: void close()>();

     label13:
        goto label16;

     label14:
        $u5#15 := @caughtexception;

     label15:
        virtualinvoke channel.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($u5#15);

     label16:
        throw channel;

     label17:
        fis#16 := @caughtexception;

        if $u-1#3 == null goto label22;

     label18:
        virtualinvoke $u-1#3.<android.os.ParcelFileDescriptor: void close()>();

     label19:
        goto label22;

     label20:
        channel#17 := @caughtexception;

     label21:
        virtualinvoke fis#16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(channel#17);

     label22:
        throw fis#16;

     label23:
        pfd := @caughtexception;

     label24:
        return null;

     label25:
        return $u-1#12;

        catch java.io.IOException from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label23 with label23;
    }

    private static java.nio.ByteBuffer mmap(java.io.File)
    {
        java.io.File $u7;
        java.io.FileInputStream fis;
        java.nio.channels.FileChannel $u-1;
        long $u-1#4;
        java.nio.channels.FileChannel$MapMode $u2;
        java.nio.MappedByteBuffer $u-1#6;
        java.lang.Throwable channel, $u2#9;
        java.io.IOException fis#10;

        $u7 := @parameter0: java.io.File;

        fis = new java.io.FileInputStream;

     label01:
        specialinvoke fis.<java.io.FileInputStream: void <init>(java.io.File)>($u7);

     label02:
        $u-1 = virtualinvoke fis.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $u-1#4 = virtualinvoke $u-1.<java.nio.channels.FileChannel: long size()>();

        $u2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $u-1#6 = virtualinvoke $u-1.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($u2, 0L, $u-1#4);

     label03:
        virtualinvoke fis.<java.io.FileInputStream: void close()>();

     label04:
        return $u-1#6;

     label05:
        channel := @caughtexception;

     label06:
        virtualinvoke fis.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $u2#9 := @caughtexception;

     label09:
        virtualinvoke channel.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($u2#9);

     label10:
        throw channel;

     label11:
        fis#10 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label11 with label11;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.TypefaceCompatUtil: java.lang.String TAG> = "TypefaceCompatUtil";

        <androidx.core.graphics.TypefaceCompatUtil: java.lang.String CACHE_FILE_PREFIX> = ".font";

        return;
    }
}
