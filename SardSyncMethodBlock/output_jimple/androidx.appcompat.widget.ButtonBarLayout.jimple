public class androidx.appcompat.widget.ButtonBarLayout extends android.widget.LinearLayout
{
    private static final int PEEK_BUTTON_DP;
    private boolean mAllowStacking;
    private int mLastWidthSize;
    private int mMinimumHeight;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        android.content.Context $u9;
        android.util.AttributeSet $u10;
        int[] $u3;
        android.content.res.TypedArray $u-1;
        int $u1;
        boolean $u-1#10;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u9 := @parameter0: android.content.Context;

        $u10 := @parameter1: android.util.AttributeSet;

        specialinvoke this.<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>($u9, $u10);

        this.<androidx.appcompat.widget.ButtonBarLayout: int mLastWidthSize> = -1;

        this.<androidx.appcompat.widget.ButtonBarLayout: int mMinimumHeight> = 0;

        $u3 = <androidx.appcompat.R$styleable: int[] ButtonBarLayout>;

        $u-1 = virtualinvoke $u9.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>($u10, $u3);

        $u3 = <androidx.appcompat.R$styleable: int[] ButtonBarLayout>;

        staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(this, $u9, $u3, $u10, $u-1, 0, 0);

        $u1 = <androidx.appcompat.R$styleable: int ButtonBarLayout_allowStacking>;

        $u-1#10 = virtualinvoke $u-1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($u1, 1);

        this.<androidx.appcompat.widget.ButtonBarLayout: boolean mAllowStacking> = $u-1#10;

        virtualinvoke $u-1.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private int getNextVisibleChildIndex(int)
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        int $u4, $u-1, $u-1#5;
        android.view.View $u-1#3;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u4 := @parameter0: int;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getChildCount()>();

     label1:
        if $u4 >= $u-1 goto label3;

        $u-1#3 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.view.View getChildAt(int)>($u4);

        $u-1#5 = virtualinvoke $u-1#3.<android.view.View: int getVisibility()>();

        if $u-1#5 != 0 goto label2;

        return $u4;

     label2:
        $u4 = $u4 + 1;

        goto label1;

     label3:
        return -1;
    }

    private boolean isStacked()
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        int $u-1;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getOrientation()>();

        if $u-1 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void setStacked(boolean)
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        boolean $u5;
        int spacer;
        android.view.View $u-1;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u5 := @parameter0: boolean;

        spacer = (int) $u5;

        virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setOrientation(int)>(spacer);

        if $u5 == 0 goto label1;

        spacer = 5;

        goto label2;

     label1:
        spacer = 80;

     label2:
        virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setGravity(int)>(spacer);

        spacer = <androidx.appcompat.R$id: int spacer>;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.view.View findViewById(int)>(spacer);

        if $u-1 == null goto label5;

        if $u5 == 0 goto label3;

        spacer = 8;

        goto label4;

     label3:
        spacer = 4;

     label4:
        virtualinvoke $u-1.<android.view.View: void setVisibility(int)>(spacer);

     label5:
        spacer = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getChildCount()>();

        spacer = spacer + -2;

     label6:
        if spacer < 0 goto label7;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.view.View getChildAt(int)>(spacer);

        virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void bringChildToFront(android.view.View)>($u-1);

        spacer = spacer + -1;

        goto label6;

     label7:
        return;
    }

    public int getMinimumHeight()
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        int $u0, $u-1;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u0 = this.<androidx.appcompat.widget.ButtonBarLayout: int mMinimumHeight>;

        $u-1 = specialinvoke this.<android.widget.LinearLayout: int getMinimumHeight()>();

        $u0 = staticinvoke <java.lang.Math: int max(int,int)>($u0, $u-1);

        return $u0;
    }

    protected void onMeasure(int, int)
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        int $u12, $u13, $u-1, needsRemeasure#4;
        boolean needsRemeasure, $u-1#8;
        android.view.View $u-1#29;
        android.view.ViewGroup$LayoutParams $u-1#31;
        android.widget.LinearLayout$LayoutParams stack;
        android.content.res.Resources $u-1#53;
        android.util.DisplayMetrics $u-1#55;
        float $u10;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u12 := @parameter0: int;

        $u13 := @parameter1: int;

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($u12);

        needsRemeasure = this.<androidx.appcompat.widget.ButtonBarLayout: boolean mAllowStacking>;

        if needsRemeasure == 0 goto label02;

        needsRemeasure#4 = this.<androidx.appcompat.widget.ButtonBarLayout: int mLastWidthSize>;

        if $u-1 <= needsRemeasure#4 goto label01;

        needsRemeasure = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: boolean isStacked()>();

        if needsRemeasure == 0 goto label01;

        specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)>(0);

     label01:
        this.<androidx.appcompat.widget.ButtonBarLayout: int mLastWidthSize> = $u-1;

     label02:
        needsRemeasure = 0;

        $u-1#8 = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: boolean isStacked()>();

        if $u-1#8 != 0 goto label03;

        needsRemeasure#4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($u12);

        if needsRemeasure#4 != 1073741824 goto label03;

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($u-1, -2147483648);

        needsRemeasure = 1;

        goto label04;

     label03:
        $u-1 = $u12;

     label04:
        specialinvoke this.<android.widget.LinearLayout: void onMeasure(int,int)>($u-1, $u13);

        $u-1#8 = this.<androidx.appcompat.widget.ButtonBarLayout: boolean mAllowStacking>;

        if $u-1#8 == 0 goto label07;

        $u-1#8 = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: boolean isStacked()>();

        if $u-1#8 != 0 goto label07;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getMeasuredWidthAndState()>();

        $u-1 = -16777216 & $u-1;

        if $u-1 != 16777216 goto label05;

        $u-1#8 = 1;

        goto label06;

     label05:
        $u-1#8 = 0;

     label06:
        if $u-1#8 == 0 goto label07;

        specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)>(1);

        needsRemeasure = 1;

     label07:
        if needsRemeasure == 0 goto label08;

        specialinvoke this.<android.widget.LinearLayout: void onMeasure(int,int)>($u12, $u13);

     label08:
        $u12 = 0;

        $u13 = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getNextVisibleChildIndex(int)>(0);

        if $u13 < 0 goto label11;

        $u-1#29 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.view.View getChildAt(int)>($u13);

        $u-1#31 = virtualinvoke $u-1#29.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        stack = (android.widget.LinearLayout$LayoutParams) $u-1#31;

        $u12 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getPaddingTop()>();

        $u-1 = virtualinvoke $u-1#29.<android.view.View: int getMeasuredHeight()>();

        $u12 = $u12 + $u-1;

        $u-1 = stack.<android.widget.LinearLayout$LayoutParams: int topMargin>;

        $u12 = $u12 + $u-1;

        $u-1 = stack.<android.widget.LinearLayout$LayoutParams: int bottomMargin>;

        $u12 = $u12 + $u-1;

        needsRemeasure = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: boolean isStacked()>();

        if needsRemeasure == 0 goto label10;

        $u13 = $u13 + 1;

        $u13 = specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getNextVisibleChildIndex(int)>($u13);

        if $u13 < 0 goto label09;

        $u-1#29 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.view.View getChildAt(int)>($u13);

        $u13 = virtualinvoke $u-1#29.<android.view.View: int getPaddingTop()>();

        $u-1#53 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: android.content.res.Resources getResources()>();

        $u-1#55 = virtualinvoke $u-1#53.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $u10 = $u-1#55.<android.util.DisplayMetrics: float density>;

        $u10 = $u10 * 16.0F;

        $u-1 = (int) $u10;

        $u13 = $u13 + $u-1;

        $u12 = $u12 + $u13;

     label09:
        goto label11;

     label10:
        $u13 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getPaddingBottom()>();

        $u12 = $u12 + $u13;

     label11:
        $u13 = staticinvoke <androidx.core.view.ViewCompat: int getMinimumHeight(android.view.View)>(this);

        if $u13 == $u12 goto label12;

        virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setMinimumHeight(int)>($u12);

     label12:
        return;
    }

    public void setAllowStacking(boolean)
    {
        androidx.appcompat.widget.ButtonBarLayout this;
        boolean $u3, $u0;
        int $u-1;

        this := @this: androidx.appcompat.widget.ButtonBarLayout;

        $u3 := @parameter0: boolean;

        $u0 = this.<androidx.appcompat.widget.ButtonBarLayout: boolean mAllowStacking>;

        if $u0 == $u3 goto label2;

        this.<androidx.appcompat.widget.ButtonBarLayout: boolean mAllowStacking> = $u3;

        if $u3 != 0 goto label1;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: int getOrientation()>();

        if $u-1 != 1 goto label1;

        specialinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)>(0);

     label1:
        virtualinvoke this.<androidx.appcompat.widget.ButtonBarLayout: void requestLayout()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <androidx.appcompat.widget.ButtonBarLayout: int PEEK_BUTTON_DP> = 16;

        return;
    }
}
