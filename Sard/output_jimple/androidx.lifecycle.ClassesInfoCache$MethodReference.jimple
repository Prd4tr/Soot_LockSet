class androidx.lifecycle.ClassesInfoCache$MethodReference extends java.lang.Object
{
    final int mCallType;
    final java.lang.reflect.Method mMethod;

    void <init>(int, java.lang.reflect.Method)
    {
        androidx.lifecycle.ClassesInfoCache$MethodReference this;
        int $u2;
        java.lang.reflect.Method $u3;

        this := @this: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $u2 := @parameter0: int;

        $u3 := @parameter1: java.lang.reflect.Method;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType> = $u2;

        this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod> = $u3;

        virtualinvoke $u3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.lifecycle.ClassesInfoCache$MethodReference this, that;
        java.lang.Object $u6;
        java.lang.Class $u-1, $u-1#4;
        int $u3, $u4;
        java.lang.reflect.Method $u3#10;
        java.lang.String $u-1#11, $u-1#14;
        boolean $u-1#16;

        this := @this: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $u6 := @parameter0: java.lang.Object;

        if this != $u6 goto label1;

        return 1;

     label1:
        if $u6 == null goto label4;

        $u-1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $u-1#4 = virtualinvoke $u6.<java.lang.Object: java.lang.Class getClass()>();

        if $u-1 == $u-1#4 goto label2;

        return 0;

     label2:
        that = (androidx.lifecycle.ClassesInfoCache$MethodReference) $u6;

        $u3 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType>;

        $u4 = that.<androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType>;

        if $u3 != $u4 goto label3;

        $u3#10 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u-1#11 = virtualinvoke $u3#10.<java.lang.reflect.Method: java.lang.String getName()>();

        $u3#10 = that.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u-1#14 = virtualinvoke $u3#10.<java.lang.reflect.Method: java.lang.String getName()>();

        $u-1#16 = virtualinvoke $u-1#11.<java.lang.String: boolean equals(java.lang.Object)>($u-1#14);

        if $u-1#16 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    public int hashCode()
    {
        androidx.lifecycle.ClassesInfoCache$MethodReference this;
        int $u0, $u-1#6;
        java.lang.reflect.Method $u1;
        java.lang.String $u-1;

        this := @this: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $u0 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType>;

        $u0 = $u0 * 31;

        $u1 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u-1 = virtualinvoke $u1.<java.lang.reflect.Method: java.lang.String getName()>();

        $u-1#6 = virtualinvoke $u-1.<java.lang.String: int hashCode()>();

        $u0 = $u0 + $u-1#6;

        return $u0;
    }

    void invokeCallback(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event, java.lang.Object)
    {
        androidx.lifecycle.ClassesInfoCache$MethodReference this;
        androidx.lifecycle.LifecycleOwner $u5;
        androidx.lifecycle.Lifecycle$Event $u6;
        java.lang.Object $u7;
        java.lang.Throwable $u-1;
        int e;
        java.lang.reflect.Method e#5;
        java.lang.Object[] $u3;
        java.lang.IllegalAccessException e#11;
        java.lang.RuntimeException $u1;
        java.lang.reflect.InvocationTargetException e#13;

        this := @this: androidx.lifecycle.ClassesInfoCache$MethodReference;

        $u5 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $u6 := @parameter1: androidx.lifecycle.Lifecycle$Event;

        $u7 := @parameter2: java.lang.Object;

        e = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType>;

        if e == 0 goto label07;

        if e == 1 goto label04;

        if e == 2 goto label01;

        goto label09;

     label01:
        e#5 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u3 = newarray (java.lang.Object)[2];

        $u3[0] = $u5;

        $u3[1] = $u6;

     label02:
        virtualinvoke e#5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u7, $u3);

     label03:
        goto label09;

     label04:
        e#5 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u3 = newarray (java.lang.Object)[1];

        $u3[0] = $u5;

     label05:
        virtualinvoke e#5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u7, $u3);

     label06:
        goto label09;

     label07:
        e#5 = this.<androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod>;

        $u3 = newarray (java.lang.Object)[0];

     label08:
        virtualinvoke e#5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u7, $u3);

     label09:
        return;

     label10:
        e#11 := @caughtexception;

        $u1 = new java.lang.RuntimeException;

        specialinvoke $u1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(e#11);

        throw $u1;

     label11:
        e#13 := @caughtexception;

        $u1 = new java.lang.RuntimeException;

        $u-1 = virtualinvoke e#13.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $u1.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to call observer method", $u-1);

        throw $u1;

        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label11;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label11;
        catch java.lang.IllegalAccessException from label02 to label03 with label10;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label08 to label09 with label10;
    }
}
