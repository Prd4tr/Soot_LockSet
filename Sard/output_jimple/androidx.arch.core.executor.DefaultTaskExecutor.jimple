public class androidx.arch.core.executor.DefaultTaskExecutor extends androidx.arch.core.executor.TaskExecutor
{
    private final java.util.concurrent.ExecutorService mDiskIO;
    private final java.lang.Object mLock;
    private volatile android.os.Handler mMainHandler;

    public void <init>()
    {
        androidx.arch.core.executor.DefaultTaskExecutor this;
        java.util.concurrent.ExecutorService $u-1;
        java.lang.Object $u0;
        androidx.arch.core.executor.DefaultTaskExecutor$1 $u0#2;

        this := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        specialinvoke this.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        $u0 = new java.lang.Object;

        specialinvoke $u0.<java.lang.Object: void <init>()>();

        this.<androidx.arch.core.executor.DefaultTaskExecutor: java.lang.Object mLock> = $u0;

        $u0#2 = new androidx.arch.core.executor.DefaultTaskExecutor$1;

        specialinvoke $u0#2.<androidx.arch.core.executor.DefaultTaskExecutor$1: void <init>(androidx.arch.core.executor.DefaultTaskExecutor)>(this);

        $u-1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(2, $u0#2);

        this.<androidx.arch.core.executor.DefaultTaskExecutor: java.util.concurrent.ExecutorService mDiskIO> = $u-1;

        return;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.DefaultTaskExecutor this;
        java.lang.Runnable $u2;
        java.util.concurrent.ExecutorService $u0;

        this := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $u2 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.arch.core.executor.DefaultTaskExecutor: java.util.concurrent.ExecutorService mDiskIO>;

        interfaceinvoke $u0.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($u2);

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.DefaultTaskExecutor this;
        android.os.Looper $u-1;
        java.lang.Thread $u-1#3, $u-1#5;

        this := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $u-1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $u-1#3 = virtualinvoke $u-1.<android.os.Looper: java.lang.Thread getThread()>();

        $u-1#5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $u-1#3 != $u-1#5 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.DefaultTaskExecutor this;
        java.lang.Runnable $u4;
        android.os.Looper $u-1;
        android.os.Handler $u0;
        java.lang.Object $u0#2;
        java.lang.Throwable $u1;

        this := @this: androidx.arch.core.executor.DefaultTaskExecutor;

        $u4 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        if $u0 != null goto label6;

        $u0#2 = this.<androidx.arch.core.executor.DefaultTaskExecutor: java.lang.Object mLock>;

        entermonitor $u0#2;

     label1:
        $u0 = this.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        if $u0 != null goto label2;

        $u0 = new android.os.Handler;

        $u-1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $u0.<android.os.Handler: void <init>(android.os.Looper)>($u-1);

        this.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler> = $u0;

     label2:
        exitmonitor $u0#2;

     label3:
        goto label6;

     label4:
        $u1 := @caughtexception;

        exitmonitor $u0#2;

     label5:
        throw $u1;

     label6:
        $u0 = this.<androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler>;

        virtualinvoke $u0.<android.os.Handler: boolean post(java.lang.Runnable)>($u4);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
