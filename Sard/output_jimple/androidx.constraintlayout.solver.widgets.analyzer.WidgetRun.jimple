public abstract class androidx.constraintlayout.solver.widgets.analyzer.WidgetRun extends java.lang.Object implements androidx.constraintlayout.solver.widgets.analyzer.Dependency
{
    androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension;
    protected androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour dimensionBehavior;
    public androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end;
    protected androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType mRunType;
    public int matchConstraintsType;
    public int orientation;
    boolean resolved;
    androidx.constraintlayout.solver.widgets.analyzer.RunGroup runGroup;
    public androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start;
    androidx.constraintlayout.solver.widgets.ConstraintWidget widget;

    public void <init>(androidx.constraintlayout.solver.widgets.ConstraintWidget)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.ConstraintWidget $u2;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency $u0;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode $u0#3;
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType $u0#5;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u2 := @parameter0: androidx.constraintlayout.solver.widgets.ConstraintWidget;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: void <init>(androidx.constraintlayout.solver.widgets.analyzer.WidgetRun)>(this);

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension> = $u0;

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: int orientation> = 0;

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: boolean resolved> = 0;

        $u0#3 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        specialinvoke $u0#3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void <init>(androidx.constraintlayout.solver.widgets.analyzer.WidgetRun)>(this);

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start> = $u0#3;

        $u0#3 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        specialinvoke $u0#3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void <init>(androidx.constraintlayout.solver.widgets.analyzer.WidgetRun)>(this);

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end> = $u0#3;

        $u0#5 = <androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType NONE>;

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType mRunType> = $u0#5;

        this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget> = $u2;

        return;
    }

    private void resolveDimension(int, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this, run#21;
        int $u8, $u9, run;
        androidx.constraintlayout.solver.widgets.ConstraintWidget run#6;
        androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun run#7;
        androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour run#8, targetDimensionValue;
        androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun run#14;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency ratio;
        boolean ratio#23;
        float $u-1, value;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u8 := @parameter0: int;

        $u9 := @parameter1: int;

        run = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: int matchConstraintsType>;

        if run == 0 goto label14;

        if run == 1 goto label13;

        if run == 2 goto label07;

        if run == 3 goto label01;

        return;

     label01:
        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        run#7 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        run#8 = run#7.<androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour dimensionBehavior>;

        targetDimensionValue = <androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour MATCH_CONSTRAINT>;

        if run#8 != targetDimensionValue goto label02;

        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        run#7 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        $u9 = run#7.<androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun: int matchConstraintsType>;

        if $u9 != 3 goto label02;

        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        run#14 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        run#8 = run#14.<androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour dimensionBehavior>;

        targetDimensionValue = <androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour MATCH_CONSTRAINT>;

        if run#8 != targetDimensionValue goto label02;

        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        run#14 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        $u9 = run#14.<androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun: int matchConstraintsType>;

        if $u9 != 3 goto label02;

        return;

     label02:
        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        if $u8 != 0 goto label03;

        run#21 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        goto label04;

     label03:
        run#21 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

     label04:
        ratio = run#21.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        ratio#23 = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if ratio#23 == 0 goto label15;

        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        $u-1 = virtualinvoke run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: float getDimensionRatio()>();

        if $u8 != 1 goto label05;

        ratio = run#21.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u8 = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        value = (float) $u8;

        $u-1 = value / $u-1;

        $u-1 = $u-1 + 0.5F;

        $u8 = (int) $u-1;

        goto label06;

     label05:
        ratio = run#21.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u8 = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        value = (float) $u8;

        $u-1 = value * $u-1;

        $u-1 = $u-1 + 0.5F;

        $u8 = (int) $u-1;

     label06:
        ratio = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        virtualinvoke ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: void resolve(int)>($u8);

        return;

     label07:
        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        run#6 = virtualinvoke run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintWidget getParent()>();

        if run#6 == null goto label12;

        if $u8 != 0 goto label08;

        run#21 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        goto label09;

     label08:
        run#21 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

     label09:
        ratio = run#21.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        ratio#23 = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if ratio#23 == 0 goto label12;

        run#6 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        if $u8 != 0 goto label10;

        $u-1 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: float mMatchConstraintPercentWidth>;

        goto label11;

     label10:
        $u-1 = run#6.<androidx.constraintlayout.solver.widgets.ConstraintWidget: float mMatchConstraintPercentHeight>;

     label11:
        ratio = run#21.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u9 = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        value = (float) $u9;

        $u-1 = value * $u-1;

        $u-1 = $u-1 + 0.5F;

        $u9 = (int) $u-1;

        ratio = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u8 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: int getLimitedDimension(int,int)>($u9, $u8);

        virtualinvoke ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: void resolve(int)>($u8);

     label12:
        return;

     label13:
        ratio = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        run = ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int wrapValue>;

        $u8 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: int getLimitedDimension(int,int)>(run, $u8);

        ratio = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u8 = staticinvoke <java.lang.Math: int min(int,int)>($u8, $u9);

        virtualinvoke ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: void resolve(int)>($u8);

        return;

     label14:
        ratio = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u8 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: int getLimitedDimension(int,int)>($u9, $u8);

        virtualinvoke ratio.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: void resolve(int)>($u8);

     label15:
        return;
    }

    protected final void addTarget(androidx.constraintlayout.solver.widgets.analyzer.DependencyNode, androidx.constraintlayout.solver.widgets.analyzer.DependencyNode, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode $u2, $u3;
        int $u4;
        java.util.List $u0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u2 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        $u3 := @parameter1: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        $u4 := @parameter2: int;

        $u0 = $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u3);

        $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int margin> = $u4;

        $u0 = $u3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List dependencies>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u2);

        return;
    }

    protected final void addTarget(androidx.constraintlayout.solver.widgets.analyzer.DependencyNode, androidx.constraintlayout.solver.widgets.analyzer.DependencyNode, int, androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode $u3, $u4;
        int $u5;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency $u6, $u1;
        java.util.List $u0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u3 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        $u4 := @parameter1: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode;

        $u5 := @parameter2: int;

        $u6 := @parameter3: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency;

        $u0 = $u3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u4);

        $u0 = $u3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        $u1 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u1);

        $u3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int marginFactor> = $u5;

        $u3.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency marginDependency> = $u6;

        $u0 = $u4.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List dependencies>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u3);

        $u0 = $u6.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: java.util.List dependencies>;

        interfaceinvoke $u0.<java.util.List: boolean add(java.lang.Object)>($u3);

        return;
    }

    abstract void apply();

    abstract void applyToWidget();

    abstract void clear();

    protected final int getLimitedDimension(int, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        int $u5, $u4, min;
        androidx.constraintlayout.solver.widgets.ConstraintWidget max;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u4 := @parameter0: int;

        $u5 := @parameter1: int;

        if $u5 != 0 goto label3;

        max = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        $u5 = max.<androidx.constraintlayout.solver.widgets.ConstraintWidget: int mMatchConstraintMaxWidth>;

        max = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        min = max.<androidx.constraintlayout.solver.widgets.ConstraintWidget: int mMatchConstraintMinWidth>;

        min = staticinvoke <java.lang.Math: int max(int,int)>(min, $u4);

        if $u5 <= 0 goto label1;

        min = staticinvoke <java.lang.Math: int min(int,int)>($u5, $u4);

     label1:
        if min == $u4 goto label2;

        $u4 = min;

     label2:
        return $u4;

     label3:
        max = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        $u5 = max.<androidx.constraintlayout.solver.widgets.ConstraintWidget: int mMatchConstraintMaxHeight>;

        max = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        min = max.<androidx.constraintlayout.solver.widgets.ConstraintWidget: int mMatchConstraintMinHeight>;

        min = staticinvoke <java.lang.Math: int max(int,int)>(min, $u4);

        if $u5 <= 0 goto label4;

        min = staticinvoke <java.lang.Math: int min(int,int)>($u5, $u4);

     label4:
        if min == $u4 goto label5;

        return min;

     label5:
        return $u4;
    }

    protected final androidx.constraintlayout.solver.widgets.analyzer.DependencyNode getTarget(androidx.constraintlayout.solver.widgets.ConstraintAnchor)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $u6, target;
        int $u-1;
        androidx.constraintlayout.solver.widgets.ConstraintWidget targetWidget;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type targetType;
        int[] run;
        androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun run#16;
        androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun run#22;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode ret0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u6 := @parameter0: androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        target = $u6.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        if target != null goto label1;

        return null;

     label1:
        target = $u6.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        targetWidget = target.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintWidget mOwner>;

        $u6 = $u6.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        targetType = $u6.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type mType>;

        run = <androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$1: int[] $SwitchMap$androidx$constraintlayout$solver$widgets$ConstraintAnchor$Type>;

        $u-1 = virtualinvoke targetType.<androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: int ordinal()>();

        $u-1 = run[$u-1];

        if $u-1 == 1 goto label6;

        if $u-1 == 2 goto label5;

        if $u-1 == 3 goto label4;

        if $u-1 == 4 goto label3;

        if $u-1 == 5 goto label2;

        return null;

     label2:
        run#16 = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        ret0 = run#16.<androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        return ret0;

     label3:
        run#16 = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        ret0 = run#16.<androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode baseline>;

        return ret0;

     label4:
        run#16 = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

        ret0 = run#16.<androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        return ret0;

     label5:
        run#22 = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        ret0 = run#22.<androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        return ret0;

     label6:
        run#22 = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        ret0 = run#22.<androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        return ret0;
    }

    protected final androidx.constraintlayout.solver.widgets.analyzer.DependencyNode getTarget(androidx.constraintlayout.solver.widgets.ConstraintAnchor, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $u7, target;
        int $u8;
        androidx.constraintlayout.solver.widgets.ConstraintWidget targetWidget;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type targetType;
        int[] $u4;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode ret0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u7 := @parameter0: androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        $u8 := @parameter1: int;

        target = $u7.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        if target != null goto label1;

        return null;

     label1:
        target = $u7.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        targetWidget = target.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintWidget mOwner>;

        if $u8 != 0 goto label2;

        this = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.HorizontalWidgetRun horizontalRun>;

        goto label3;

     label2:
        this = targetWidget.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.analyzer.VerticalWidgetRun verticalRun>;

     label3:
        $u7 = $u7.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor mTarget>;

        targetType = $u7.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type mType>;

        $u4 = <androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$1: int[] $SwitchMap$androidx$constraintlayout$solver$widgets$ConstraintAnchor$Type>;

        $u8 = virtualinvoke targetType.<androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: int ordinal()>();

        $u8 = $u4[$u8];

        if $u8 == 1 goto label5;

        if $u8 == 2 goto label4;

        if $u8 == 3 goto label5;

        if $u8 == 5 goto label4;

        return null;

     label4:
        ret0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        return ret0;

     label5:
        ret0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        return ret0;
    }

    public long getWrapDimension()
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency $u0;
        boolean $u0#2;
        int $u0#4;
        long $u0#5;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u0#2 = $u0.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if $u0#2 == 0 goto label1;

        $u0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u0#4 = $u0.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        $u0#5 = (long) $u0#4;

        return $u0#5;

     label1:
        return 0L;
    }

    public boolean isCenterConnection()
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this, $u4;
        int connections, $u-1, i;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode count;
        java.util.List count#3;
        java.lang.Object $u-1#9;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        connections = 0;

        count = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        count#3 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        $u-1 = interfaceinvoke count#3.<java.util.List: int size()>();

        i = 0;

     label1:
        if i >= $u-1 goto label3;

        count = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        count#3 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        $u-1#9 = interfaceinvoke count#3.<java.util.List: java.lang.Object get(int)>(i);

        count = (androidx.constraintlayout.solver.widgets.analyzer.DependencyNode) $u-1#9;

        $u4 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun run>;

        if $u4 == this goto label2;

        connections = connections + 1;

     label2:
        i = i + 1;

        goto label1;

     label3:
        count = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        count#3 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        $u-1 = interfaceinvoke count#3.<java.util.List: int size()>();

        i = 0;

     label4:
        if i >= $u-1 goto label6;

        count = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        count#3 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: java.util.List targets>;

        $u-1#9 = interfaceinvoke count#3.<java.util.List: java.lang.Object get(int)>(i);

        count = (androidx.constraintlayout.solver.widgets.analyzer.DependencyNode) $u-1#9;

        $u4 = count.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun run>;

        if $u4 == this goto label5;

        connections = connections + 1;

     label5:
        i = i + 1;

        goto label4;

     label6:
        if connections < 2 goto label7;

        return 1;

     label7:
        return 0;
    }

    public boolean isDimensionResolved()
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency $u0;
        boolean ret0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        ret0 = $u0.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        return ret0;
    }

    public boolean isResolved()
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        boolean ret0;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        ret0 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: boolean resolved>;

        return ret0;
    }

    abstract void reset();

    abstract boolean supportsWrapComputation();

    public void update(androidx.constraintlayout.solver.widgets.analyzer.Dependency)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.Dependency $u1;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u1 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.Dependency;

        return;
    }

    protected void updateRunCenter(androidx.constraintlayout.solver.widgets.analyzer.Dependency, androidx.constraintlayout.solver.widgets.ConstraintAnchor, androidx.constraintlayout.solver.widgets.ConstraintAnchor, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.Dependency $u11;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $u12, $u13;
        int $u14, startPos#5, $u-1#6, $u-1#10, bias#21;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode $u-1, $u-1#2;
        boolean startPos;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency bias;
        androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour bias#16, availableDistance;
        androidx.constraintlayout.solver.widgets.ConstraintWidget bias#24;
        float $u-1#25, $u9, $u8;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u11 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.Dependency;

        $u12 := @parameter1: androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        $u13 := @parameter2: androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        $u14 := @parameter3: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode getTarget(androidx.constraintlayout.solver.widgets.ConstraintAnchor)>($u12);

        $u-1#2 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode getTarget(androidx.constraintlayout.solver.widgets.ConstraintAnchor)>($u13);

        startPos = $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: boolean resolved>;

        if startPos == 0 goto label8;

        startPos = $u-1#2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: boolean resolved>;

        if startPos != 0 goto label1;

        return;

     label1:
        startPos#5 = $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int value>;

        $u-1#6 = virtualinvoke $u12.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: int getMargin()>();

        startPos#5 = startPos#5 + $u-1#6;

        $u-1#6 = $u-1#2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int value>;

        $u-1#10 = virtualinvoke $u13.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: int getMargin()>();

        $u-1#6 = $u-1#6 - $u-1#10;

        $u-1#10 = $u-1#6 - startPos#5;

        bias = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        startPos = bias.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if startPos != 0 goto label2;

        bias#16 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour dimensionBehavior>;

        availableDistance = <androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour MATCH_CONSTRAINT>;

        if bias#16 != availableDistance goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: void resolveDimension(int,int)>($u14, $u-1#10);

     label2:
        bias = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        startPos = bias.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if startPos != 0 goto label3;

        return;

     label3:
        bias = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        bias#21 = bias.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        if bias#21 != $u-1#10 goto label4;

        $u-1 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void resolve(int)>(startPos#5);

        $u-1 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void resolve(int)>($u-1#6);

        return;

     label4:
        bias#24 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.ConstraintWidget widget>;

        if $u14 != 0 goto label5;

        $u-1#25 = virtualinvoke bias#24.<androidx.constraintlayout.solver.widgets.ConstraintWidget: float getHorizontalBiasPercent()>();

        goto label6;

     label5:
        $u-1#25 = virtualinvoke bias#24.<androidx.constraintlayout.solver.widgets.ConstraintWidget: float getVerticalBiasPercent()>();

     label6:
        if $u-1 != $u-1#2 goto label7;

        startPos#5 = $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int value>;

        $u-1#6 = $u-1#2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int value>;

        $u-1#25 = 0.5F;

     label7:
        $u14 = $u-1#6 - startPos#5;

        bias = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u-1#6 = bias.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        $u14 = $u14 - $u-1#6;

        $u-1 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        $u9 = (float) startPos#5;

        $u9 = $u9 + 0.5F;

        $u8 = (float) $u14;

        $u-1#25 = $u8 * $u-1#25;

        $u-1#25 = $u9 + $u-1#25;

        $u14 = (int) $u-1#25;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void resolve(int)>($u14);

        $u-1 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        $u-1#2 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        $u14 = $u-1#2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int value>;

        bias = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        startPos#5 = bias.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        $u14 = $u14 + startPos#5;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: void resolve(int)>($u14);

     label8:
        return;
    }

    protected void updateRunEnd(androidx.constraintlayout.solver.widgets.analyzer.Dependency)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.Dependency $u1;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u1 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.Dependency;

        return;
    }

    protected void updateRunStart(androidx.constraintlayout.solver.widgets.analyzer.Dependency)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        androidx.constraintlayout.solver.widgets.analyzer.Dependency $u1;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u1 := @parameter0: androidx.constraintlayout.solver.widgets.analyzer.Dependency;

        return;
    }

    public long wrapSize(int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.WidgetRun this;
        int $u5, size#4;
        boolean $u-1;
        androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency size;
        long size#5, $u2#12;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode $u2;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun;

        $u5 := @parameter0: int;

        size = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        $u-1 = size.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: boolean resolved>;

        if $u-1 == 0 goto label3;

        size = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency dimension>;

        size#4 = size.<androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency: int value>;

        size#5 = (long) size#4;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: boolean isCenterConnection()>();

        if $u-1 == 0 goto label1;

        $u2 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        $u5 = $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int margin>;

        $u2 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        size#4 = $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int margin>;

        $u5 = $u5 - size#4;

        $u2#12 = (long) $u5;

        size#5 = size#5 + $u2#12;

        return size#5;

     label1:
        if $u5 != 0 goto label2;

        $u2 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode start>;

        $u5 = $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int margin>;

        $u2#12 = (long) $u5;

        size#5 = size#5 + $u2#12;

        return size#5;

     label2:
        $u2 = this.<androidx.constraintlayout.solver.widgets.analyzer.WidgetRun: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode end>;

        $u5 = $u2.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode: int margin>;

        $u2#12 = (long) $u5;

        size#5 = size#5 - $u2#12;

        return size#5;

     label3:
        return 0L;
    }
}
