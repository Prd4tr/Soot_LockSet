final enum class androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type extends java.lang.Enum
{
    private static final androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] $VALUES;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type BASELINE;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type BOTTOM;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type HORIZONTAL_DIMENSION;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type LEFT;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type RIGHT;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type TOP;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type UNKNOWN;
    public static final enum androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type VERTICAL_DIMENSION;

    static void <clinit>()
    {
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type $u10, $u0;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] $u1;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("UNKNOWN", 0);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type UNKNOWN> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("HORIZONTAL_DIMENSION", 1);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type HORIZONTAL_DIMENSION> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("VERTICAL_DIMENSION", 2);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type VERTICAL_DIMENSION> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("LEFT", 3);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type LEFT> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("RIGHT", 4);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type RIGHT> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("TOP", 5);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type TOP> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("BOTTOM", 6);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type BOTTOM> = $u0;

        $u0 = new androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        specialinvoke $u0.<androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: void <init>(java.lang.String,int)>("BASELINE", 7);

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type BASELINE> = $u0;

        $u1 = newarray (androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type)[8];

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type UNKNOWN>;

        $u1[0] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type HORIZONTAL_DIMENSION>;

        $u1[1] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type VERTICAL_DIMENSION>;

        $u1[2] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type LEFT>;

        $u1[3] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type RIGHT>;

        $u1[4] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type TOP>;

        $u1[5] = $u10;

        $u10 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type BOTTOM>;

        $u1[6] = $u10;

        $u1[7] = $u0;

        <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] $VALUES> = $u1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type this;
        java.lang.String $u1;
        int $u2;

        this := @this: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type;

        $u1 := @parameter0: java.lang.String;

        $u2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>($u1, $u2);

        return;
    }

    public static androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type valueOf(java.lang.String)
    {
        java.lang.String $u1;
        java.lang.Enum $u-1;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type $u0;

        $u1 := @parameter0: java.lang.String;

        $u-1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode$Type;", $u1);

        $u0 = (androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type) $u-1;

        return $u0;
    }

    public static androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] values()
    {
        java.lang.Object $u-1;
        androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] $u0;

        $u0 = <androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] $VALUES>;

        $u-1 = virtualinvoke $u0.<java.lang.Object: java.lang.Object clone()>();

        $u0 = (androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[]) $u-1;

        return $u0;
    }
}
