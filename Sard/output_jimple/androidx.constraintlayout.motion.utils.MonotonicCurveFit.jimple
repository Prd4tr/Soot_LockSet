public class androidx.constraintlayout.motion.utils.MonotonicCurveFit extends androidx.constraintlayout.motion.utils.CurveFit
{
    private static final java.lang.String TAG;
    private double[] mT;
    private double[][] mTangent;
    private double[][] mY;

    public void <init>(double[], double[][])
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double[] $u24, dim, b;
        double[][] $u25, slope#11, tangent;
        int N, dim#4, slope, i, dt#18;
        int[] dt;
        java.lang.Object $u-1;
        double dt#20, $u11, $u15, $u21;
        byte dt#54;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u24 := @parameter0: double[];

        $u25 := @parameter1: double[][];

        specialinvoke this.<androidx.constraintlayout.motion.utils.CurveFit: void <init>()>();

        N = lengthof $u24;

        dim = $u25[0];

        dim#4 = lengthof dim;

        slope = N + -1;

        dt = newarray (int)[2];

        dt[1] = dim#4;

        dt[0] = slope;

        $u-1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "D", dt);

        slope#11 = (double[][]) $u-1;

        dt = newarray (int)[2];

        dt[1] = dim#4;

        dt[0] = N;

        $u-1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "D", dt);

        tangent = (double[][]) $u-1;

        slope = 0;

     label01:
        if slope >= dim#4 goto label06;

        i = 0;

     label02:
        dt#18 = N + -1;

        if i >= dt#18 goto label05;

        dt#18 = i + 1;

        dt#20 = $u24[dt#18];

        $u11 = $u24[i];

        dt#20 = dt#20 - $u11;

        dim = slope#11[i];

        dt#18 = i + 1;

        b = $u25[dt#18];

        $u11 = b[slope];

        b = $u25[i];

        $u15 = b[slope];

        $u11 = $u11 - $u15;

        dt#20 = $u11 / dt#20;

        dim[slope] = dt#20;

        if i != 0 goto label03;

        dim = tangent[i];

        b = slope#11[i];

        dt#20 = b[slope];

        dim[slope] = dt#20;

        goto label04;

     label03:
        dim = tangent[i];

        dt#18 = i + -1;

        b = slope#11[dt#18];

        dt#20 = b[slope];

        b = slope#11[i];

        $u11 = b[slope];

        dt#20 = dt#20 + $u11;

        dt#20 = dt#20 * 0.5;

        dim[slope] = dt#20;

     label04:
        i = i + 1;

        goto label02;

     label05:
        i = N + -1;

        dim = tangent[i];

        i = N + -2;

        b = slope#11[i];

        dt#20 = b[slope];

        dim[slope] = dt#20;

        slope = slope + 1;

        goto label01;

     label06:
        slope = 0;

     label07:
        i = N + -1;

        if slope >= i goto label12;

        i = 0;

     label08:
        if i >= dim#4 goto label11;

        dim = slope#11[slope];

        dt#20 = dim[i];

        dt#54 = dt#20 cmpl 0.0;

        if dt#54 != 0 goto label09;

        dim = tangent[slope];

        dim[i] = 0.0;

        dt#18 = slope + 1;

        dim = tangent[dt#18];

        dim[i] = 0.0;

        goto label10;

     label09:
        dim = tangent[slope];

        dt#20 = dim[i];

        dim = slope#11[slope];

        $u11 = dim[i];

        $u11 = dt#20 / $u11;

        dt#18 = slope + 1;

        dim = tangent[dt#18];

        dt#20 = dim[i];

        dim = slope#11[slope];

        $u15 = dim[i];

        dt#20 = dt#20 / $u15;

        $u15 = staticinvoke <java.lang.Math: double hypot(double,double)>($u11, dt#20);

        dt#54 = $u15 cmpl 9.0;

        if dt#54 <= 0 goto label10;

        $u15 = 3.0 / $u15;

        dim = tangent[slope];

        $u11 = $u15 * $u11;

        b = slope#11[slope];

        $u21 = b[i];

        $u11 = $u11 * $u21;

        dim[i] = $u11;

        dt#18 = slope + 1;

        dim = tangent[dt#18];

        dt#20 = $u15 * dt#20;

        b = slope#11[slope];

        $u11 = b[i];

        dt#20 = dt#20 * $u11;

        dim[i] = dt#20;

     label10:
        i = i + 1;

        goto label08;

     label11:
        slope = slope + 1;

        goto label07;

     label12:
        this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT> = $u24;

        this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY> = $u25;

        this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent> = tangent;

        return;
    }

    private static double diff(double, double, double, double, double, double)
    {
        double $u8, $u10, $u12, $u14, $u16, $u18, x2, $u2, $u6;

        $u8 := @parameter0: double;

        $u10 := @parameter1: double;

        $u12 := @parameter2: double;

        $u14 := @parameter3: double;

        $u16 := @parameter4: double;

        $u18 := @parameter5: double;

        x2 = $u10 * $u10;

        $u2 = -6.0 * x2;

        $u2 = $u2 * $u14;

        $u6 = $u10 * 6.0;

        $u14 = $u6 * $u14;

        $u14 = $u2 + $u14;

        $u2 = x2 * 6.0;

        $u2 = $u2 * $u12;

        $u14 = $u14 + $u2;

        $u2 = 6.0 * $u10;

        $u12 = $u2 * $u12;

        $u12 = $u14 - $u12;

        $u14 = $u8 * 3.0;

        $u14 = $u14 * $u18;

        $u14 = $u14 * x2;

        $u12 = $u12 + $u14;

        $u14 = 3.0 * $u8;

        $u14 = $u14 * $u16;

        $u14 = $u14 * x2;

        $u12 = $u12 + $u14;

        $u14 = 2.0 * $u8;

        $u14 = $u14 * $u18;

        $u14 = $u14 * $u10;

        $u12 = $u12 - $u14;

        $u14 = 4.0 * $u8;

        $u14 = $u14 * $u16;

        $u10 = $u14 * $u10;

        $u10 = $u12 - $u10;

        $u8 = $u8 * $u16;

        $u8 = $u10 + $u8;

        return $u8;
    }

    private static double interpolate(double, double, double, double, double, double)
    {
        double $u12, $u14, $u16, $u18, $u20, $u22, x2, x3, $u4, $u8;

        $u12 := @parameter0: double;

        $u14 := @parameter1: double;

        $u16 := @parameter2: double;

        $u18 := @parameter3: double;

        $u20 := @parameter4: double;

        $u22 := @parameter5: double;

        x2 = $u14 * $u14;

        x3 = x2 * $u14;

        $u4 = -2.0 * x3;

        $u4 = $u4 * $u18;

        $u8 = x2 * 3.0;

        $u18 = $u8 * $u18;

        $u18 = $u4 + $u18;

        $u4 = x3 * 2.0;

        $u4 = $u4 * $u16;

        $u18 = $u18 + $u4;

        $u4 = 3.0 * x2;

        $u4 = $u4 * $u16;

        $u18 = $u18 - $u4;

        $u16 = $u18 + $u16;

        $u18 = $u12 * $u22;

        $u18 = $u18 * x3;

        $u16 = $u16 + $u18;

        $u18 = $u12 * $u20;

        $u18 = $u18 * x3;

        $u16 = $u16 + $u18;

        $u18 = $u12 * $u22;

        $u18 = $u18 * x2;

        $u16 = $u16 - $u18;

        $u18 = $u12 * 2.0;

        $u18 = $u18 * $u20;

        $u18 = $u18 * x2;

        $u16 = $u16 - $u18;

        $u12 = $u12 * $u20;

        $u12 = $u12 * $u14;

        $u12 = $u16 + $u12;

        return $u12;
    }

    public double getPos(double, int)
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double $u29, y2, t1, t2, h, x#32;
        int $u31, n, $u3, $u3#16;
        double[] i;
        byte x;
        double[][] i#5;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u29 := @parameter0: double;

        $u31 := @parameter1: int;

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        n = lengthof i;

        h = i[0];

        x = $u29 cmpg h;

        if x > 0 goto label1;

        i#5 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        i = i#5[0];

        $u29 = i[$u31];

        return $u29;

     label1:
        $u3 = n + -1;

        h = i[$u3];

        x = $u29 cmpl h;

        if x < 0 goto label2;

        i#5 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        $u3 = n + -1;

        i = i#5[$u3];

        $u29 = i[$u31];

        return $u29;

     label2:
        $u3 = 0;

     label3:
        $u3#16 = n + -1;

        if $u3 >= $u3#16 goto label6;

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        h = i[$u3];

        x = $u29 cmpl h;

        if x != 0 goto label4;

        i#5 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        i = i#5[$u3];

        $u29 = i[$u31];

        return $u29;

     label4:
        $u3#16 = $u3 + 1;

        h = i[$u3#16];

        x = $u29 cmpg h;

        if x >= 0 goto label5;

        n = $u3 + 1;

        h = i[n];

        y2 = i[$u3];

        h = h - y2;

        y2 = i[$u3];

        $u29 = $u29 - y2;

        x#32 = $u29 / h;

        i#5 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        i = i#5[$u3];

        $u29 = i[$u31];

        n = $u3 + 1;

        i = i#5[n];

        y2 = i[$u31];

        i#5 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        i = i#5[$u3];

        t1 = i[$u31];

        $u3 = $u3 + 1;

        i = i#5[$u3];

        t2 = i[$u31];

        $u29 = staticinvoke <androidx.constraintlayout.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(h, x#32, $u29, y2, t1, t2);

        return $u29;

     label5:
        $u3 = $u3 + 1;

        goto label3;

     label6:
        return 0.0;
    }

    public void getPos(double, double[])
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double $u30, y1, y2, t1, t2, h;
        double[] $u32, j, dim#4;
        int n, dim#5, j#8, h#17;
        double[][] dim;
        byte x;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u30 := @parameter0: double;

        $u32 := @parameter1: double[];

        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        n = lengthof j;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        dim#4 = dim[0];

        dim#5 = lengthof dim#4;

        h = j[0];

        x = $u30 cmpg h;

        if x > 0 goto label03;

        j#8 = 0;

     label01:
        if j#8 >= dim#5 goto label02;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[0];

        $u30 = j[j#8];

        $u32[j#8] = $u30;

        j#8 = j#8 + 1;

        goto label01;

     label02:
        return;

     label03:
        j#8 = n + -1;

        h = j[j#8];

        x = $u30 cmpl h;

        if x < 0 goto label06;

        j#8 = 0;

     label04:
        if j#8 >= dim#5 goto label05;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        h#17 = n + -1;

        j = dim[h#17];

        $u30 = j[j#8];

        $u32[j#8] = $u30;

        j#8 = j#8 + 1;

        goto label04;

     label05:
        return;

     label06:
        j#8 = 0;

     label07:
        h#17 = n + -1;

        if j#8 >= h#17 goto label13;

        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        h = j[j#8];

        x = $u30 cmpl h;

        if x != 0 goto label09;

        h#17 = 0;

     label08:
        if h#17 >= dim#5 goto label09;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[j#8];

        h = j[h#17];

        $u32[h#17] = h;

        h#17 = h#17 + 1;

        goto label08;

     label09:
        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        h#17 = j#8 + 1;

        h = j[h#17];

        x = $u30 cmpg h;

        if x >= 0 goto label12;

        n = j#8 + 1;

        h = j[n];

        y1 = j[j#8];

        h = h - y1;

        y1 = j[j#8];

        $u30 = $u30 - y1;

        $u30 = $u30 / h;

        n = 0;

     label10:
        if n >= dim#5 goto label11;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[j#8];

        y1 = j[n];

        h#17 = j#8 + 1;

        j = dim[h#17];

        y2 = j[n];

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        j = dim[j#8];

        t1 = j[n];

        h#17 = j#8 + 1;

        j = dim[h#17];

        t2 = j[n];

        y1 = staticinvoke <androidx.constraintlayout.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(h, $u30, y1, y2, t1, t2);

        $u32[n] = y1;

        n = n + 1;

        goto label10;

     label11:
        return;

     label12:
        j#8 = j#8 + 1;

        goto label07;

     label13:
        return;
    }

    public void getPos(double, float[])
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double $u30, y1, y2, t1, t2, h;
        float[] $u32;
        int n, dim#5, j#8, h#18;
        double[] j, dim#4;
        double[][] dim;
        byte x;
        float h#12;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u30 := @parameter0: double;

        $u32 := @parameter1: float[];

        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        n = lengthof j;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        dim#4 = dim[0];

        dim#5 = lengthof dim#4;

        h = j[0];

        x = $u30 cmpg h;

        if x > 0 goto label03;

        j#8 = 0;

     label01:
        if j#8 >= dim#5 goto label02;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[0];

        $u30 = j[j#8];

        h#12 = (float) $u30;

        $u32[j#8] = h#12;

        j#8 = j#8 + 1;

        goto label01;

     label02:
        return;

     label03:
        j#8 = n + -1;

        h = j[j#8];

        x = $u30 cmpl h;

        if x < 0 goto label06;

        j#8 = 0;

     label04:
        if j#8 >= dim#5 goto label05;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        h#18 = n + -1;

        j = dim[h#18];

        $u30 = j[j#8];

        h#12 = (float) $u30;

        $u32[j#8] = h#12;

        j#8 = j#8 + 1;

        goto label04;

     label05:
        return;

     label06:
        j#8 = 0;

     label07:
        h#18 = n + -1;

        if j#8 >= h#18 goto label13;

        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        h = j[j#8];

        x = $u30 cmpl h;

        if x != 0 goto label09;

        h#18 = 0;

     label08:
        if h#18 >= dim#5 goto label09;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[j#8];

        h = j[h#18];

        h#12 = (float) h;

        $u32[h#18] = h#12;

        h#18 = h#18 + 1;

        goto label08;

     label09:
        j = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        h#18 = j#8 + 1;

        h = j[h#18];

        x = $u30 cmpg h;

        if x >= 0 goto label12;

        n = j#8 + 1;

        h = j[n];

        y1 = j[j#8];

        h = h - y1;

        y1 = j[j#8];

        $u30 = $u30 - y1;

        $u30 = $u30 / h;

        n = 0;

     label10:
        if n >= dim#5 goto label11;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        j = dim[j#8];

        y1 = j[n];

        h#18 = j#8 + 1;

        j = dim[h#18];

        y2 = j[n];

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        j = dim[j#8];

        t1 = j[n];

        h#18 = j#8 + 1;

        j = dim[h#18];

        t2 = j[n];

        y1 = staticinvoke <androidx.constraintlayout.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(h, $u30, y1, y2, t1, t2);

        h#12 = (float) y1;

        $u32[n] = h#12;

        n = n + 1;

        goto label10;

     label11:
        return;

     label12:
        j#8 = j#8 + 1;

        goto label07;

     label13:
        return;
    }

    public double getSlope(double, int)
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double $u31, $u4, y2, t1, t2, x;
        int $u33, n, t, $u5;
        double[] i;
        byte h;
        double[][] $u5#22;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u31 := @parameter0: double;

        $u33 := @parameter1: int;

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        n = lengthof i;

        $u4 = i[0];

        h = $u31 cmpg $u4;

        if h >= 0 goto label1;

        $u4 = i[0];

        goto label3;

     label1:
        t = n + -1;

        $u4 = i[t];

        h = $u31 cmpl $u4;

        if h < 0 goto label2;

        t = n + -1;

        $u4 = i[t];

        goto label3;

     label2:
        $u4 = $u31;

     label3:
        t = 0;

     label4:
        $u5 = n + -1;

        if t >= $u5 goto label6;

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        $u5 = t + 1;

        $u31 = i[$u5];

        h = $u4 cmpg $u31;

        if h > 0 goto label5;

        n = t + 1;

        $u31 = i[n];

        y2 = i[t];

        $u31 = $u31 - y2;

        y2 = i[t];

        $u4 = $u4 - y2;

        x = $u4 / $u31;

        $u5#22 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        i = $u5#22[t];

        $u4 = i[$u33];

        n = t + 1;

        i = $u5#22[n];

        y2 = i[$u33];

        $u5#22 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        i = $u5#22[t];

        t1 = i[$u33];

        n = t + 1;

        i = $u5#22[n];

        t2 = i[$u33];

        $u4 = staticinvoke <androidx.constraintlayout.motion.utils.MonotonicCurveFit: double diff(double,double,double,double,double,double)>($u31, x, $u4, y2, t1, t2);

        $u31 = $u4 / $u31;

        return $u31;

     label5:
        t = t + 1;

        goto label4;

     label6:
        return 0.0;
    }

    public void getSlope(double, double[])
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double $u32, $u5, y1, y2, t1, t2;
        double[] $u34, i, dim#4;
        int n, dim#5, t, j;
        double[][] dim;
        byte h;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        $u32 := @parameter0: double;

        $u34 := @parameter1: double[];

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        n = lengthof i;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        dim#4 = dim[0];

        dim#5 = lengthof dim#4;

        $u5 = i[0];

        h = $u32 cmpg $u5;

        if h > 0 goto label1;

        $u5 = i[0];

        goto label3;

     label1:
        t = n + -1;

        $u5 = i[t];

        h = $u32 cmpl $u5;

        if h < 0 goto label2;

        t = n + -1;

        $u5 = i[t];

        goto label3;

     label2:
        $u5 = $u32;

     label3:
        t = 0;

     label4:
        j = n + -1;

        if t >= j goto label8;

        i = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        j = t + 1;

        $u32 = i[j];

        h = $u5 cmpg $u32;

        if h > 0 goto label7;

        n = t + 1;

        $u32 = i[n];

        y1 = i[t];

        $u32 = $u32 - y1;

        y1 = i[t];

        $u5 = $u5 - y1;

        $u5 = $u5 / $u32;

        n = 0;

     label5:
        if n >= dim#5 goto label6;

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mY>;

        i = dim[t];

        y1 = i[n];

        j = t + 1;

        i = dim[j];

        y2 = i[n];

        dim = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        i = dim[t];

        t1 = i[n];

        j = t + 1;

        i = dim[j];

        t2 = i[n];

        y1 = staticinvoke <androidx.constraintlayout.motion.utils.MonotonicCurveFit: double diff(double,double,double,double,double,double)>($u32, $u5, y1, y2, t1, t2);

        y1 = y1 / $u32;

        $u34[n] = y1;

        n = n + 1;

        goto label5;

     label6:
        return;

     label7:
        t = t + 1;

        goto label4;

     label8:
        return;
    }

    public double[] getTimePoints()
    {
        androidx.constraintlayout.motion.utils.MonotonicCurveFit this;
        double[] ret0;

        this := @this: androidx.constraintlayout.motion.utils.MonotonicCurveFit;

        ret0 = this.<androidx.constraintlayout.motion.utils.MonotonicCurveFit: double[] mT>;

        return ret0;
    }

    public static void <clinit>()
    {
        <androidx.constraintlayout.motion.utils.MonotonicCurveFit: java.lang.String TAG> = "MonotonicCurveFit";

        return;
    }
}
