public class androidx.appcompat.widget.LinearLayoutCompat extends android.view.ViewGroup
{
    private static final java.lang.String ACCESSIBILITY_CLASS_NAME;
    public static final int HORIZONTAL;
    private static final int INDEX_BOTTOM;
    private static final int INDEX_CENTER_VERTICAL;
    private static final int INDEX_FILL;
    private static final int INDEX_TOP;
    public static final int SHOW_DIVIDER_BEGINNING;
    public static final int SHOW_DIVIDER_END;
    public static final int SHOW_DIVIDER_MIDDLE;
    public static final int SHOW_DIVIDER_NONE;
    public static final int VERTICAL;
    private static final int VERTICAL_GRAVITY_COUNT;
    private boolean mBaselineAligned;
    private int mBaselineAlignedChildIndex;
    private int mBaselineChildTop;
    private android.graphics.drawable.Drawable mDivider;
    private int mDividerHeight;
    private int mDividerPadding;
    private int mDividerWidth;
    private int mGravity;
    private int[] mMaxAscent;
    private int[] mMaxDescent;
    private int mOrientation;
    private int mShowDividers;
    private int mTotalLength;
    private boolean mUseLargestChild;
    private float mWeightSum;

    public void <init>(android.content.Context)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.content.Context $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.content.Context;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void <init>(android.content.Context,android.util.AttributeSet)>($u2, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.content.Context $u2;
        android.util.AttributeSet $u3;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.content.Context;

        $u3 := @parameter1: android.util.AttributeSet;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void <init>(android.content.Context,android.util.AttributeSet,int)>($u2, $u3, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.content.Context $u12;
        android.util.AttributeSet $u13;
        int $u14;
        int[] a;
        androidx.appcompat.widget.TintTypedArray $u-1;
        android.content.res.TypedArray $u-1#8;
        boolean $u-1#18;
        float $u-1#22;
        android.graphics.drawable.Drawable $u-1#31;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u12 := @parameter0: android.content.Context;

        $u13 := @parameter1: android.util.AttributeSet;

        $u14 := @parameter2: int;

        specialinvoke this.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>($u12, $u13, $u14);

        this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mBaselineAligned> = 1;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex> = -1;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineChildTop> = 0;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity> = 8388659;

        a = <androidx.appcompat.R$styleable: int[] LinearLayoutCompat>;

        $u-1 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>($u12, $u13, a, $u14, 0);

        a = <androidx.appcompat.R$styleable: int[] LinearLayoutCompat>;

        $u-1#8 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: android.content.res.TypedArray getWrappedTypeArray()>();

        staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(this, $u12, a, $u13, $u-1#8, $u14, 0);

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_android_orientation>;

        $u14 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($u14, -1);

        if $u14 < 0 goto label1;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)>($u14);

     label1:
        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_android_gravity>;

        $u14 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($u14, -1);

        if $u14 < 0 goto label2;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)>($u14);

     label2:
        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_android_baselineAligned>;

        $u-1#18 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: boolean getBoolean(int,boolean)>($u14, 1);

        if $u-1#18 != 0 goto label3;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)>($u-1#18);

     label3:
        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_android_weightSum>;

        $u-1#22 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: float getFloat(int,float)>($u14, -1.0F);

        this.<androidx.appcompat.widget.LinearLayoutCompat: float mWeightSum> = $u-1#22;

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_android_baselineAlignedChildIndex>;

        $u14 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($u14, -1);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex> = $u14;

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_measureWithLargestChild>;

        $u-1#18 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: boolean getBoolean(int,boolean)>($u14, 0);

        this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mUseLargestChild> = $u-1#18;

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_divider>;

        $u-1#31 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawable(int)>($u14);

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)>($u-1#31);

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_showDividers>;

        $u14 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($u14, 0);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers> = $u14;

        $u14 = <androidx.appcompat.R$styleable: int LinearLayoutCompat_dividerPadding>;

        $u14 = virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: int getDimensionPixelSize(int,int)>($u14, 0);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding> = $u14;

        virtualinvoke $u-1.<androidx.appcompat.widget.TintTypedArray: void recycle()>();

        return;
    }

    private void forceUniformHeight(int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u12, $u13, oldWidth, $u-1, i, $u-1#17;
        android.view.View $u-1#7;
        android.view.ViewGroup$LayoutParams $u-1#11;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams lp;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u12 := @parameter0: int;

        $u13 := @parameter1: int;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getMeasuredHeight()>();

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($u-1, 1073741824);

        i = 0;

     label1:
        if i >= $u12 goto label3;

        $u-1#7 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(i);

        oldWidth = virtualinvoke $u-1#7.<android.view.View: int getVisibility()>();

        if oldWidth == 8 goto label2;

        $u-1#11 = virtualinvoke $u-1#7.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#11;

        oldWidth = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if oldWidth != -1 goto label2;

        oldWidth = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        $u-1#17 = virtualinvoke $u-1#7.<android.view.View: int getMeasuredWidth()>();

        lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width> = $u-1#17;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureChildWithMargins(android.view.View,int,int,int,int)>($u-1#7, $u13, 0, $u-1, 0);

        lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width> = oldWidth;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    private void forceUniformWidth(int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u12, $u13, oldHeight, $u-1, i, $u-1#17;
        android.view.View $u-1#7;
        android.view.ViewGroup$LayoutParams $u-1#11;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams lp;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u12 := @parameter0: int;

        $u13 := @parameter1: int;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getMeasuredWidth()>();

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($u-1, 1073741824);

        i = 0;

     label1:
        if i >= $u12 goto label3;

        $u-1#7 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(i);

        oldHeight = virtualinvoke $u-1#7.<android.view.View: int getVisibility()>();

        if oldHeight == 8 goto label2;

        $u-1#11 = virtualinvoke $u-1#7.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#11;

        oldHeight = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if oldHeight != -1 goto label2;

        oldHeight = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        $u-1#17 = virtualinvoke $u-1#7.<android.view.View: int getMeasuredHeight()>();

        lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height> = $u-1#17;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureChildWithMargins(android.view.View,int,int,int,int)>($u-1#7, $u-1, 0, $u13, 0);

        lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height> = oldHeight;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    private void setChildFrame(android.view.View, int, int, int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.View $u3;
        int $u4, $u5, $u6, $u7;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: int;

        $u7 := @parameter4: int;

        $u6 = $u4 + $u6;

        $u7 = $u5 + $u7;

        virtualinvoke $u3.<android.view.View: void layout(int,int,int,int)>($u4, $u5, $u6, $u7);

        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.ViewGroup$LayoutParams $u2;
        boolean $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.ViewGroup$LayoutParams;

        $u0 = $u2 instanceof androidx.appcompat.widget.LinearLayoutCompat$LayoutParams;

        return $u0;
    }

    void drawDividersHorizontal(android.graphics.Canvas)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.Canvas $u8;
        int $u-1, i, $u-1#6, $u6;
        boolean $u-1#2, $u-1#9;
        android.view.View $u-1#4;
        android.view.ViewGroup$LayoutParams $u-1#11;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams lp;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u8 := @parameter0: android.graphics.Canvas;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        $u-1#2 = staticinvoke <androidx.appcompat.widget.ViewUtils: boolean isLayoutRtl(android.view.View)>(this);

        i = 0;

     label01:
        if i >= $u-1 goto label05;

        $u-1#4 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(i);

        if $u-1#4 == null goto label04;

        $u-1#6 = virtualinvoke $u-1#4.<android.view.View: int getVisibility()>();

        if $u-1#6 == 8 goto label04;

        $u-1#9 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>(i);

        if $u-1#9 == 0 goto label04;

        $u-1#11 = virtualinvoke $u-1#4.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#11;

        if $u-1#2 == 0 goto label02;

        $u-1#6 = virtualinvoke $u-1#4.<android.view.View: int getRight()>();

        $u6 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        $u-1#6 = $u-1#6 + $u6;

        goto label03;

     label02:
        $u-1#6 = virtualinvoke $u-1#4.<android.view.View: int getLeft()>();

        $u6 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        $u-1#6 = $u-1#6 - $u6;

        $u6 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        $u-1#6 = $u-1#6 - $u6;

     label03:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawVerticalDivider(android.graphics.Canvas,int)>($u8, $u-1#6);

     label04:
        i = i + 1;

        goto label01;

     label05:
        $u-1#9 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>($u-1);

        if $u-1#9 == 0 goto label10;

        $u-1 = $u-1 + -1;

        $u-1#4 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u-1);

        if $u-1#4 != null goto label07;

        if $u-1#2 == 0 goto label06;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        goto label09;

     label06:
        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getWidth()>();

        i = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        $u-1 = $u-1 - i;

        i = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        $u-1 = $u-1 - i;

        goto label09;

     label07:
        $u-1#11 = virtualinvoke $u-1#4.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#11;

        if $u-1#2 == 0 goto label08;

        $u-1 = virtualinvoke $u-1#4.<android.view.View: int getLeft()>();

        i = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        $u-1 = $u-1 - i;

        i = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        $u-1 = $u-1 - i;

        goto label09;

     label08:
        $u-1 = virtualinvoke $u-1#4.<android.view.View: int getRight()>();

        i = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        $u-1 = $u-1 + i;

     label09:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawVerticalDivider(android.graphics.Canvas,int)>($u8, $u-1);

     label10:
        return;
    }

    void drawDividersVertical(android.graphics.Canvas)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.Canvas $u7;
        int $u-1, i, $u-1#5, $u5;
        android.view.View $u-1#3;
        boolean $u-1#8;
        android.view.ViewGroup$LayoutParams $u-1#10;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams lp;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u7 := @parameter0: android.graphics.Canvas;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        i = 0;

     label1:
        if i >= $u-1 goto label3;

        $u-1#3 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(i);

        if $u-1#3 == null goto label2;

        $u-1#5 = virtualinvoke $u-1#3.<android.view.View: int getVisibility()>();

        if $u-1#5 == 8 goto label2;

        $u-1#8 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>(i);

        if $u-1#8 == 0 goto label2;

        $u-1#10 = virtualinvoke $u-1#3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#10;

        $u-1#5 = virtualinvoke $u-1#3.<android.view.View: int getTop()>();

        $u5 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        $u-1#5 = $u-1#5 - $u5;

        $u5 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        $u-1#5 = $u-1#5 - $u5;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawHorizontalDivider(android.graphics.Canvas,int)>($u7, $u-1#5);

     label2:
        i = i + 1;

        goto label1;

     label3:
        $u-1#8 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>($u-1);

        if $u-1#8 == 0 goto label6;

        $u-1 = $u-1 + -1;

        $u-1#3 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u-1);

        if $u-1#3 != null goto label4;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getHeight()>();

        i = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        $u-1 = $u-1 - i;

        i = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        $u-1 = $u-1 - i;

        goto label5;

     label4:
        $u-1#10 = virtualinvoke $u-1#3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#10;

        $u-1 = virtualinvoke $u-1#3.<android.view.View: int getBottom()>();

        i = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        $u-1 = $u-1 + i;

     label5:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawHorizontalDivider(android.graphics.Canvas,int)>($u7, $u-1);

     label6:
        return;
    }

    void drawHorizontalDivider(android.graphics.Canvas, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.Canvas $u5;
        int $u6, $u-1, $u2, $u-1#8;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u5 := @parameter0: android.graphics.Canvas;

        $u6 := @parameter1: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        $u2 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding>;

        $u-1 = $u-1 + $u2;

        $u2 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getWidth()>();

        $u-1#8 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        $u2 = $u2 - $u-1#8;

        $u-1#8 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding>;

        $u2 = $u2 - $u-1#8;

        $u-1#8 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        $u-1#8 = $u-1#8 + $u6;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($u-1, $u6, $u2, $u-1#8);

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($u5);

        return;
    }

    void drawVerticalDivider(android.graphics.Canvas, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.Canvas $u6;
        int $u7, $u-1, $u2, $u-1#8, $u-1#10;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u6 := @parameter0: android.graphics.Canvas;

        $u7 := @parameter1: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        $u2 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding>;

        $u-1 = $u-1 + $u2;

        $u2 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        $u2 = $u2 + $u7;

        $u-1#8 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getHeight()>();

        $u-1#10 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        $u-1#8 = $u-1#8 - $u-1#10;

        $u-1#10 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding>;

        $u-1#8 = $u-1#8 - $u-1#10;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($u7, $u-1, $u2, $u-1#8);

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($u6);

        return;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u-1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateDefaultLayoutParams()>();

        return $u-1;
    }

    protected androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateDefaultLayoutParams()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u0;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u0#2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if $u0 != 0 goto label1;

        $u0#2 = new androidx.appcompat.widget.LinearLayoutCompat$LayoutParams;

        specialinvoke $u0#2.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: void <init>(int,int)>(-2, -2);

        return $u0#2;

     label1:
        if $u0 != 1 goto label2;

        $u0#2 = new androidx.appcompat.widget.LinearLayoutCompat$LayoutParams;

        specialinvoke $u0#2.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: void <init>(int,int)>(-1, -2);

        return $u0#2;

     label2:
        return null;
    }

    public volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u-1;
        android.util.AttributeSet $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u1 := @parameter0: android.util.AttributeSet;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.util.AttributeSet)>($u1);

        return $u-1;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u-1;
        android.view.ViewGroup$LayoutParams $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>($u1);

        return $u-1;
    }

    public androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.util.AttributeSet $u3;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u0;
        android.content.Context $u-1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: android.util.AttributeSet;

        $u0 = new androidx.appcompat.widget.LinearLayoutCompat$LayoutParams;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.content.Context getContext()>();

        specialinvoke $u0.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($u-1, $u3);

        return $u0;
    }

    protected androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.ViewGroup$LayoutParams $u2;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.ViewGroup$LayoutParams;

        $u0 = new androidx.appcompat.widget.LinearLayoutCompat$LayoutParams;

        specialinvoke $u0.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($u2);

        return $u0;
    }

    public int getBaseline()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int child, childBaseline, majorGravity, $u-1#34;
        android.view.View $u-1;
        java.lang.RuntimeException childTop;
        android.view.ViewGroup$LayoutParams $u-1#46;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams majorGravity#48;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        child = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex>;

        if child >= 0 goto label1;

        child = specialinvoke this.<android.view.ViewGroup: int getBaseline()>();

        return child;

     label1:
        child = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildCount()>();

        childBaseline = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex>;

        if child <= childBaseline goto label7;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getChildAt(int)>(childBaseline);

        child = virtualinvoke $u-1.<android.view.View: int getBaseline()>();

        if child != -1 goto label3;

        child = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex>;

        if child != 0 goto label2;

        return -1;

     label2:
        childTop = new java.lang.RuntimeException;

        specialinvoke childTop.<java.lang.RuntimeException: void <init>(java.lang.String)>("mBaselineAlignedChildIndex of LinearLayout points to a View that doesn\'t know how to get its baseline.");

        throw childTop;

     label3:
        childBaseline = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineChildTop>;

        majorGravity = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if majorGravity != 1 goto label6;

        majorGravity = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        majorGravity = majorGravity & 112;

        if majorGravity == 48 goto label6;

        if majorGravity == 16 goto label5;

        if majorGravity == 80 goto label4;

        goto label6;

     label4:
        childBaseline = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getBottom()>();

        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getTop()>();

        childBaseline = childBaseline - majorGravity;

        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        childBaseline = childBaseline - majorGravity;

        majorGravity = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childBaseline = childBaseline - majorGravity;

        goto label6;

     label5:
        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getBottom()>();

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getTop()>();

        majorGravity = majorGravity - $u-1#34;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        majorGravity = majorGravity - $u-1#34;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        majorGravity = majorGravity - $u-1#34;

        $u-1#34 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        majorGravity = majorGravity - $u-1#34;

        majorGravity = majorGravity / 2;

        childBaseline = childBaseline + majorGravity;

     label6:
        $u-1#46 = virtualinvoke $u-1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        majorGravity#48 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#46;

        majorGravity = majorGravity#48.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        childBaseline = majorGravity + childBaseline;

        child = childBaseline + child;

        return child;

     label7:
        childTop = new java.lang.RuntimeException;

        specialinvoke childTop.<java.lang.RuntimeException: void <init>(java.lang.String)>("mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");

        throw childTop;
    }

    public int getBaselineAlignedChildIndex()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex>;

        return ret0;
    }

    int getChildrenSkipCount(android.view.View, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.View $u2;
        int $u3;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        return 0;
    }

    public android.graphics.drawable.Drawable getDividerDrawable()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.drawable.Drawable ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        return ret0;
    }

    public int getDividerPadding()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding>;

        return ret0;
    }

    public int getDividerWidth()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        return ret0;
    }

    public int getGravity()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        return ret0;
    }

    int getLocationOffset(android.view.View)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.View $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.View;

        return 0;
    }

    int getNextLocationOffset(android.view.View)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.View $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.View;

        return 0;
    }

    public int getOrientation()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        return ret0;
    }

    public int getShowDividers()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers>;

        return ret0;
    }

    android.view.View getVirtualChildAt(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u2;
        android.view.View $u-1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: int;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getChildAt(int)>($u2);

        return $u-1;
    }

    int getVirtualChildCount()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u-1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildCount()>();

        return $u-1;
    }

    public float getWeightSum()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        float ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: float mWeightSum>;

        return ret0;
    }

    protected boolean hasDividerBeforeChildAt(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u5, $u-1;
        android.view.View $u-1#15;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u5 := @parameter0: int;

        if $u5 != 0 goto label1;

        $u5 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers>;

        $u5 = $u5 & 1;

        if $u5 == 0 goto label6;

        return 1;

     label1:
        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildCount()>();

        if $u5 != $u-1 goto label2;

        $u5 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers>;

        $u5 = $u5 & 4;

        if $u5 == 0 goto label6;

        return 1;

     label2:
        $u-1 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers>;

        $u-1 = $u-1 & 2;

        if $u-1 == 0 goto label6;

        $u5 = $u5 + -1;

     label3:
        if $u5 < 0 goto label5;

        $u-1#15 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getChildAt(int)>($u5);

        $u-1 = virtualinvoke $u-1#15.<android.view.View: int getVisibility()>();

        if $u-1 == 8 goto label4;

        return 1;

     label4:
        $u5 = $u5 + -1;

        goto label3;

     label5:
        return 0;

     label6:
        return 0;
    }

    public boolean isBaselineAligned()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        boolean ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mBaselineAligned>;

        return ret0;
    }

    public boolean isMeasureWithLargestChildEnabled()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        boolean ret0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        ret0 = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mUseLargestChild>;

        return ret0;
    }

    void layoutHorizontal(int, int, int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u34, $u35, $u36, $u37, majorGravity, minorGravity, paddingTop, $u-1#11, count, $u-1#17, $u-1#58, height, dir, count#82;
        boolean baselineAligned, $u-1;
        int[] maxAscent, maxDescent;
        byte dir1;
        android.view.View $u-1#46;
        android.view.ViewGroup$LayoutParams $u-1#64;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams layoutDirection;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u34 := @parameter0: int;

        $u35 := @parameter1: int;

        $u36 := @parameter2: int;

        $u37 := @parameter3: int;

        $u-1 = staticinvoke <androidx.appcompat.widget.ViewUtils: boolean isLayoutRtl(android.view.View)>(this);

        minorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        paddingTop = minorGravity;

        $u37 = $u37 - $u35;

        $u35 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        $u35 = $u37 - $u35;

        $u37 = $u37 - minorGravity;

        minorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        $u37 = $u37 - minorGravity;

        $u-1#11 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        count = $u-1#11;

        minorGravity = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        majorGravity = minorGravity & 8388615;

        minorGravity = minorGravity & 112;

        baselineAligned = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mBaselineAligned>;

        maxAscent = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxAscent>;

        maxDescent = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxDescent>;

        $u-1#17 = staticinvoke <androidx.core.view.ViewCompat: int getLayoutDirection(android.view.View)>(this);

        majorGravity = staticinvoke <androidx.core.view.GravityCompat: int getAbsoluteGravity(int,int)>(majorGravity, $u-1#17);

        if majorGravity == 1 goto label02;

        if majorGravity == 5 goto label01;

        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        goto label03;

     label01:
        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        $u36 = majorGravity + $u36;

        $u34 = $u36 - $u34;

        $u36 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        majorGravity = $u34 - $u36;

        goto label03;

     label02:
        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        $u34 = $u36 - $u34;

        $u36 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u34 = $u34 - $u36;

        $u34 = $u34 / 2;

        majorGravity = majorGravity + $u34;

     label03:
        if $u-1 == 0 goto label04;

        $u34 = $u-1#11 + -1;

        dir1 = -1;

        goto label05;

     label04:
        $u34 = 0;

        dir1 = 1;

     label05:
        $u-1#17 = 0;

     label06:
        if $u-1#17 >= count goto label19;

        $u36 = dir1 * $u-1#17;

        $u-1#11 = $u34 + $u36;

        $u-1#46 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u-1#11);

        if $u-1#46 != null goto label07;

        $u36 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>($u-1#11);

        majorGravity = majorGravity + $u36;

        goto label18;

     label07:
        $u36 = $u-1#17;

        $u-1#58 = virtualinvoke $u-1#46.<android.view.View: int getVisibility()>();

        if $u-1#58 == 8 goto label18;

        $u-1#17 = virtualinvoke $u-1#46.<android.view.View: int getMeasuredWidth()>();

        $u-1#58 = virtualinvoke $u-1#46.<android.view.View: int getMeasuredHeight()>();

        $u-1#64 = virtualinvoke $u-1#46.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        layoutDirection = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#64;

        if baselineAligned == 0 goto label08;

        height = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if height == -1 goto label08;

        height = virtualinvoke $u-1#46.<android.view.View: int getBaseline()>();

        goto label09;

     label08:
        height = -1;

     label09:
        dir = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

        if dir >= 0 goto label10;

        dir = minorGravity;

        goto label10;

     label10:
        dir = dir & 112;

        if dir == 16 goto label15;

        if dir == 48 goto label13;

        if dir == 80 goto label11;

        height = paddingTop;

        goto label16;

     label11:
        dir = $u35 - $u-1#58;

        count#82 = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        dir = dir - count#82;

        if height == -1 goto label12;

        count#82 = virtualinvoke $u-1#46.<android.view.View: int getMeasuredHeight()>();

        height = count#82 - height;

        count#82 = maxDescent[2];

        height = count#82 - height;

        height = dir - height;

        goto label16;

     label12:
        height = dir;

        goto label16;

     label13:
        dir = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        dir = dir + paddingTop;

        if height == -1 goto label14;

        count#82 = maxAscent[1];

        height = count#82 - height;

        height = dir + height;

        goto label16;

     label14:
        height = dir;

        goto label16;

     label15:
        height = $u37 - $u-1#58;

        height = height / 2;

        height = height + paddingTop;

        dir = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        height = height + dir;

        dir = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        height = height - dir;

     label16:
        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>($u-1#11);

        if $u-1 == 0 goto label17;

        dir = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        majorGravity = majorGravity + dir;

     label17:
        dir = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        majorGravity = majorGravity + dir;

        dir = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getLocationOffset(android.view.View)>($u-1#46);

        dir = majorGravity + dir;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setChildFrame(android.view.View,int,int,int,int)>($u-1#46, dir, height, $u-1#17, $u-1#58);

        $u-1#58 = layoutDirection.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        $u-1#17 = $u-1#17 + $u-1#58;

        $u-1#58 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#46);

        $u-1#17 = $u-1#17 + $u-1#58;

        majorGravity = majorGravity + $u-1#17;

        $u-1#11 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#46, $u-1#11);

        $u-1#17 = $u36 + $u-1#11;

        goto label18;

     label18:
        $u-1#17 = $u-1#17 + 1;

        goto label06;

     label19:
        return;
    }

    void layoutVertical(int, int, int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u26, $u27, $u28, $u29, majorGravity, minorGravity, $u-1, paddingLeft, childTop, gravity, $u-1#46;
        android.view.View $u-1#28;
        android.view.ViewGroup$LayoutParams $u-1#39;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams lp;
        boolean $u-1#64;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u26 := @parameter0: int;

        $u27 := @parameter1: int;

        $u28 := @parameter2: int;

        $u29 := @parameter3: int;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        paddingLeft = $u-1;

        $u28 = $u28 - $u26;

        $u26 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        $u26 = $u28 - $u26;

        $u28 = $u28 - $u-1;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        $u28 = $u28 - $u-1;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        minorGravity = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        majorGravity = minorGravity & 112;

        minorGravity = minorGravity & 8388615;

        if majorGravity == 16 goto label02;

        if majorGravity == 80 goto label01;

        childTop = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        goto label03;

     label01:
        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        $u29 = majorGravity + $u29;

        $u27 = $u29 - $u27;

        $u29 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childTop = $u27 - $u29;

        goto label03;

     label02:
        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        $u27 = $u29 - $u27;

        $u29 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u27 = $u27 - $u29;

        $u27 = $u27 / 2;

        childTop = majorGravity + $u27;

     label03:
        $u27 = 0;

     label04:
        if $u27 >= $u-1 goto label12;

        $u-1#28 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u27);

        if $u-1#28 != null goto label05;

        $u29 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>($u27);

        childTop = childTop + $u29;

        goto label11;

     label05:
        $u29 = virtualinvoke $u-1#28.<android.view.View: int getVisibility()>();

        if $u29 == 8 goto label11;

        majorGravity = virtualinvoke $u-1#28.<android.view.View: int getMeasuredWidth()>();

        $u29 = virtualinvoke $u-1#28.<android.view.View: int getMeasuredHeight()>();

        $u-1#39 = virtualinvoke $u-1#28.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        lp = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#39;

        gravity = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

        if gravity >= 0 goto label06;

        gravity = minorGravity;

        goto label06;

     label06:
        $u-1#46 = staticinvoke <androidx.core.view.ViewCompat: int getLayoutDirection(android.view.View)>(this);

        gravity = staticinvoke <androidx.core.view.GravityCompat: int getAbsoluteGravity(int,int)>(gravity, $u-1#46);

        gravity = gravity & 7;

        if gravity == 1 goto label08;

        if gravity == 5 goto label07;

        gravity = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        gravity = gravity + paddingLeft;

        goto label09;

     label07:
        gravity = $u26 - majorGravity;

        $u-1#46 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        gravity = gravity - $u-1#46;

        goto label09;

     label08:
        gravity = $u28 - majorGravity;

        gravity = gravity / 2;

        gravity = gravity + paddingLeft;

        $u-1#46 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        gravity = gravity + $u-1#46;

        $u-1#46 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        gravity = gravity - $u-1#46;

     label09:
        $u-1#64 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>($u27);

        if $u-1#64 == 0 goto label10;

        $u-1#46 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        childTop = childTop + $u-1#46;

     label10:
        $u-1#46 = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        childTop = childTop + $u-1#46;

        $u-1#46 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getLocationOffset(android.view.View)>($u-1#28);

        $u-1#46 = childTop + $u-1#46;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setChildFrame(android.view.View,int,int,int,int)>($u-1#28, gravity, $u-1#46, majorGravity, $u29);

        majorGravity = lp.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        $u29 = $u29 + majorGravity;

        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#28);

        $u29 = $u29 + majorGravity;

        majorGravity = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#28, $u27);

        $u27 = $u27 + majorGravity;

        childTop = childTop + $u29;

        goto label11;

     label11:
        $u27 = $u27 + 1;

        goto label04;

     label12:
        return;
    }

    void measureChildBeforeLayout(android.view.View, int, int, int, int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.View $u7;
        int $u8, $u9, $u10, $u11, $u12;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u7 := @parameter0: android.view.View;

        $u8 := @parameter1: int;

        $u9 := @parameter2: int;

        $u10 := @parameter3: int;

        $u11 := @parameter4: int;

        $u12 := @parameter5: int;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureChildWithMargins(android.view.View,int,int,int,int)>($u7, $u9, $u10, $u11, $u12);

        return;
    }

    void measureHorizontal(int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u49, $u50, $u-1, count, $u-1#12, widthMode, totalWeight, allFillParent, childState, weightedMaxHeight, alternativeMaxHeight, childState#50, $u-1#51, largestChildWidth1, totalWeight#130, alternativeMaxHeight#173;
        float totalWeight1, childState#73, matchHeight#399;
        int[] maxDescent, maxDescent#23;
        boolean matchHeight, skippedMeasure, isExactly, largestChildWidth, skippedMeasure1, matchHeight1, $u-1#64;
        android.view.View $u-1#47;
        android.view.ViewGroup$LayoutParams $u-1#69;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams alternativeMaxHeight#72, childState#94;
        byte maxHeight;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u49 := @parameter0: int;

        $u50 := @parameter1: int;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        count = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        $u-1#12 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($u49);

        widthMode = $u-1#12;

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($u50);

        maxDescent = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxAscent>;

        if maxDescent == null goto label01;

        maxDescent = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxDescent>;

        if maxDescent != null goto label02;

     label01:
        maxDescent = newarray (int)[4];

        this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxAscent> = maxDescent;

        maxDescent = newarray (int)[4];

        this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxDescent> = maxDescent;

     label02:
        maxDescent = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxAscent>;

        maxDescent#23 = this.<androidx.appcompat.widget.LinearLayoutCompat: int[] mMaxDescent>;

        maxDescent[3] = -1;

        maxDescent[2] = -1;

        maxDescent[1] = -1;

        maxDescent[0] = -1;

        maxDescent#23[3] = -1;

        maxDescent#23[2] = -1;

        maxDescent#23[1] = -1;

        maxDescent#23[0] = -1;

        matchHeight = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mBaselineAligned>;

        skippedMeasure = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mUseLargestChild>;

        if $u-1#12 != 1073741824 goto label03;

        isExactly = 1;

        goto label04;

     label03:
        isExactly = 0;

     label04:
        $u-1#12 = 0;

        totalWeight = 0;

        totalWeight1 = 0.0F;

        allFillParent = 0;

        childState = 0;

        largestChildWidth = 0;

        skippedMeasure1 = 0;

        matchHeight1 = 1;

        weightedMaxHeight = 0;

        alternativeMaxHeight = 0;

     label05:
        if $u-1#12 >= count goto label35;

        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u-1#12);

        if $u-1#47 != null goto label06;

        childState#50 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u-1#51 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>($u-1#12);

        childState#50 = childState#50 + $u-1#51;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState#50;

        childState#50 = count;

        goto label34;

     label06:
        largestChildWidth1 = childState;

        $u-1#51 = virtualinvoke $u-1#47.<android.view.View: int getVisibility()>();

        childState#50 = alternativeMaxHeight;

        if $u-1#51 != 8 goto label07;

        childState#50 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#47, $u-1#12);

        $u-1#12 = $u-1#12 + childState#50;

        childState#50 = count;

        goto label34;

     label07:
        $u-1#64 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>($u-1#12);

        if $u-1#64 == 0 goto label08;

        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        $u-1#51 = $u-1#51 + childState;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = $u-1#51;

     label08:
        $u-1#69 = virtualinvoke $u-1#47.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        alternativeMaxHeight#72 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#69;

        childState#73 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        totalWeight1 = totalWeight1 + childState#73;

        if widthMode != 1073741824 goto label12;

        $u-1#51 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if $u-1#51 != 0 goto label12;

        childState#73 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxHeight = childState#73 cmpl 0.0F;

        if maxHeight <= 0 goto label12;

        if isExactly == 0 goto label09;

        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        $u-1#51 = $u-1#51 + childState;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = $u-1#51;

        goto label10;

     label09:
        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        childState = childState + $u-1#51;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        $u-1#51 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#51, childState);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = $u-1#51;

     label10:
        if matchHeight == 0 goto label11;

        $u-1#51 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(0, 0);

        virtualinvoke $u-1#47.<android.view.View: void measure(int,int)>($u-1#51, $u-1#51);

        childState#94 = alternativeMaxHeight#72;

        childState = largestChildWidth1;

        $u-1#51 = childState#50;

        childState#50 = count;

        goto label22;

     label11:
        largestChildWidth = 1;

        childState#94 = alternativeMaxHeight#72;

        childState = largestChildWidth1;

        $u-1#51 = childState#50;

        childState#50 = count;

        goto label22;

     label12:
        $u-1#51 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if $u-1#51 != 0 goto label13;

        childState#73 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxHeight = childState#73 cmpl 0.0F;

        if maxHeight <= 0 goto label13;

        alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width> = -2;

        childState = 0;

        goto label14;

     label13:
        childState = -2147483648;

     label14:
        maxHeight = totalWeight1 cmpl 0.0F;

        if maxHeight != 0 goto label15;

        alternativeMaxHeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        goto label16;

     label15:
        alternativeMaxHeight = 0;

     label16:
        $u-1#51 = childState#50;

        childState#50 = count;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureChildBeforeLayout(android.view.View,int,int,int,int,int)>($u-1#47, $u-1#12, $u49, alternativeMaxHeight, $u50, 0);

        if childState == -2147483648 goto label17;

        childState#94 = alternativeMaxHeight#72;

        alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width> = childState;

        goto label18;

     label17:
        childState#94 = alternativeMaxHeight#72;

     label18:
        count = virtualinvoke $u-1#47.<android.view.View: int getMeasuredWidth()>();

        if isExactly == 0 goto label19;

        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        alternativeMaxHeight = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        alternativeMaxHeight = alternativeMaxHeight + count;

        totalWeight#130 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        alternativeMaxHeight = alternativeMaxHeight + totalWeight#130;

        totalWeight#130 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        alternativeMaxHeight = alternativeMaxHeight + totalWeight#130;

        childState = childState + alternativeMaxHeight;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState;

        goto label20;

     label19:
        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        alternativeMaxHeight = childState + count;

        totalWeight#130 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        alternativeMaxHeight = alternativeMaxHeight + totalWeight#130;

        totalWeight#130 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        alternativeMaxHeight = alternativeMaxHeight + totalWeight#130;

        totalWeight#130 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        alternativeMaxHeight = alternativeMaxHeight + totalWeight#130;

        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, alternativeMaxHeight);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState;

     label20:
        if skippedMeasure == 0 goto label21;

        childState = staticinvoke <java.lang.Math: int max(int,int)>(count, largestChildWidth1);

        goto label22;

     label21:
        childState = largestChildWidth1;

     label22:
        $u-1#64 = 0;

        if $u-1 == 1073741824 goto label23;

        largestChildWidth1 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if largestChildWidth1 != -1 goto label23;

        skippedMeasure1 = 1;

        $u-1#64 = 1;

     label23:
        largestChildWidth1 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        count = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        alternativeMaxHeight = largestChildWidth1 + count;

        largestChildWidth1 = virtualinvoke $u-1#47.<android.view.View: int getMeasuredHeight()>();

        count = largestChildWidth1 + alternativeMaxHeight;

        largestChildWidth1 = virtualinvoke $u-1#47.<android.view.View: int getMeasuredState()>();

        largestChildWidth1 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(allFillParent, largestChildWidth1);

        if matchHeight == 0 goto label27;

        allFillParent = virtualinvoke $u-1#47.<android.view.View: int getBaseline()>();

        if allFillParent == -1 goto label26;

        totalWeight#130 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

        if totalWeight#130 >= 0 goto label24;

        totalWeight#130 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        goto label25;

     label24:
        totalWeight#130 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

     label25:
        totalWeight#130 = totalWeight#130 & 112;

        totalWeight#130 = totalWeight#130 >> 4;

        totalWeight#130 = totalWeight#130 & -2;

        totalWeight#130 = totalWeight#130 >> 1;

        alternativeMaxHeight#173 = maxDescent[totalWeight#130];

        alternativeMaxHeight#173 = staticinvoke <java.lang.Math: int max(int,int)>(alternativeMaxHeight#173, allFillParent);

        maxDescent[totalWeight#130] = alternativeMaxHeight#173;

        alternativeMaxHeight#173 = maxDescent#23[totalWeight#130];

        allFillParent = count - allFillParent;

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(alternativeMaxHeight#173, allFillParent);

        maxDescent#23[totalWeight#130] = allFillParent;

        goto label27;

     label26:
        goto label27;

     label27:
        totalWeight = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight, count);

        if matchHeight1 == 0 goto label28;

        allFillParent = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if allFillParent != -1 goto label28;

        matchHeight1 = 1;

        goto label29;

     label28:
        matchHeight1 = 0;

     label29:
        childState#73 = childState#94.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxHeight = childState#73 cmpl 0.0F;

        if maxHeight <= 0 goto label31;

        if $u-1#64 == 0 goto label30;

        count = alternativeMaxHeight;

        goto label30;

     label30:
        $u-1#51 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#51, count);

        goto label33;

     label31:
        if $u-1#64 == 0 goto label32;

        count = alternativeMaxHeight;

        goto label32;

     label32:
        weightedMaxHeight = staticinvoke <java.lang.Math: int max(int,int)>(weightedMaxHeight, count);

     label33:
        count = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#47, $u-1#12);

        $u-1#12 = $u-1#12 + count;

        allFillParent = largestChildWidth1;

        alternativeMaxHeight = $u-1#51;

     label34:
        $u-1#12 = $u-1#12 + 1;

        count = childState#50;

        goto label05;

     label35:
        $u-1#51 = widthMode;

        childState#50 = alternativeMaxHeight;

        widthMode = weightedMaxHeight;

        largestChildWidth1 = allFillParent;

        $u-1#12 = childState;

        weightedMaxHeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        if weightedMaxHeight <= 0 goto label36;

        weightedMaxHeight = count;

        $u-1#64 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>(count);

        if $u-1#64 == 0 goto label37;

        count = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        allFillParent = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth>;

        count = count + allFillParent;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = count;

        goto label37;

     label36:
        weightedMaxHeight = count;

     label37:
        count = maxDescent[1];

        if count != -1 goto label39;

        count = maxDescent[0];

        if count != -1 goto label39;

        count = maxDescent[2];

        if count != -1 goto label39;

        count = maxDescent[3];

        if count == -1 goto label38;

        goto label39;

     label38:
        childState = totalWeight;

        goto label40;

     label39:
        count = maxDescent[3];

        allFillParent = maxDescent[0];

        childState = maxDescent[1];

        alternativeMaxHeight = maxDescent[2];

        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, alternativeMaxHeight);

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(allFillParent, childState);

        count = staticinvoke <java.lang.Math: int max(int,int)>(count, allFillParent);

        allFillParent = maxDescent#23[3];

        childState = maxDescent#23[0];

        alternativeMaxHeight = maxDescent#23[1];

        totalWeight#130 = maxDescent#23[2];

        alternativeMaxHeight = staticinvoke <java.lang.Math: int max(int,int)>(alternativeMaxHeight, totalWeight#130);

        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, alternativeMaxHeight);

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(allFillParent, childState);

        count = count + allFillParent;

        childState = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight, count);

     label40:
        if skippedMeasure == 0 goto label49;

        totalWeight = $u-1#51;

        if $u-1#51 == -2147483648 goto label42;

        if $u-1#51 != 0 goto label41;

        goto label42;

     label41:
        count = childState;

        goto label50;

     label42:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        count = 0;

     label43:
        if count >= weightedMaxHeight goto label48;

        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(count);

        if $u-1#47 != null goto label44;

        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        allFillParent = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>(count);

        $u-1#51 = $u-1#51 + allFillParent;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = $u-1#51;

        $u-1#51 = childState;

        goto label47;

     label44:
        $u-1#51 = virtualinvoke $u-1#47.<android.view.View: int getVisibility()>();

        if $u-1#51 != 8 goto label45;

        $u-1#51 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#47, count);

        count = count + $u-1#51;

        $u-1#51 = childState;

        goto label47;

     label45:
        $u-1#69 = virtualinvoke $u-1#47.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        alternativeMaxHeight#72 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#69;

        if isExactly == 0 goto label46;

        allFillParent = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u-1#51 = childState;

        childState = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        childState = childState + $u-1#12;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        childState = childState + alternativeMaxHeight;

        allFillParent = allFillParent + childState;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = allFillParent;

        goto label47;

     label46:
        $u-1#51 = childState;

        allFillParent = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = allFillParent + $u-1#12;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        childState = childState + alternativeMaxHeight;

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(allFillParent, childState);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = allFillParent;

     label47:
        count = count + 1;

        childState = $u-1#51;

        goto label43;

     label48:
        count = childState;

        goto label50;

     label49:
        count = childState;

        totalWeight = $u-1#51;

     label50:
        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        allFillParent = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        childState = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        allFillParent = allFillParent + childState;

        $u-1#51 = $u-1#51 + allFillParent;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = $u-1#51;

        $u-1#51 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        allFillParent = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getSuggestedMinimumWidth()>();

        $u-1#51 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#51, allFillParent);

        $u-1#51 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>($u-1#51, $u49, 0);

        allFillParent = $u-1#51;

        childState = $u-1#51 & 16777215;

        alternativeMaxHeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = childState - alternativeMaxHeight;

        if largestChildWidth != 0 goto label59;

        if childState == 0 goto label51;

        maxHeight = totalWeight1 cmpl 0.0F;

        if maxHeight <= 0 goto label51;

        childState#73 = totalWeight1;

        goto label60;

     label51:
        childState#50 = staticinvoke <java.lang.Math: int max(int,int)>(widthMode, childState#50);

        widthMode = childState#50;

        if skippedMeasure == 0 goto label57;

        if totalWeight == 1073741824 goto label57;

        childState#50 = 0;

     label52:
        if childState#50 >= weightedMaxHeight goto label56;

        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(childState#50);

        if $u-1#47 == null goto label55;

        totalWeight = virtualinvoke $u-1#47.<android.view.View: int getVisibility()>();

        if totalWeight != 8 goto label53;

        goto label55;

     label53:
        $u-1#69 = virtualinvoke $u-1#47.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        alternativeMaxHeight#72 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#69;

        totalWeight1 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxHeight = totalWeight1 cmpl 0.0F;

        if maxHeight <= 0 goto label54;

        totalWeight = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($u-1#12, 1073741824);

        allFillParent = virtualinvoke $u-1#47.<android.view.View: int getMeasuredHeight()>();

        allFillParent = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(allFillParent, 1073741824);

        virtualinvoke $u-1#47.<android.view.View: void measure(int,int)>(totalWeight, allFillParent);

        goto label55;

     label54:
        goto label55;

     label55:
        childState#50 = childState#50 + 1;

        goto label52;

     label56:
        $u-1#12 = widthMode;

        goto label58;

     label57:
        $u-1#12 = childState#50;

     label58:
        childState#50 = $u-1#12;

        widthMode = count;

        $u-1#12 = largestChildWidth1;

        goto label92;

     label59:
        childState#73 = totalWeight1;

     label60:
        totalWeight1 = this.<androidx.appcompat.widget.LinearLayoutCompat: float mWeightSum>;

        maxHeight = totalWeight1 cmpl 0.0F;

        if maxHeight <= 0 goto label61;

        goto label62;

     label61:
        totalWeight1 = childState#73;

     label62:
        maxDescent[3] = -1;

        maxDescent[2] = -1;

        maxDescent[1] = -1;

        maxDescent[0] = -1;

        maxDescent#23[3] = -1;

        maxDescent#23[2] = -1;

        maxDescent#23[1] = -1;

        maxDescent#23[0] = -1;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        $u-1#51 = 0;

        count = childState;

        childState#50 = -1;

        $u-1#12 = largestChildWidth1;

     label63:
        if $u-1#51 >= weightedMaxHeight goto label88;

        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>($u-1#51);

        if $u-1#47 == null goto label86;

        largestChildWidth1 = virtualinvoke $u-1#47.<android.view.View: int getVisibility()>();

        if largestChildWidth1 != 8 goto label64;

        largestChildWidth1 = allFillParent;

        goto label87;

     label64:
        $u-1#69 = virtualinvoke $u-1#47.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        alternativeMaxHeight#72 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#69;

        childState#73 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxHeight = childState#73 cmpl 0.0F;

        if maxHeight <= 0 goto label71;

        matchHeight#399 = (float) count;

        matchHeight#399 = matchHeight#399 * childState#73;

        matchHeight#399 = matchHeight#399 / totalWeight1;

        childState = (int) matchHeight#399;

        totalWeight1 = totalWeight1 - childState#73;

        count = count - childState;

        largestChildWidth1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        alternativeMaxHeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        largestChildWidth1 = largestChildWidth1 + alternativeMaxHeight;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        largestChildWidth1 = largestChildWidth1 + alternativeMaxHeight;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        alternativeMaxHeight = largestChildWidth1 + alternativeMaxHeight;

        totalWeight#130 = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        largestChildWidth1 = allFillParent;

        allFillParent = staticinvoke <androidx.appcompat.widget.LinearLayoutCompat: int getChildMeasureSpec(int,int,int)>($u50, alternativeMaxHeight, totalWeight#130);

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if alternativeMaxHeight != 0 goto label68;

        if totalWeight == 1073741824 goto label65;

        goto label68;

     label65:
        if childState <= 0 goto label66;

        goto label67;

     label66:
        childState = 0;

     label67:
        childState = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(childState, 1073741824);

        virtualinvoke $u-1#47.<android.view.View: void measure(int,int)>(childState, allFillParent);

        goto label70;

     label68:
        alternativeMaxHeight = virtualinvoke $u-1#47.<android.view.View: int getMeasuredWidth()>();

        childState = alternativeMaxHeight + childState;

        if childState >= 0 goto label69;

        childState = 0;

     label69:
        childState = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(childState, 1073741824);

        virtualinvoke $u-1#47.<android.view.View: void measure(int,int)>(childState, allFillParent);

     label70:
        allFillParent = virtualinvoke $u-1#47.<android.view.View: int getMeasuredState()>();

        allFillParent = allFillParent & -16777216;

        $u-1#12 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>($u-1#12, allFillParent);

        goto label72;

     label71:
        largestChildWidth1 = allFillParent;

     label72:
        if isExactly == 0 goto label73;

        allFillParent = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = virtualinvoke $u-1#47.<android.view.View: int getMeasuredWidth()>();

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        childState = childState + alternativeMaxHeight;

        allFillParent = allFillParent + childState;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = allFillParent;

        goto label74;

     label73:
        allFillParent = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        childState = virtualinvoke $u-1#47.<android.view.View: int getMeasuredWidth()>();

        childState = childState + allFillParent;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        childState = childState + alternativeMaxHeight;

        alternativeMaxHeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#47);

        childState = childState + alternativeMaxHeight;

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(allFillParent, childState);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = allFillParent;

     label74:
        if $u-1 == 1073741824 goto label75;

        allFillParent = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if allFillParent != -1 goto label75;

        skippedMeasure = 1;

        goto label76;

     label75:
        skippedMeasure = 0;

     label76:
        allFillParent = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        childState = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        childState = allFillParent + childState;

        allFillParent = virtualinvoke $u-1#47.<android.view.View: int getMeasuredHeight()>();

        allFillParent = allFillParent + childState;

        childState#50 = staticinvoke <java.lang.Math: int max(int,int)>(childState#50, allFillParent);

        if skippedMeasure == 0 goto label77;

        goto label78;

     label77:
        childState = allFillParent;

     label78:
        widthMode = staticinvoke <java.lang.Math: int max(int,int)>(widthMode, childState);

        if matchHeight1 == 0 goto label79;

        childState = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if childState != -1 goto label79;

        skippedMeasure = 1;

        goto label80;

     label79:
        skippedMeasure = 0;

     label80:
        if matchHeight == 0 goto label84;

        childState = virtualinvoke $u-1#47.<android.view.View: int getBaseline()>();

        matchHeight1 = skippedMeasure;

        if childState == -1 goto label83;

        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

        if alternativeMaxHeight >= 0 goto label81;

        alternativeMaxHeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        goto label82;

     label81:
        alternativeMaxHeight = alternativeMaxHeight#72.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int gravity>;

     label82:
        alternativeMaxHeight = alternativeMaxHeight & 112;

        alternativeMaxHeight = alternativeMaxHeight >> 4;

        alternativeMaxHeight = alternativeMaxHeight & -2;

        alternativeMaxHeight = alternativeMaxHeight >> 1;

        totalWeight#130 = maxDescent[alternativeMaxHeight];

        totalWeight#130 = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight#130, childState);

        maxDescent[alternativeMaxHeight] = totalWeight#130;

        totalWeight#130 = maxDescent#23[alternativeMaxHeight];

        allFillParent = allFillParent - childState;

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight#130, allFillParent);

        maxDescent#23[alternativeMaxHeight] = allFillParent;

        goto label85;

     label83:
        goto label85;

     label84:
        matchHeight1 = skippedMeasure;

     label85:
        goto label87;

     label86:
        largestChildWidth1 = allFillParent;

     label87:
        $u-1#51 = $u-1#51 + 1;

        allFillParent = largestChildWidth1;

        goto label63;

     label88:
        $u-1#51 = allFillParent;

        largestChildWidth1 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        totalWeight = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        count = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        totalWeight = totalWeight + count;

        largestChildWidth1 = largestChildWidth1 + totalWeight;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = largestChildWidth1;

        largestChildWidth1 = maxDescent[1];

        if largestChildWidth1 != -1 goto label90;

        largestChildWidth1 = maxDescent[0];

        if largestChildWidth1 != -1 goto label90;

        largestChildWidth1 = maxDescent[2];

        if largestChildWidth1 != -1 goto label90;

        largestChildWidth1 = maxDescent[3];

        if largestChildWidth1 == -1 goto label89;

        goto label90;

     label89:
        largestChildWidth1 = childState#50;

        goto label91;

     label90:
        largestChildWidth1 = maxDescent[3];

        totalWeight = maxDescent[0];

        count = maxDescent[1];

        allFillParent = maxDescent[2];

        count = staticinvoke <java.lang.Math: int max(int,int)>(count, allFillParent);

        totalWeight = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight, count);

        largestChildWidth1 = staticinvoke <java.lang.Math: int max(int,int)>(largestChildWidth1, totalWeight);

        totalWeight = maxDescent#23[3];

        count = maxDescent#23[0];

        allFillParent = maxDescent#23[1];

        childState = maxDescent#23[2];

        allFillParent = staticinvoke <java.lang.Math: int max(int,int)>(allFillParent, childState);

        count = staticinvoke <java.lang.Math: int max(int,int)>(count, allFillParent);

        totalWeight = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight, count);

        largestChildWidth1 = largestChildWidth1 + totalWeight;

        largestChildWidth1 = staticinvoke <java.lang.Math: int max(int,int)>(childState#50, largestChildWidth1);

     label91:
        childState#50 = widthMode;

        widthMode = largestChildWidth1;

     label92:
        if matchHeight1 != 0 goto label93;

        if $u-1 == 1073741824 goto label93;

        widthMode = childState#50;

     label93:
        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        childState#50 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        $u-1 = $u-1 + childState#50;

        $u-1 = widthMode + $u-1;

        childState#50 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getSuggestedMinimumHeight()>();

        $u-1 = staticinvoke <java.lang.Math: int max(int,int)>($u-1, childState#50);

        childState#50 = -16777216 & $u-1#12;

        childState#50 = $u-1#51 | childState#50;

        $u-1#12 = $u-1#12 << 16;

        $u50 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>($u-1, $u50, $u-1#12);

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setMeasuredDimension(int,int)>(childState#50, $u50);

        if skippedMeasure1 == 0 goto label94;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void forceUniformHeight(int,int)>(weightedMaxHeight, $u49);

     label94:
        return;
    }

    int measureNullChild(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: int;

        return 0;
    }

    void measureVertical(int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u39, $u40, $u-1, count, $u-1#13, heightMode, baselineChildIndex, totalWeight, alternativeMaxWidth, matchWidth, allFillParent, weightedMaxWidth, weightedMaxWidth1, childState, $u-1#37, largestChildHeight2, baselineChildIndex1;
        boolean useLargestChild, skippedMeasure1, matchWidth1, largestChildHeight1, $u-1#47;
        float maxWidth, childState#56, baselineChildIndex#298;
        android.view.View $u-1#34, weightedMaxWidth#77;
        android.view.ViewGroup$LayoutParams $u-1#52;
        androidx.appcompat.widget.LinearLayoutCompat$LayoutParams weightedMaxWidth#55, heightMode#76;
        byte maxWidth#61;
        java.lang.RuntimeException maxWidth#122;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u39 := @parameter0: int;

        $u40 := @parameter1: int;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        count = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()>();

        $u-1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($u39);

        heightMode = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($u40);

        baselineChildIndex = this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex>;

        useLargestChild = this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mUseLargestChild>;

        skippedMeasure1 = 0;

        $u-1#13 = 0;

        maxWidth = 0.0F;

        totalWeight = 0;

        alternativeMaxWidth = 0;

        matchWidth1 = 0;

        matchWidth = 0;

        allFillParent = 0;

        weightedMaxWidth = 0;

        largestChildHeight1 = 1;

     label01:
        weightedMaxWidth1 = allFillParent;

        if alternativeMaxWidth >= count goto label26;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(alternativeMaxWidth);

        if $u-1#34 != null goto label02;

        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u-1#37 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>(alternativeMaxWidth);

        childState = childState + $u-1#37;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState;

        childState = count;

        $u-1#37 = heightMode;

        goto label25;

     label02:
        largestChildHeight2 = weightedMaxWidth;

        childState = virtualinvoke $u-1#34.<android.view.View: int getVisibility()>();

        if childState != 8 goto label03;

        childState = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#34, alternativeMaxWidth);

        alternativeMaxWidth = alternativeMaxWidth + childState;

        childState = count;

        $u-1#37 = heightMode;

        goto label25;

     label03:
        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>(alternativeMaxWidth);

        if $u-1#47 == 0 goto label04;

        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u-1#37 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        childState = childState + $u-1#37;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState;

     label04:
        $u-1#52 = virtualinvoke $u-1#34.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        weightedMaxWidth#55 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#52;

        childState#56 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth = maxWidth + childState#56;

        if heightMode != 1073741824 goto label05;

        childState = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if childState != 0 goto label05;

        childState#56 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = childState#56 cmpl 0.0F;

        if maxWidth#61 <= 0 goto label05;

        childState = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        $u-1#37 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        $u-1#37 = $u-1#37 + childState;

        allFillParent = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        $u-1#37 = $u-1#37 + allFillParent;

        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, $u-1#37);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = childState;

        skippedMeasure1 = 1;

        childState = count;

        count = weightedMaxWidth1;

        $u-1#37 = heightMode;

        heightMode#76 = weightedMaxWidth#55;

        weightedMaxWidth#77 = $u-1#34;

        goto label11;

     label05:
        allFillParent = alternativeMaxWidth;

        childState = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if childState != 0 goto label06;

        childState#56 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = childState#56 cmpl 0.0F;

        if maxWidth#61 <= 0 goto label06;

        weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height> = -2;

        weightedMaxWidth = 0;

        goto label07;

     label06:
        weightedMaxWidth = -2147483648;

     label07:
        maxWidth#61 = maxWidth cmpl 0.0F;

        if maxWidth#61 != 0 goto label08;

        baselineChildIndex1 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        goto label09;

     label08:
        baselineChildIndex1 = 0;

     label09:
        alternativeMaxWidth = allFillParent;

        $u-1#37 = heightMode;

        heightMode#76 = weightedMaxWidth#55;

        childState = count;

        count = weightedMaxWidth1;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureChildBeforeLayout(android.view.View,int,int,int,int,int)>($u-1#34, allFillParent, $u39, 0, $u40, baselineChildIndex1);

        if weightedMaxWidth == -2147483648 goto label10;

        weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height> = weightedMaxWidth;

     label10:
        heightMode = virtualinvoke $u-1#34.<android.view.View: int getMeasuredHeight()>();

        weightedMaxWidth1 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        allFillParent = weightedMaxWidth1 + heightMode;

        weightedMaxWidth = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        allFillParent = allFillParent + weightedMaxWidth;

        weightedMaxWidth = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        allFillParent = allFillParent + weightedMaxWidth;

        weightedMaxWidth#77 = $u-1#34;

        weightedMaxWidth = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#34);

        allFillParent = allFillParent + weightedMaxWidth;

        weightedMaxWidth1 = staticinvoke <java.lang.Math: int max(int,int)>(weightedMaxWidth1, allFillParent);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = weightedMaxWidth1;

        if useLargestChild == 0 goto label11;

        largestChildHeight2 = staticinvoke <java.lang.Math: int max(int,int)>(heightMode, largestChildHeight2);

        goto label11;

     label11:
        if baselineChildIndex < 0 goto label12;

        heightMode = alternativeMaxWidth;

        alternativeMaxWidth = alternativeMaxWidth + 1;

        if baselineChildIndex != alternativeMaxWidth goto label13;

        alternativeMaxWidth = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineChildTop> = alternativeMaxWidth;

        goto label13;

     label12:
        heightMode = alternativeMaxWidth;

     label13:
        if heightMode >= baselineChildIndex goto label15;

        childState#56 = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = childState#56 cmpl 0.0F;

        if maxWidth#61 > 0 goto label14;

        goto label15;

     label14:
        maxWidth#122 = new java.lang.RuntimeException;

        specialinvoke maxWidth#122.<java.lang.RuntimeException: void <init>(java.lang.String)>("A child of LinearLayout with index less than mBaselineAlignedChildIndex has weight > 0, which won\'t work.  Either remove the weight, or don\'t set mBaselineAlignedChildIndex.");

        throw maxWidth#122;

     label15:
        $u-1#47 = 0;

        if $u-1 == 1073741824 goto label16;

        alternativeMaxWidth = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if alternativeMaxWidth != -1 goto label16;

        matchWidth1 = 1;

        $u-1#47 = 1;

     label16:
        alternativeMaxWidth = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        weightedMaxWidth1 = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = virtualinvoke weightedMaxWidth#77.<android.view.View: int getMeasuredWidth()>();

        weightedMaxWidth1 = weightedMaxWidth1 + alternativeMaxWidth;

        $u-1#13 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#13, weightedMaxWidth1);

        allFillParent = virtualinvoke weightedMaxWidth#77.<android.view.View: int getMeasuredState()>();

        matchWidth = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(matchWidth, allFillParent);

        if largestChildHeight1 == 0 goto label17;

        allFillParent = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if allFillParent != -1 goto label17;

        largestChildHeight1 = 1;

        goto label18;

     label17:
        largestChildHeight1 = 0;

     label18:
        childState#56 = heightMode#76.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = childState#56 cmpl 0.0F;

        if maxWidth#61 <= 0 goto label21;

        if $u-1#47 == 0 goto label19;

        goto label20;

     label19:
        alternativeMaxWidth = weightedMaxWidth1;

     label20:
        count = staticinvoke <java.lang.Math: int max(int,int)>(count, alternativeMaxWidth);

        goto label24;

     label21:
        if $u-1#47 == 0 goto label22;

        goto label23;

     label22:
        alternativeMaxWidth = weightedMaxWidth1;

     label23:
        totalWeight = staticinvoke <java.lang.Math: int max(int,int)>(totalWeight, alternativeMaxWidth);

     label24:
        alternativeMaxWidth = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>(weightedMaxWidth#77, heightMode);

        weightedMaxWidth = largestChildHeight2;

        allFillParent = count;

        alternativeMaxWidth = alternativeMaxWidth + heightMode;

     label25:
        alternativeMaxWidth = alternativeMaxWidth + 1;

        heightMode = $u-1#37;

        count = childState;

        goto label01;

     label26:
        $u-1#37 = weightedMaxWidth;

        childState = totalWeight;

        largestChildHeight2 = allFillParent;

        baselineChildIndex = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        if baselineChildIndex <= 0 goto label27;

        baselineChildIndex = count;

        $u-1#47 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: boolean hasDividerBeforeChildAt(int)>(count);

        if $u-1#47 == 0 goto label28;

        totalWeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        count = this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight>;

        totalWeight = totalWeight + count;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = totalWeight;

        goto label28;

     label27:
        baselineChildIndex = count;

     label28:
        if useLargestChild == 0 goto label36;

        totalWeight = heightMode;

        if heightMode == -2147483648 goto label30;

        if heightMode != 0 goto label29;

        goto label30;

     label29:
        count = matchWidth;

        goto label37;

     label30:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        count = 0;

     label31:
        if count >= baselineChildIndex goto label35;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(count);

        if $u-1#34 != null goto label32;

        heightMode = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        alternativeMaxWidth = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int measureNullChild(int)>(count);

        heightMode = heightMode + alternativeMaxWidth;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = heightMode;

        goto label34;

     label32:
        heightMode = virtualinvoke $u-1#34.<android.view.View: int getVisibility()>();

        if heightMode != 8 goto label33;

        heightMode = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildrenSkipCount(android.view.View,int)>($u-1#34, count);

        count = count + heightMode;

        goto label34;

     label33:
        $u-1#52 = virtualinvoke $u-1#34.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        weightedMaxWidth#55 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#52;

        heightMode = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        alternativeMaxWidth = heightMode + $u-1#37;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#34);

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        heightMode = staticinvoke <java.lang.Math: int max(int,int)>(heightMode, alternativeMaxWidth);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = heightMode;

     label34:
        count = count + 1;

        goto label31;

     label35:
        count = matchWidth;

        goto label37;

     label36:
        count = matchWidth;

        totalWeight = heightMode;

     label37:
        matchWidth = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        heightMode = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        alternativeMaxWidth = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        heightMode = heightMode + alternativeMaxWidth;

        matchWidth = matchWidth + heightMode;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = matchWidth;

        matchWidth = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        heightMode = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getSuggestedMinimumHeight()>();

        matchWidth = staticinvoke <java.lang.Math: int max(int,int)>(matchWidth, heightMode);

        matchWidth = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(matchWidth, $u40, 0);

        heightMode = matchWidth & 16777215;

        alternativeMaxWidth = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        heightMode = heightMode - alternativeMaxWidth;

        if skippedMeasure1 != 0 goto label46;

        if heightMode == 0 goto label38;

        maxWidth#61 = maxWidth cmpl 0.0F;

        if maxWidth#61 <= 0 goto label38;

        childState#56 = maxWidth;

        goto label47;

     label38:
        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, largestChildHeight2);

        largestChildHeight2 = childState;

        if useLargestChild == 0 goto label45;

        if totalWeight == 1073741824 goto label45;

        childState = 0;

     label39:
        if childState >= baselineChildIndex goto label44;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(childState);

        if $u-1#34 == null goto label42;

        totalWeight = largestChildHeight2;

        largestChildHeight2 = virtualinvoke $u-1#34.<android.view.View: int getVisibility()>();

        if largestChildHeight2 != 8 goto label40;

        goto label43;

     label40:
        $u-1#52 = virtualinvoke $u-1#34.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        weightedMaxWidth#55 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#52;

        maxWidth = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = maxWidth cmpl 0.0F;

        if maxWidth#61 <= 0 goto label41;

        largestChildHeight2 = virtualinvoke $u-1#34.<android.view.View: int getMeasuredWidth()>();

        largestChildHeight2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(largestChildHeight2, 1073741824);

        heightMode = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($u-1#37, 1073741824);

        virtualinvoke $u-1#34.<android.view.View: void measure(int,int)>(largestChildHeight2, heightMode);

        goto label43;

     label41:
        goto label43;

     label42:
        totalWeight = largestChildHeight2;

     label43:
        childState = childState + 1;

        largestChildHeight2 = totalWeight;

        goto label39;

     label44:
        childState = largestChildHeight2;

        goto label45;

     label45:
        $u-1#37 = count;

        goto label68;

     label46:
        childState#56 = maxWidth;

     label47:
        maxWidth = this.<androidx.appcompat.widget.LinearLayoutCompat: float mWeightSum>;

        maxWidth#61 = maxWidth cmpl 0.0F;

        if maxWidth#61 <= 0 goto label48;

        goto label49;

     label48:
        maxWidth = childState#56;

     label49:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = 0;

        largestChildHeight2 = 0;

        alternativeMaxWidth = heightMode;

        $u-1#37 = count;

     label50:
        if largestChildHeight2 >= baselineChildIndex goto label67;

        $u-1#34 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: android.view.View getVirtualChildAt(int)>(largestChildHeight2);

        count = virtualinvoke $u-1#34.<android.view.View: int getVisibility()>();

        if count != 8 goto label51;

        count = alternativeMaxWidth;

        goto label66;

     label51:
        $u-1#52 = virtualinvoke $u-1#34.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        weightedMaxWidth#55 = (androidx.appcompat.widget.LinearLayoutCompat$LayoutParams) $u-1#52;

        childState#56 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: float weight>;

        maxWidth#61 = childState#56 cmpl 0.0F;

        if maxWidth#61 <= 0 goto label58;

        baselineChildIndex#298 = (float) alternativeMaxWidth;

        baselineChildIndex#298 = baselineChildIndex#298 * childState#56;

        baselineChildIndex#298 = baselineChildIndex#298 / maxWidth;

        heightMode = (int) baselineChildIndex#298;

        maxWidth = maxWidth - childState#56;

        count = alternativeMaxWidth - heightMode;

        alternativeMaxWidth = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        weightedMaxWidth1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        alternativeMaxWidth = staticinvoke <androidx.appcompat.widget.LinearLayoutCompat: int getChildMeasureSpec(int,int,int)>($u39, alternativeMaxWidth, weightedMaxWidth1);

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int height>;

        if weightedMaxWidth1 != 0 goto label55;

        if totalWeight == 1073741824 goto label52;

        goto label55;

     label52:
        if heightMode <= 0 goto label53;

        goto label54;

     label53:
        heightMode = 0;

     label54:
        heightMode = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(heightMode, 1073741824);

        virtualinvoke $u-1#34.<android.view.View: void measure(int,int)>(alternativeMaxWidth, heightMode);

        goto label57;

     label55:
        weightedMaxWidth1 = virtualinvoke $u-1#34.<android.view.View: int getMeasuredHeight()>();

        heightMode = weightedMaxWidth1 + heightMode;

        if heightMode >= 0 goto label56;

        heightMode = 0;

     label56:
        heightMode = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(heightMode, 1073741824);

        virtualinvoke $u-1#34.<android.view.View: void measure(int,int)>(alternativeMaxWidth, heightMode);

     label57:
        heightMode = virtualinvoke $u-1#34.<android.view.View: int getMeasuredState()>();

        heightMode = heightMode & -256;

        $u-1#37 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>($u-1#37, heightMode);

        goto label59;

     label58:
        count = alternativeMaxWidth;

     label59:
        heightMode = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int leftMargin>;

        alternativeMaxWidth = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int rightMargin>;

        heightMode = heightMode + alternativeMaxWidth;

        alternativeMaxWidth = virtualinvoke $u-1#34.<android.view.View: int getMeasuredWidth()>();

        alternativeMaxWidth = alternativeMaxWidth + heightMode;

        $u-1#13 = staticinvoke <java.lang.Math: int max(int,int)>($u-1#13, alternativeMaxWidth);

        if $u-1 == 1073741824 goto label60;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if weightedMaxWidth1 != -1 goto label60;

        useLargestChild = 1;

        goto label61;

     label60:
        useLargestChild = 0;

     label61:
        if useLargestChild == 0 goto label62;

        goto label63;

     label62:
        heightMode = alternativeMaxWidth;

     label63:
        childState = staticinvoke <java.lang.Math: int max(int,int)>(childState, heightMode);

        if largestChildHeight1 == 0 goto label64;

        heightMode = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int width>;

        if heightMode != -1 goto label64;

        useLargestChild = 1;

        goto label65;

     label64:
        useLargestChild = 0;

     label65:
        heightMode = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        alternativeMaxWidth = virtualinvoke $u-1#34.<android.view.View: int getMeasuredHeight()>();

        alternativeMaxWidth = heightMode + alternativeMaxWidth;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int topMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = weightedMaxWidth#55.<androidx.appcompat.widget.LinearLayoutCompat$LayoutParams: int bottomMargin>;

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        weightedMaxWidth1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getNextLocationOffset(android.view.View)>($u-1#34);

        alternativeMaxWidth = alternativeMaxWidth + weightedMaxWidth1;

        heightMode = staticinvoke <java.lang.Math: int max(int,int)>(heightMode, alternativeMaxWidth);

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = heightMode;

        largestChildHeight1 = useLargestChild;

     label66:
        largestChildHeight2 = largestChildHeight2 + 1;

        alternativeMaxWidth = count;

        goto label50;

     label67:
        totalWeight = this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength>;

        largestChildHeight2 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingTop()>();

        count = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingBottom()>();

        largestChildHeight2 = largestChildHeight2 + count;

        totalWeight = totalWeight + largestChildHeight2;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mTotalLength> = totalWeight;

     label68:
        if largestChildHeight1 != 0 goto label69;

        if $u-1 == 1073741824 goto label69;

        $u-1#13 = childState;

     label69:
        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingLeft()>();

        childState = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getPaddingRight()>();

        $u-1 = $u-1 + childState;

        $u-1 = $u-1#13 + $u-1;

        $u-1#13 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getSuggestedMinimumWidth()>();

        $u-1 = staticinvoke <java.lang.Math: int max(int,int)>($u-1, $u-1#13);

        $u39 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>($u-1, $u39, $u-1#37);

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setMeasuredDimension(int,int)>($u39, matchWidth);

        if matchWidth1 == 0 goto label70;

        specialinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void forceUniformWidth(int,int)>(baselineChildIndex, $u40);

     label70:
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.Canvas $u3;
        android.graphics.drawable.Drawable $u0;
        int $u0#2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: android.graphics.Canvas;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        if $u0 != null goto label1;

        return;

     label1:
        $u0#2 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if $u0#2 != 1 goto label2;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawDividersVertical(android.graphics.Canvas)>($u3);

        return;

     label2:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void drawDividersHorizontal(android.graphics.Canvas)>($u3);

        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.accessibility.AccessibilityEvent $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke this.<android.view.ViewGroup: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>($u2);

        virtualinvoke $u2.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>("androidx.appcompat.widget.LinearLayoutCompat");

        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.view.accessibility.AccessibilityNodeInfo $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke this.<android.view.ViewGroup: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>($u2);

        virtualinvoke $u2.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>("androidx.appcompat.widget.LinearLayoutCompat");

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        boolean $u3;
        int $u4, $u5, $u6, $u7, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: boolean;

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u6 := @parameter3: int;

        $u7 := @parameter4: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if $u0 != 1 goto label1;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void layoutVertical(int,int,int,int)>($u4, $u5, $u6, $u7);

        return;

     label1:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void layoutHorizontal(int,int,int,int)>($u4, $u5, $u6, $u7);

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u3, $u4, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: int;

        $u4 := @parameter1: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if $u0 != 1 goto label1;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureVertical(int,int)>($u3, $u4);

        return;

     label1:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void measureHorizontal(int,int)>($u3, $u4);

        return;
    }

    public void setBaselineAligned(boolean)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        boolean $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u1 := @parameter0: boolean;

        this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mBaselineAligned> = $u1;

        return;
    }

    public void setBaselineAlignedChildIndex(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u4, $u-1;
        java.lang.IllegalArgumentException $u0;
        java.lang.StringBuilder $u1;
        java.lang.String $u-1#9;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u4 := @parameter0: int;

        if $u4 < 0 goto label1;

        $u-1 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildCount()>();

        if $u4 >= $u-1 goto label1;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mBaselineAlignedChildIndex> = $u4;

        return;

     label1:
        $u0 = new java.lang.IllegalArgumentException;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("base aligned child index out of range (0, ");

        $u4 = virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: int getChildCount()>();

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u4);

        virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $u-1#9 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($u-1#9);

        throw $u0;
    }

    public void setDividerDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        android.graphics.drawable.Drawable $u3, $u0;
        boolean $u0#2;
        int $u-1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u3 := @parameter0: android.graphics.drawable.Drawable;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider>;

        if $u3 != $u0 goto label1;

        return;

     label1:
        this.<androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable mDivider> = $u3;

        $u0#2 = 0;

        if $u3 == null goto label2;

        $u-1 = virtualinvoke $u3.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth> = $u-1;

        $u-1 = virtualinvoke $u3.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight> = $u-1;

        goto label3;

     label2:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerWidth> = 0;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerHeight> = 0;

     label3:
        if $u3 != null goto label4;

        $u0#2 = 1;

     label4:
        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void setWillNotDraw(boolean)>($u0#2);

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

        return;
    }

    public void setDividerPadding(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u1 := @parameter0: int;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mDividerPadding> = $u1;

        return;
    }

    public void setGravity(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u2, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        if $u0 == $u2 goto label3;

        $u0 = 8388615 & $u2;

        if $u0 != 0 goto label1;

        $u2 = $u2 | 8388611;

     label1:
        $u0 = $u2 & 112;

        if $u0 != 0 goto label2;

        $u2 = $u2 | 48;

     label2:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity> = $u2;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

     label3:
        return;
    }

    public void setHorizontalGravity(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u4, $u2, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u4 := @parameter0: int;

        $u4 = $u4 & 8388615;

        $u2 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        $u0 = 8388615 & $u2;

        if $u0 == $u4 goto label1;

        $u2 = -8388616 & $u2;

        $u4 = $u2 | $u4;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity> = $u4;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

     label1:
        return;
    }

    public void setMeasureWithLargestChildEnabled(boolean)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        boolean $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u1 := @parameter0: boolean;

        this.<androidx.appcompat.widget.LinearLayoutCompat: boolean mUseLargestChild> = $u1;

        return;
    }

    public void setOrientation(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u2, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation>;

        if $u0 == $u2 goto label1;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mOrientation> = $u2;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

     label1:
        return;
    }

    public void setShowDividers(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u2, $u0;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers>;

        if $u2 == $u0 goto label1;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

     label1:
        this.<androidx.appcompat.widget.LinearLayoutCompat: int mShowDividers> = $u2;

        return;
    }

    public void setVerticalGravity(int)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        int $u4, $u2, $u1;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u4 := @parameter0: int;

        $u4 = $u4 & 112;

        $u1 = this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity>;

        $u2 = $u1 & 112;

        if $u2 == $u4 goto label1;

        $u2 = $u1 & -113;

        $u4 = $u2 | $u4;

        this.<androidx.appcompat.widget.LinearLayoutCompat: int mGravity> = $u4;

        virtualinvoke this.<androidx.appcompat.widget.LinearLayoutCompat: void requestLayout()>();

     label1:
        return;
    }

    public void setWeightSum(float)
    {
        androidx.appcompat.widget.LinearLayoutCompat this;
        float $u2;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        $u2 := @parameter0: float;

        $u2 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $u2);

        this.<androidx.appcompat.widget.LinearLayoutCompat: float mWeightSum> = $u2;

        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        androidx.appcompat.widget.LinearLayoutCompat this;

        this := @this: androidx.appcompat.widget.LinearLayoutCompat;

        return 0;
    }

    public static void <clinit>()
    {
        <androidx.appcompat.widget.LinearLayoutCompat: int VERTICAL_GRAVITY_COUNT> = 4;

        <androidx.appcompat.widget.LinearLayoutCompat: int VERTICAL> = 1;

        <androidx.appcompat.widget.LinearLayoutCompat: int SHOW_DIVIDER_NONE> = 0;

        <androidx.appcompat.widget.LinearLayoutCompat: int SHOW_DIVIDER_MIDDLE> = 2;

        <androidx.appcompat.widget.LinearLayoutCompat: int SHOW_DIVIDER_END> = 4;

        <androidx.appcompat.widget.LinearLayoutCompat: int SHOW_DIVIDER_BEGINNING> = 1;

        <androidx.appcompat.widget.LinearLayoutCompat: int INDEX_TOP> = 1;

        <androidx.appcompat.widget.LinearLayoutCompat: int INDEX_FILL> = 3;

        <androidx.appcompat.widget.LinearLayoutCompat: int INDEX_CENTER_VERTICAL> = 0;

        <androidx.appcompat.widget.LinearLayoutCompat: int INDEX_BOTTOM> = 2;

        <androidx.appcompat.widget.LinearLayoutCompat: int HORIZONTAL> = 0;

        <androidx.appcompat.widget.LinearLayoutCompat: java.lang.String ACCESSIBILITY_CLASS_NAME> = "androidx.appcompat.widget.LinearLayoutCompat";

        return;
    }
}
