public class androidx.constraintlayout.solver.LinearSystem extends java.lang.Object
{
    public static long ARRAY_ROW_CREATION;
    public static final boolean DEBUG;
    private static final boolean DEBUG_CONSTRAINTS;
    public static final boolean FULL_DEBUG;
    public static final boolean MEASURE;
    public static long OPTIMIZED_ARRAY_ROW_CREATION;
    public static boolean OPTIMIZED_ENGINE;
    private static int POOL_SIZE;
    static final boolean SIMPLIFY_SYNONYMS;
    private static final boolean USE_SYNONYMS;
    public static androidx.constraintlayout.solver.Metrics sMetrics;
    private int TABLE_SIZE;
    public boolean graphOptimizer;
    private boolean[] mAlreadyTestedCandidates;
    final androidx.constraintlayout.solver.Cache mCache;
    private androidx.constraintlayout.solver.LinearSystem$Row mGoal;
    private int mMaxColumns;
    private int mMaxRows;
    int mNumColumns;
    int mNumRows;
    private androidx.constraintlayout.solver.SolverVariable[] mPoolVariables;
    private int mPoolVariablesCount;
    androidx.constraintlayout.solver.ArrayRow[] mRows;
    private androidx.constraintlayout.solver.LinearSystem$Row mTempGoal;
    private java.util.HashMap mVariables;
    int mVariablesID;
    public boolean newgraphOptimizer;

    static void <clinit>()
    {
        <androidx.constraintlayout.solver.LinearSystem: boolean USE_SYNONYMS> = 1;

        <androidx.constraintlayout.solver.LinearSystem: boolean SIMPLIFY_SYNONYMS> = 0;

        <androidx.constraintlayout.solver.LinearSystem: boolean MEASURE> = 0;

        <androidx.constraintlayout.solver.LinearSystem: boolean FULL_DEBUG> = 0;

        <androidx.constraintlayout.solver.LinearSystem: boolean DEBUG_CONSTRAINTS> = 0;

        <androidx.constraintlayout.solver.LinearSystem: boolean DEBUG> = 0;

        <androidx.constraintlayout.solver.LinearSystem: long ARRAY_ROW_CREATION> = 0L;

        <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE> = 1000;

        <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE> = 1;

        <androidx.constraintlayout.solver.LinearSystem: long ARRAY_ROW_CREATION> = 0L;

        <androidx.constraintlayout.solver.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION> = 0L;

        return;
    }

    public void <init>()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        boolean[] $u1;
        int $u1#5;
        androidx.constraintlayout.solver.SolverVariable[] $u1#6;
        androidx.constraintlayout.solver.ArrayRow[] $u0;
        androidx.constraintlayout.solver.Cache $u0#8;
        androidx.constraintlayout.solver.PriorityGoalRow $u0#9;
        boolean $u0#11;
        androidx.constraintlayout.solver.LinearSystem$ValuesRow $u0#12;
        androidx.constraintlayout.solver.ArrayRow $u0#14;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = 0;

        this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = null;

        this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE> = 32;

        this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns> = 32;

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = null;

        this.<androidx.constraintlayout.solver.LinearSystem: boolean graphOptimizer> = 0;

        this.<androidx.constraintlayout.solver.LinearSystem: boolean newgraphOptimizer> = 0;

        $u1 = newarray (boolean)[32];

        this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates> = $u1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = 0;

        this.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows> = 32;

        $u1#5 = <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE>;

        $u1#6 = newarray (androidx.constraintlayout.solver.SolverVariable)[$u1#5];

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables> = $u1#6;

        this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = 0;

        $u0 = newarray (androidx.constraintlayout.solver.ArrayRow)[32];

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = $u0;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void releaseRows()>();

        $u0#8 = new androidx.constraintlayout.solver.Cache;

        specialinvoke $u0#8.<androidx.constraintlayout.solver.Cache: void <init>()>();

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache> = $u0#8;

        $u0#9 = new androidx.constraintlayout.solver.PriorityGoalRow;

        $u0#8 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $u0#9.<androidx.constraintlayout.solver.PriorityGoalRow: void <init>(androidx.constraintlayout.solver.Cache)>($u0#8);

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal> = $u0#9;

        $u0#11 = <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $u0#11 == 0 goto label1;

        $u0#12 = new androidx.constraintlayout.solver.LinearSystem$ValuesRow;

        $u0#8 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $u0#12.<androidx.constraintlayout.solver.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.Cache)>(this, $u0#8);

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal> = $u0#12;

        return;

     label1:
        $u0#14 = new androidx.constraintlayout.solver.ArrayRow;

        $u0#8 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $u0#14.<androidx.constraintlayout.solver.ArrayRow: void <init>(androidx.constraintlayout.solver.Cache)>($u0#8);

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal> = $u0#14;

        return;
    }

    private androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable$Type $u5;
        java.lang.String $u6;
        int $u3, $u2;
        androidx.constraintlayout.solver.Cache variable;
        androidx.constraintlayout.solver.Pools$Pool variable#2;
        java.lang.Object $u-1;
        androidx.constraintlayout.solver.SolverVariable variable#5, $u1;
        androidx.constraintlayout.solver.SolverVariable[] $u1#10;
        java.lang.Object[] $u-1#11;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u5 := @parameter0: androidx.constraintlayout.solver.SolverVariable$Type;

        $u6 := @parameter1: java.lang.String;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        variable#2 = variable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool solverVariablePool>;

        $u-1 = interfaceinvoke variable#2.<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>();

        variable#5 = (androidx.constraintlayout.solver.SolverVariable) $u-1;

        if variable#5 != null goto label1;

        $u1 = new androidx.constraintlayout.solver.SolverVariable;

        specialinvoke $u1.<androidx.constraintlayout.solver.SolverVariable: void <init>(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($u5, $u6);

        variable#5 = $u1;

        virtualinvoke $u1.<androidx.constraintlayout.solver.SolverVariable: void setType(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($u5, $u6);

        goto label2;

     label1:
        virtualinvoke variable#5.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

        virtualinvoke variable#5.<androidx.constraintlayout.solver.SolverVariable: void setType(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($u5, $u6);

     label2:
        $u3 = this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        $u2 = <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE>;

        if $u3 < $u2 goto label3;

        $u3 = $u2 * 2;

        <androidx.constraintlayout.solver.LinearSystem: int POOL_SIZE> = $u3;

        $u1#10 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        $u-1#11 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($u1#10, $u3);

        $u1#10 = (androidx.constraintlayout.solver.SolverVariable[]) $u-1#11;

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables> = $u1#10;

     label3:
        $u1#10 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        $u3 = $u2 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = $u3;

        $u1#10[$u2] = variable#5;

        return variable#5;
    }

    private void addError(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u2;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        virtualinvoke $u2.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>(this, 0);

        return;
    }

    private final void addRow(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u4, $u0#4;
        boolean $u0;
        androidx.constraintlayout.solver.ArrayRow[] $u0#2;
        int $u1;
        androidx.constraintlayout.solver.Cache $u0#5;
        androidx.constraintlayout.solver.Pools$Pool $u0#6;
        androidx.constraintlayout.solver.SolverVariable $u0#20;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $u0 = <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $u0 == 0 goto label1;

        $u0#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#4 = $u0#2[$u1];

        if $u0#4 == null goto label2;

        $u0#5 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u0#6 = $u0#5.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool optimizedArrayRowPool>;

        $u0#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#4 = $u0#2[$u1];

        interfaceinvoke $u0#6.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>($u0#4);

        goto label2;

     label1:
        $u0#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#4 = $u0#2[$u1];

        if $u0#4 == null goto label2;

        $u0#5 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u0#6 = $u0#5.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        $u0#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#4 = $u0#2[$u1];

        interfaceinvoke $u0#6.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>($u0#4);

     label2:
        $u0#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#2[$u1] = $u4;

        $u0#20 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u0#20.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = $u1;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u1 = $u1 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = $u1;

        $u0#20 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $u0#20.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($u4);

        return;
    }

    private void addSingleError(androidx.constraintlayout.solver.ArrayRow, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u2;
        int $u3;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $u3 := @parameter1: int;

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($u2, $u3, 0);

        return;
    }

    private void computeValues()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u2;
        float $u3;
        int i, row;
        androidx.constraintlayout.solver.ArrayRow[] row#3;
        androidx.constraintlayout.solver.ArrayRow row#4;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        i = 0;

     label1:
        row = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= row goto label2;

        row#3 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        row#4 = row#3[i];

        $u2 = row#4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u3 = row#4.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $u2.<androidx.constraintlayout.solver.SolverVariable: float computedValue> = $u3;

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public static androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.LinearSystem, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.LinearSystem $u2;
        androidx.constraintlayout.solver.SolverVariable $u3, $u4;
        float $u5;
        androidx.constraintlayout.solver.ArrayRow $u-1;

        $u2 := @parameter0: androidx.constraintlayout.solver.LinearSystem;

        $u3 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u4 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter3: float;

        $u-1 = virtualinvoke $u2.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u-1 = virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDimensionPercent(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($u3, $u4, $u5);

        return $u-1;
    }

    private androidx.constraintlayout.solver.SolverVariable createVariable(java.lang.String, androidx.constraintlayout.solver.SolverVariable$Type)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String $u6;
        androidx.constraintlayout.solver.SolverVariable$Type $u7;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.Metrics variable;
        long $u1;
        int variable#4, $u1#6;
        java.util.HashMap $u1#13;
        androidx.constraintlayout.solver.Cache $u1#16;
        androidx.constraintlayout.solver.SolverVariable[] $u1#17;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u6 := @parameter0: java.lang.String;

        $u7 := @parameter1: androidx.constraintlayout.solver.SolverVariable$Type;

        variable = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable == null goto label1;

        $u1 = variable.<androidx.constraintlayout.solver.Metrics: long variables>;

        $u1 = $u1 + 1L;

        variable.<androidx.constraintlayout.solver.Metrics: long variables> = $u1;

     label1:
        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable#4 = variable#4 + 1;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if variable#4 < $u1#6 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>($u7, null);

        virtualinvoke $u-1.<androidx.constraintlayout.solver.SolverVariable: void setName(java.lang.String)>($u6);

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        variable#4 = variable#4 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = variable#4;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u1#6 = $u1#6 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $u1#6;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int id> = variable#4;

        $u1#13 = this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if $u1#13 != null goto label3;

        $u1#13 = new java.util.HashMap;

        specialinvoke $u1#13.<java.util.HashMap: void <init>()>();

        this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = $u1#13;

     label3:
        $u1#13 = this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        virtualinvoke $u1#13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u6, $u-1);

        $u1#16 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#17 = $u1#16.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $u1#17[variable#4] = $u-1;

        return $u-1;
    }

    private void displayRows()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String s;
        int i, $u2;
        java.lang.StringBuilder $u2#4;
        androidx.constraintlayout.solver.ArrayRow[] $u4;
        androidx.constraintlayout.solver.ArrayRow $u4#6;
        androidx.constraintlayout.solver.LinearSystem$Row $u2#12;
        java.io.PrintStream i#15;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        s = "";

        i = 0;

     label1:
        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= $u2 goto label2;

        $u2#4 = new java.lang.StringBuilder;

        specialinvoke $u2#4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $u4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u4#6 = $u4[i];

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u4#6);

        s = virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.String toString()>();

        $u2#4 = new java.lang.StringBuilder;

        specialinvoke $u2#4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.String toString()>();

        i = i + 1;

        goto label1;

     label2:
        $u2#4 = new java.lang.StringBuilder;

        specialinvoke $u2#4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $u2#12 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u2#12);

        virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u2#4.<java.lang.StringBuilder: java.lang.String toString()>();

        i#15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke i#15.<java.io.PrintStream: void println(java.lang.String)>(s);

        return;
    }

    private void displaySolverVariables()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String $u-1;
        java.lang.StringBuilder s;
        int $u1;
        java.io.PrintStream $u1#8;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        s = new java.lang.StringBuilder;

        specialinvoke s.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke s.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Rows (");

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        virtualinvoke s.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u1);

        virtualinvoke s.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        virtualinvoke s.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u1);

        virtualinvoke s.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $u-1 = virtualinvoke s.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1#8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $u1#8.<java.io.PrintStream: void println(java.lang.String)>($u-1);

        return;
    }

    private int enforceBFS(androidx.constraintlayout.solver.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.LinearSystem$Row $u18;
        byte $u16;
        float $u-1, a_j#13, value#46;
        boolean infeasibleSystem, j;
        int i, variable, pivotRowIndex, pivotColumnIndex, i1, current, candidate;
        androidx.constraintlayout.solver.ArrayRow[] variable#6;
        androidx.constraintlayout.solver.ArrayRow variable#7;
        androidx.constraintlayout.solver.SolverVariable variable#8;
        androidx.constraintlayout.solver.SolverVariable$Type a_j, k;
        androidx.constraintlayout.solver.Metrics variable#17;
        long strength;
        androidx.constraintlayout.solver.Cache candidate#37;
        androidx.constraintlayout.solver.SolverVariable[] candidate#38;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables a_j#40;
        float[] value;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u18 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        infeasibleSystem = 0;

        i = 0;

     label01:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= variable goto label04;

        variable#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        variable#7 = variable#6[i];

        variable#8 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        a_j = variable#8.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        k = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if a_j != k goto label02;

        goto label03;

     label02:
        variable#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        variable#7 = variable#6[i];

        a_j#13 = variable#7.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $u16 = a_j#13 cmpg 0.0F;

        if $u16 >= 0 goto label03;

        infeasibleSystem = 1;

        goto label04;

     label03:
        i = i + 1;

        goto label01;

     label04:
        if infeasibleSystem == 0 goto label23;

        infeasibleSystem = 0;

        i = 0;

     label05:
        if infeasibleSystem != 0 goto label24;

        variable#17 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable#17 == null goto label06;

        strength = variable#17.<androidx.constraintlayout.solver.Metrics: long bfs>;

        strength = strength + 1L;

        variable#17.<androidx.constraintlayout.solver.Metrics: long bfs> = strength;

     label06:
        i = i + 1;

        a_j#13 = 3.4028235E38F;

        variable = 0;

        pivotRowIndex = -1;

        pivotColumnIndex = -1;

        i1 = 0;

     label07:
        current = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i1 >= current goto label18;

        variable#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        variable#7 = variable#6[i1];

        variable#8 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        a_j = variable#8.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        k = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if a_j != k goto label08;

        goto label17;

     label08:
        j = variable#7.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if j == 0 goto label09;

        goto label17;

     label09:
        $u-1 = variable#7.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        $u16 = $u-1 cmpg 0.0F;

        if $u16 >= 0 goto label17;

        current = 1;

     label10:
        candidate = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        if current >= candidate goto label17;

        candidate#37 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        candidate#38 = candidate#37.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#8 = candidate#38[current];

        a_j#40 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        $u-1 = interfaceinvoke a_j#40.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.solver.SolverVariable)>(variable#8);

        $u16 = $u-1 cmpg 0.0F;

        if $u16 > 0 goto label11;

        goto label16;

     label11:
        candidate = 0;

     label12:
        if candidate >= 9 goto label16;

        value = variable#8.<androidx.constraintlayout.solver.SolverVariable: float[] strengthVector>;

        value#46 = value[candidate];

        value#46 = value#46 / $u-1;

        $u16 = value#46 cmpg a_j#13;

        if $u16 >= 0 goto label13;

        if candidate == variable goto label14;

     label13:
        if candidate <= variable goto label15;

     label14:
        a_j#13 = value#46;

        pivotRowIndex = i1;

        pivotColumnIndex = current;

        variable = candidate;

     label15:
        candidate = candidate + 1;

        goto label12;

     label16:
        current = current + 1;

        goto label10;

     label17:
        i1 = i1 + 1;

        goto label07;

     label18:
        if pivotRowIndex == -1 goto label20;

        variable#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        variable#7 = variable#6[pivotRowIndex];

        variable#8 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        variable#8.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        variable#17 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable#17 == null goto label19;

        strength = variable#17.<androidx.constraintlayout.solver.Metrics: long pivots>;

        strength = strength + 1L;

        variable#17.<androidx.constraintlayout.solver.Metrics: long pivots> = strength;

     label19:
        candidate#37 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        candidate#38 = candidate#37.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#8 = candidate#38[pivotColumnIndex];

        virtualinvoke variable#7.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>(variable#8);

        variable#8 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        variable#8.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = pivotRowIndex;

        variable#8 = variable#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke variable#8.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>(variable#7);

        goto label21;

     label20:
        infeasibleSystem = 1;

     label21:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable = variable / 2;

        if i <= variable goto label22;

        infeasibleSystem = 1;

     label22:
        goto label05;

     label23:
        return 0;

     label24:
        return i;
    }

    private java.lang.String getDisplaySize(int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u5, mb;
        java.lang.StringBuilder kb;
        java.lang.String $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u5 := @parameter0: int;

        mb = $u5 * 4;

        mb = mb / 1024;

        mb = mb / 1024;

        if mb <= 0 goto label1;

        kb = new java.lang.StringBuilder;

        specialinvoke kb.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(mb);

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Mb");

        $u-1 = virtualinvoke kb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $u-1;

     label1:
        mb = $u5 * 4;

        mb = mb / 1024;

        if mb <= 0 goto label2;

        kb = new java.lang.StringBuilder;

        specialinvoke kb.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(mb);

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Kb");

        $u-1 = virtualinvoke kb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $u-1;

     label2:
        kb = new java.lang.StringBuilder;

        specialinvoke kb.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $u5 = $u5 * 4;

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($u5);

        virtualinvoke kb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $u-1 = virtualinvoke kb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $u-1;
    }

    private java.lang.String getDisplayStrength(int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u2;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 := @parameter0: int;

        if $u2 != 1 goto label1;

        return "LOW";

     label1:
        if $u2 != 2 goto label2;

        return "MEDIUM";

     label2:
        if $u2 != 3 goto label3;

        return "HIGH";

     label3:
        if $u2 != 4 goto label4;

        return "HIGHEST";

     label4:
        if $u2 != 5 goto label5;

        return "EQUALITY";

     label5:
        if $u2 != 8 goto label6;

        return "FIXED";

     label6:
        if $u2 != 6 goto label7;

        return "BARRIER";

     label7:
        return "NONE";
    }

    public static androidx.constraintlayout.solver.Metrics getMetrics()
    {
        androidx.constraintlayout.solver.Metrics ret0;

        ret0 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        return ret0;
    }

    private void increaseTableSize()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u2;
        androidx.constraintlayout.solver.ArrayRow[] $u1;
        java.lang.Object[] $u-1;
        androidx.constraintlayout.solver.Cache $u0;
        androidx.constraintlayout.solver.SolverVariable[] $u1#8;
        boolean[] $u1#13;
        androidx.constraintlayout.solver.Metrics $u0#14;
        long $u1#15, $u3;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $u2 = $u2 * 2;

        this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE> = $u2;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u-1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($u1, $u2);

        $u1 = (androidx.constraintlayout.solver.ArrayRow[]) $u-1;

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows> = $u1;

        $u0 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#8 = $u0.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $u-1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($u1#8, $u2);

        $u1#8 = (androidx.constraintlayout.solver.SolverVariable[]) $u-1;

        $u0.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables> = $u1#8;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $u1#13 = newarray (boolean)[$u2];

        this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates> = $u1#13;

        this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns> = $u2;

        this.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows> = $u2;

        $u0#14 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $u0#14 == null goto label1;

        $u1#15 = $u0#14.<androidx.constraintlayout.solver.Metrics: long tableSizeIncrease>;

        $u1#15 = $u1#15 + 1L;

        $u0#14.<androidx.constraintlayout.solver.Metrics: long tableSizeIncrease> = $u1#15;

        $u0#14 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $u1#15 = $u0#14.<androidx.constraintlayout.solver.Metrics: long maxTableSize>;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        $u3 = (long) $u2;

        $u1#15 = staticinvoke <java.lang.Math: long max(long,long)>($u1#15, $u3);

        $u0#14.<androidx.constraintlayout.solver.Metrics: long maxTableSize> = $u1#15;

        $u0#14 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $u1#15 = $u0#14.<androidx.constraintlayout.solver.Metrics: long maxTableSize>;

        $u0#14.<androidx.constraintlayout.solver.Metrics: long lastTableSize> = $u1#15;

     label1:
        return;
    }

    private final int optimize(androidx.constraintlayout.solver.LinearSystem$Row, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.LinearSystem$Row $u14;
        boolean $u15, pivotRowIndex;
        byte $u12;
        androidx.constraintlayout.solver.Metrics done;
        long tries;
        int tries#5, i, min, current;
        boolean[] min#8;
        androidx.constraintlayout.solver.SolverVariable $u-1, variable;
        float min#30, $u-1#43, value#47;
        androidx.constraintlayout.solver.ArrayRow[] current#34;
        androidx.constraintlayout.solver.ArrayRow current#35;
        androidx.constraintlayout.solver.SolverVariable$Type a_j, value;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables a_j#42;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u14 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        $u15 := @parameter1: boolean;

        done = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if done == null goto label01;

        tries = done.<androidx.constraintlayout.solver.Metrics: long optimize>;

        tries = tries + 1L;

        done.<androidx.constraintlayout.solver.Metrics: long optimize> = tries;

     label01:
        $u15 = 0;

        tries#5 = 0;

        i = 0;

     label02:
        min = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        if i >= min goto label03;

        min#8 = this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        min#8[i] = 0;

        i = i + 1;

        goto label02;

     label03:
        if $u15 != 0 goto label17;

        done = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if done == null goto label04;

        tries = done.<androidx.constraintlayout.solver.Metrics: long iterations>;

        tries = tries + 1L;

        done.<androidx.constraintlayout.solver.Metrics: long iterations> = tries;

     label04:
        tries#5 = tries#5 + 1;

        i = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        i = i * 2;

        if tries#5 < i goto label05;

        return tries#5;

     label05:
        $u-1 = interfaceinvoke $u14.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getKey()>();

        if $u-1 == null goto label06;

        min#8 = this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $u-1 = interfaceinvoke $u14.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getKey()>();

        i = $u-1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        min#8[i] = 1;

     label06:
        min#8 = this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $u-1 = interfaceinvoke $u14.<androidx.constraintlayout.solver.LinearSystem$Row: androidx.constraintlayout.solver.SolverVariable getPivotCandidate(androidx.constraintlayout.solver.LinearSystem,boolean[])>(this, min#8);

        if $u-1 == null goto label08;

        min#8 = this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        i = $u-1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        pivotRowIndex = min#8[i];

        if pivotRowIndex == 0 goto label07;

        return tries#5;

     label07:
        min#8 = this.<androidx.constraintlayout.solver.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        i = $u-1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        min#8[i] = 1;

     label08:
        if $u-1 == null goto label16;

        min#30 = 3.4028235E38F;

        i = -1;

        min = 0;

     label09:
        current = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if min >= current goto label13;

        current#34 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        current#35 = current#34[min];

        variable = current#35.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        a_j = variable.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        value = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if a_j != value goto label10;

        goto label12;

     label10:
        pivotRowIndex = current#35.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if pivotRowIndex == 0 goto label11;

        goto label12;

     label11:
        pivotRowIndex = virtualinvoke current#35.<androidx.constraintlayout.solver.ArrayRow: boolean hasVariable(androidx.constraintlayout.solver.SolverVariable)>($u-1);

        if pivotRowIndex == 0 goto label12;

        a_j#42 = current#35.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        $u-1#43 = interfaceinvoke a_j#42.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($u-1);

        $u12 = $u-1#43 cmpg 0.0F;

        if $u12 >= 0 goto label12;

        value#47 = current#35.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        value#47 = neg value#47;

        $u-1#43 = value#47 / $u-1#43;

        $u12 = $u-1#43 cmpg min#30;

        if $u12 >= 0 goto label12;

        min#30 = $u-1#43;

        i = min;

     label12:
        min = min + 1;

        goto label09;

     label13:
        if i <= -1 goto label15;

        current#34 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        current#35 = current#34[i];

        variable = current#35.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        variable.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = -1;

        done = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if done == null goto label14;

        tries = done.<androidx.constraintlayout.solver.Metrics: long pivots>;

        tries = tries + 1L;

        done.<androidx.constraintlayout.solver.Metrics: long pivots> = tries;

     label14:
        virtualinvoke current#35.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>($u-1);

        $u-1 = current#35.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int definitionId> = i;

        $u-1 = current#35.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>(current#35);

     label15:
        goto label03;

     label16:
        $u15 = 1;

        goto label03;

     label17:
        return tries#5;
    }

    private void releaseRows()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        boolean i;
        int i#2, $u3;
        androidx.constraintlayout.solver.ArrayRow[] row;
        androidx.constraintlayout.solver.ArrayRow row#5;
        androidx.constraintlayout.solver.Cache $u3#6;
        androidx.constraintlayout.solver.Pools$Pool $u3#7;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        i = <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if i == 0 goto label4;

        i#2 = 0;

     label1:
        row = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u3 = lengthof row;

        if i#2 >= $u3 goto label3;

        row#5 = row[i#2];

        if row#5 == null goto label2;

        $u3#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u3#7 = $u3#6.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $u3#7.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>(row#5);

     label2:
        row = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        row[i#2] = null;

        i#2 = i#2 + 1;

        goto label1;

     label3:
        return;

     label4:
        i#2 = 0;

     label5:
        row = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u3 = lengthof row;

        if i#2 >= $u3 goto label7;

        row#5 = row[i#2];

        if row#5 == null goto label6;

        $u3#6 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u3#7 = $u3#6.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        interfaceinvoke $u3#7.<androidx.constraintlayout.solver.Pools$Pool: boolean release(java.lang.Object)>(row#5);

     label6:
        row = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        row[i#2] = null;

        i#2 = i#2 + 1;

        goto label5;

     label7:
        return;
    }

    public void addCenterPoint(androidx.constraintlayout.solver.widgets.ConstraintWidget, androidx.constraintlayout.solver.widgets.ConstraintWidget, float, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.widgets.ConstraintWidget $u22, $u23;
        float $u24, angleComponent1;
        int $u25;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type Al;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $u-1;
        androidx.constraintlayout.solver.SolverVariable $u-1#4, $u-1#9, $u-1#13, $u-1#17, $u-1#21, $u-1#25, $u-1#29, $u-1#33;
        androidx.constraintlayout.solver.ArrayRow $u-1#34;
        double $u7, $u9;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u22 := @parameter0: androidx.constraintlayout.solver.widgets.ConstraintWidget;

        $u23 := @parameter1: androidx.constraintlayout.solver.widgets.ConstraintWidget;

        $u24 := @parameter2: float;

        $u25 := @parameter3: int;

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type LEFT>;

        $u-1 = virtualinvoke $u22.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#4 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type TOP>;

        $u-1 = virtualinvoke $u22.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#9 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type RIGHT>;

        $u-1 = virtualinvoke $u22.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#13 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type BOTTOM>;

        $u-1 = virtualinvoke $u22.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#17 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type LEFT>;

        $u-1 = virtualinvoke $u23.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#21 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type TOP>;

        $u-1 = virtualinvoke $u23.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#25 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type RIGHT>;

        $u-1 = virtualinvoke $u23.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#29 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        Al = <androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type BOTTOM>;

        $u-1 = virtualinvoke $u23.<androidx.constraintlayout.solver.widgets.ConstraintWidget: androidx.constraintlayout.solver.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type)>(Al);

        $u-1#33 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)>($u-1);

        $u-1#34 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u7 = (double) $u24;

        $u7 = staticinvoke <java.lang.Math: double sin(double)>($u7);

        $u9 = (double) $u25;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($u9);

        $u7 = $u7 * $u9;

        angleComponent1 = (float) $u7;

        virtualinvoke $u-1#34.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowWithAngle(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($u-1#9, $u-1#17, $u-1#25, $u-1#33, angleComponent1);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1#34);

        $u-1#34 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u7 = (double) $u24;

        $u7 = staticinvoke <java.lang.Math: double cos(double)>($u7);

        $u9 = (double) $u25;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($u9);

        $u7 = $u7 * $u9;

        $u24 = (float) $u7;

        virtualinvoke $u-1#34.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowWithAngle(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($u-1#4, $u-1#13, $u-1#21, $u-1#29, $u24);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1#34);

        return;
    }

    public void addCentering(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, float, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u12, $u13, $u16, $u17;
        int $u14, $u18, $u19;
        float $u15;
        androidx.constraintlayout.solver.ArrayRow $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u12 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u13 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u14 := @parameter2: int;

        $u15 := @parameter3: float;

        $u16 := @parameter4: androidx.constraintlayout.solver.SolverVariable;

        $u17 := @parameter5: androidx.constraintlayout.solver.SolverVariable;

        $u18 := @parameter6: int;

        $u19 := @parameter7: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowCentering(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int,float,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u12, $u13, $u14, $u15, $u16, $u17, $u18);

        if $u19 == 8 goto label1;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>(this, $u19);

     label1:
        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    public void addConstraint(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u10;
        androidx.constraintlayout.solver.Metrics added;
        long $u3;
        boolean added#5, extra#17;
        int added#9, extra;
        androidx.constraintlayout.solver.SolverVariable $u-1, pivotCandidate#28;
        androidx.constraintlayout.solver.LinearSystem$Row pivotCandidate;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u10 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        if $u10 != null goto label01;

        return;

     label01:
        added = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if added == null goto label02;

        $u3 = added.<androidx.constraintlayout.solver.Metrics: long constraints>;

        $u3 = $u3 + 1L;

        added.<androidx.constraintlayout.solver.Metrics: long constraints> = $u3;

        added#5 = $u10.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if added#5 == 0 goto label02;

        added = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $u3 = added.<androidx.constraintlayout.solver.Metrics: long simpleconstraints>;

        $u3 = $u3 + 1L;

        added.<androidx.constraintlayout.solver.Metrics: long simpleconstraints> = $u3;

     label02:
        added#9 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        added#9 = added#9 + 1;

        extra = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows>;

        if added#9 >= extra goto label03;

        added#9 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        added#9 = added#9 + 1;

        extra = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if added#9 < extra goto label04;

     label03:
        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label04:
        added#5 = 0;

        extra#17 = $u10.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if extra#17 != 0 goto label10;

        virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: void updateFromSystem(androidx.constraintlayout.solver.LinearSystem)>(this);

        extra#17 = virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: boolean isEmpty()>();

        if extra#17 == 0 goto label05;

        return;

     label05:
        virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: void ensurePositiveConstant()>();

        extra#17 = virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: boolean chooseSubject(androidx.constraintlayout.solver.LinearSystem)>(this);

        if extra#17 == 0 goto label09;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createExtraVariable()>();

        $u10.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable> = $u-1;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addRow(androidx.constraintlayout.solver.ArrayRow)>($u10);

        added#5 = 1;

        pivotCandidate = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal>;

        interfaceinvoke pivotCandidate.<androidx.constraintlayout.solver.LinearSystem$Row: void initFromRow(androidx.constraintlayout.solver.LinearSystem$Row)>($u10);

        pivotCandidate = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal>;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean)>(pivotCandidate, 1);

        added#9 = $u-1.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if added#9 != -1 goto label09;

        pivotCandidate#28 = $u10.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        if pivotCandidate#28 != $u-1 goto label07;

        $u-1 = virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable pickPivot(androidx.constraintlayout.solver.SolverVariable)>($u-1);

        if $u-1 == null goto label07;

        added = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if added == null goto label06;

        $u3 = added.<androidx.constraintlayout.solver.Metrics: long pivots>;

        $u3 = $u3 + 1L;

        added.<androidx.constraintlayout.solver.Metrics: long pivots> = $u3;

     label06:
        virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: void pivot(androidx.constraintlayout.solver.SolverVariable)>($u-1);

     label07:
        extra#17 = $u10.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if extra#17 != 0 goto label08;

        $u-1 = $u10.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.solver.ArrayRow)>($u10);

     label08:
        added#9 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        added#9 = added#9 - 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = added#9;

     label09:
        extra#17 = virtualinvoke $u10.<androidx.constraintlayout.solver.ArrayRow: boolean hasKeyVariable()>();

        if extra#17 != 0 goto label10;

        return;

     label10:
        if added#5 != 0 goto label11;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addRow(androidx.constraintlayout.solver.ArrayRow)>($u10);

     label11:
        return;
    }

    public androidx.constraintlayout.solver.ArrayRow addEquality(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u4, $u5;
        int $u6, $u7, row#3;
        androidx.constraintlayout.solver.ArrayRow $u-1;
        boolean row;
        float $u0, row#5;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u6 := @parameter2: int;

        $u7 := @parameter3: int;

        if $u7 != 8 goto label1;

        row = $u5.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue>;

        if row == 0 goto label1;

        row#3 = $u4.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if row#3 != -1 goto label1;

        $u0 = $u5.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        row#5 = (float) $u6;

        $u0 = $u0 + row#5;

        virtualinvoke $u4.<androidx.constraintlayout.solver.SolverVariable: void setFinalValue(androidx.constraintlayout.solver.LinearSystem,float)>(this, $u0);

        return null;

     label1:
        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u4, $u5, $u6);

        if $u7 == 8 goto label2;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>(this, $u7);

     label2:
        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return $u-1;
    }

    public void addEquality(androidx.constraintlayout.solver.SolverVariable, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u4;
        int $u5, idx, newRow;
        float idx#3;
        androidx.constraintlayout.solver.ArrayRow[] row;
        androidx.constraintlayout.solver.ArrayRow row#7;
        boolean newRow#8;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables newRow#10;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter1: int;

        idx = $u4.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if idx != -1 goto label1;

        idx#3 = (float) $u5;

        virtualinvoke $u4.<androidx.constraintlayout.solver.SolverVariable: void setFinalValue(androidx.constraintlayout.solver.LinearSystem,float)>(this, idx#3);

        return;

     label1:
        idx = $u4.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        newRow = $u4.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if newRow == -1 goto label5;

        row = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        row#7 = row[idx];

        newRow#8 = row#7.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if newRow#8 == 0 goto label2;

        idx#3 = (float) $u5;

        row#7.<androidx.constraintlayout.solver.ArrayRow: float constantValue> = idx#3;

        goto label4;

     label2:
        newRow#10 = row#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        idx = interfaceinvoke newRow#10.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: int getCurrentSize()>();

        if idx != 0 goto label3;

        row#7.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition> = 1;

        idx#3 = (float) $u5;

        row#7.<androidx.constraintlayout.solver.ArrayRow: float constantValue> = idx#3;

        goto label4;

     label3:
        row#7 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke row#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowEquals(androidx.constraintlayout.solver.SolverVariable,int)>($u4, $u5);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>(row#7);

     label4:
        return;

     label5:
        row#7 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke row#7.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDefinition(androidx.constraintlayout.solver.SolverVariable,int)>($u4, $u5);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>(row#7);

        return;
    }

    public void addGreaterBarrier(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u4, $u5, $u-1#2;
        int $u6;
        boolean $u7;
        androidx.constraintlayout.solver.ArrayRow $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u6 := @parameter2: int;

        $u7 := @parameter3: boolean;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u-1#2 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $u-1#2.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u4, $u5, $u-1#2, $u6);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    public void addGreaterThan(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u5, $u6, $u-1#2;
        int $u7, $u8;
        androidx.constraintlayout.solver.ArrayRow $u-1;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables slackValue;
        float $u-1#6;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u5 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u6 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u7 := @parameter2: int;

        $u8 := @parameter3: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u-1#2 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $u-1#2.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowGreaterThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u5, $u6, $u-1#2, $u7);

        if $u8 == 8 goto label1;

        slackValue = $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        $u-1#6 = interfaceinvoke slackValue.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($u-1#2);

        $u-1#6 = -1.0F * $u-1#6;

        $u7 = (int) $u-1#6;

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($u-1, $u7, $u8);

     label1:
        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    public void addLowerBarrier(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u4, $u5, $u-1#2;
        int $u6;
        boolean $u7;
        androidx.constraintlayout.solver.ArrayRow $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u5 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u6 := @parameter2: int;

        $u7 := @parameter3: boolean;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u-1#2 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $u-1#2.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u4, $u5, $u-1#2, $u6);

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    public void addLowerThan(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u5, $u6, $u-1#2;
        int $u7, $u8;
        androidx.constraintlayout.solver.ArrayRow $u-1;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables slackValue;
        float $u-1#6;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u5 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u6 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u7 := @parameter2: int;

        $u8 := @parameter3: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        $u-1#2 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createSlackVariable()>();

        $u-1#2.<androidx.constraintlayout.solver.SolverVariable: int strength> = 0;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowLowerThan(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,int)>($u5, $u6, $u-1#2, $u7);

        if $u8 == 8 goto label1;

        slackValue = $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        $u-1#6 = interfaceinvoke slackValue.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.solver.SolverVariable)>($u-1#2);

        $u-1#6 = -1.0F * $u-1#6;

        $u7 = (int) $u-1#6;

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addSingleError(androidx.constraintlayout.solver.ArrayRow,int,int)>($u-1, $u7, $u8);

     label1:
        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    public void addRatio(androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, androidx.constraintlayout.solver.SolverVariable, float, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u8, $u9, $u10, $u11;
        float $u12;
        int $u13;
        androidx.constraintlayout.solver.ArrayRow $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u8 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $u9 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        $u10 := @parameter2: androidx.constraintlayout.solver.SolverVariable;

        $u11 := @parameter3: androidx.constraintlayout.solver.SolverVariable;

        $u12 := @parameter4: float;

        $u13 := @parameter5: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow createRow()>();

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow createRowDimensionRatio(androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,androidx.constraintlayout.solver.SolverVariable,float)>($u8, $u9, $u10, $u11, $u12);

        if $u13 == 8 goto label1;

        virtualinvoke $u-1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addError(androidx.constraintlayout.solver.LinearSystem,int)>(this, $u13);

     label1:
        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void addConstraint(androidx.constraintlayout.solver.ArrayRow)>($u-1);

        return;
    }

    void addSingleError(androidx.constraintlayout.solver.ArrayRow, int, int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u3;
        int $u4, $u5;
        androidx.constraintlayout.solver.SolverVariable $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u3 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        $u4 := @parameter1: int;

        $u5 := @parameter2: int;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createErrorVariable(int,java.lang.String)>($u5, null);

        virtualinvoke $u3.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow addSingleError(androidx.constraintlayout.solver.SolverVariable,int)>($u-1, $u4);

        return;
    }

    final void cleanupRows()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u-1, i, $u4#12, $u5;
        androidx.constraintlayout.solver.ArrayRow[] current;
        androidx.constraintlayout.solver.ArrayRow current#4;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables j;
        boolean j#7;
        androidx.constraintlayout.solver.SolverVariable j#8;
        float $u4;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        i = 0;

     label1:
        $u-1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= $u-1 goto label6;

        current = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        current#4 = current[i];

        j = current#4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        $u-1 = interfaceinvoke j.<androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables: int getCurrentSize()>();

        if $u-1 != 0 goto label2;

        current#4.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition> = 1;

     label2:
        j#7 = current#4.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if j#7 == 0 goto label5;

        j#8 = current#4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u4 = current#4.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        j#8.<androidx.constraintlayout.solver.SolverVariable: float computedValue> = $u4;

        j#8 = current#4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke j#8.<androidx.constraintlayout.solver.SolverVariable: void removeFromRow(androidx.constraintlayout.solver.ArrayRow)>(current#4);

        $u-1 = i;

     label3:
        $u4#12 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u5 = $u4#12 + -1;

        if $u-1 >= $u5 goto label4;

        current = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u4#12 = $u-1 + 1;

        current#4 = current[$u4#12];

        current[$u-1] = current#4;

        $u-1 = $u-1 + 1;

        goto label3;

     label4:
        current = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u-1 = $u4#12 + -1;

        current[$u-1] = null;

        $u-1 = $u4#12 + -1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = $u-1;

        i = i + -1;

     label5:
        i = i + 1;

        goto label1;

     label6:
        return;
    }

    public androidx.constraintlayout.solver.SolverVariable createErrorVariable(int, java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u6, variable#4, $u1#6;
        java.lang.String $u7;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.Metrics variable;
        long $u1;
        androidx.constraintlayout.solver.SolverVariable$Type variable#7;
        androidx.constraintlayout.solver.Cache $u1#13;
        androidx.constraintlayout.solver.SolverVariable[] $u1#14;
        androidx.constraintlayout.solver.LinearSystem$Row $u1#16;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u6 := @parameter0: int;

        $u7 := @parameter1: java.lang.String;

        variable = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable == null goto label1;

        $u1 = variable.<androidx.constraintlayout.solver.Metrics: long errors>;

        $u1 = $u1 + 1L;

        variable.<androidx.constraintlayout.solver.Metrics: long errors> = $u1;

     label1:
        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable#4 = variable#4 + 1;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if variable#4 < $u1#6 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        variable#7 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type ERROR>;

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>(variable#7, $u7);

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        variable#4 = variable#4 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = variable#4;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u1#6 = $u1#6 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $u1#6;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int id> = variable#4;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int strength> = $u6;

        $u1#13 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#14 = $u1#13.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $u6 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $u1#14[$u6] = $u-1;

        $u1#16 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        interfaceinvoke $u1#16.<androidx.constraintlayout.solver.LinearSystem$Row: void addError(androidx.constraintlayout.solver.SolverVariable)>($u-1);

        return $u-1;
    }

    public androidx.constraintlayout.solver.SolverVariable createExtraVariable()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.Metrics variable;
        long $u1;
        int variable#4, $u1#6;
        androidx.constraintlayout.solver.SolverVariable$Type variable#7;
        androidx.constraintlayout.solver.Cache $u1#14;
        androidx.constraintlayout.solver.SolverVariable[] $u1#15;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        variable = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable == null goto label1;

        $u1 = variable.<androidx.constraintlayout.solver.Metrics: long extravariables>;

        $u1 = $u1 + 1L;

        variable.<androidx.constraintlayout.solver.Metrics: long extravariables> = $u1;

     label1:
        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable#4 = variable#4 + 1;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if variable#4 < $u1#6 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        variable#7 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>(variable#7, null);

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        variable#4 = variable#4 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = variable#4;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u1#6 = $u1#6 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $u1#6;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int id> = variable#4;

        $u1#14 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#15 = $u1#14.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $u1#15[variable#4] = $u-1;

        return $u-1;
    }

    public androidx.constraintlayout.solver.SolverVariable createObjectVariable(java.lang.Object)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.Object $u5;
        int variable, $u1;
        boolean $u1#6;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor $u1#8;
        androidx.constraintlayout.solver.SolverVariable $u-1, variable#10;
        androidx.constraintlayout.solver.Cache $u2;
        androidx.constraintlayout.solver.SolverVariable[] $u1#22;
        androidx.constraintlayout.solver.SolverVariable$Type $u1#30;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u5 := @parameter0: java.lang.Object;

        if $u5 != null goto label1;

        return null;

     label1:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable = variable + 1;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if variable < $u1 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        $u1#6 = $u5 instanceof androidx.constraintlayout.solver.widgets.ConstraintAnchor;

        if $u1#6 == 0 goto label6;

        $u1#8 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $u5;

        $u-1 = virtualinvoke $u1#8.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

        variable#10 = $u-1;

        if $u-1 != null goto label3;

        $u1#8 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $u5;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        virtualinvoke $u1#8.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: void resetSolverVariable(androidx.constraintlayout.solver.Cache)>($u2);

        $u1#8 = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $u5;

        variable#10 = virtualinvoke $u1#8.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

     label3:
        variable = variable#10.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if variable == -1 goto label4;

        variable = variable#10.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        if variable > $u1 goto label4;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#22 = $u2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable = variable#10.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $u-1 = $u1#22[variable];

        if $u-1 != null goto label7;

     label4:
        variable = variable#10.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if variable == -1 goto label5;

        virtualinvoke variable#10.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

     label5:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        variable = variable + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = variable;

        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u1 = $u1 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $u1;

        variable#10.<androidx.constraintlayout.solver.SolverVariable: int id> = variable;

        $u1#30 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        variable#10.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType> = $u1#30;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#22 = $u2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $u1#22[variable] = variable#10;

        return variable#10;

     label6:
        return null;

     label7:
        return variable#10;
    }

    public androidx.constraintlayout.solver.ArrayRow createRow()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        boolean row;
        androidx.constraintlayout.solver.Cache row#2;
        androidx.constraintlayout.solver.Pools$Pool row#3;
        java.lang.Object $u-1;
        androidx.constraintlayout.solver.ArrayRow row#6;
        androidx.constraintlayout.solver.LinearSystem$ValuesRow $u3;
        long $u3#9;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        row = <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if row == 0 goto label2;

        row#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        row#3 = row#2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool optimizedArrayRowPool>;

        $u-1 = interfaceinvoke row#3.<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>();

        row#6 = (androidx.constraintlayout.solver.ArrayRow) $u-1;

        if row#6 != null goto label1;

        $u3 = new androidx.constraintlayout.solver.LinearSystem$ValuesRow;

        row#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $u3.<androidx.constraintlayout.solver.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.Cache)>(this, row#2);

        row#6 = $u3;

        $u3#9 = <androidx.constraintlayout.solver.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION>;

        $u3#9 = $u3#9 + 1L;

        <androidx.constraintlayout.solver.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION> = $u3#9;

        goto label4;

     label1:
        virtualinvoke row#6.<androidx.constraintlayout.solver.ArrayRow: void reset()>();

        goto label4;

     label2:
        row#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        row#3 = row#2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool arrayRowPool>;

        $u-1 = interfaceinvoke row#3.<androidx.constraintlayout.solver.Pools$Pool: java.lang.Object acquire()>();

        row#6 = (androidx.constraintlayout.solver.ArrayRow) $u-1;

        if row#6 != null goto label3;

        row#6 = new androidx.constraintlayout.solver.ArrayRow;

        row#2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke row#6.<androidx.constraintlayout.solver.ArrayRow: void <init>(androidx.constraintlayout.solver.Cache)>(row#2);

        $u3#9 = <androidx.constraintlayout.solver.LinearSystem: long ARRAY_ROW_CREATION>;

        $u3#9 = $u3#9 + 1L;

        <androidx.constraintlayout.solver.LinearSystem: long ARRAY_ROW_CREATION> = $u3#9;

        goto label4;

     label3:
        virtualinvoke row#6.<androidx.constraintlayout.solver.ArrayRow: void reset()>();

     label4:
        staticinvoke <androidx.constraintlayout.solver.SolverVariable: void increaseErrorId()>();

        return row#6;
    }

    public androidx.constraintlayout.solver.SolverVariable createSlackVariable()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.Metrics variable;
        long $u1;
        int variable#4, $u1#6;
        androidx.constraintlayout.solver.SolverVariable$Type variable#7;
        androidx.constraintlayout.solver.Cache $u1#14;
        androidx.constraintlayout.solver.SolverVariable[] $u1#15;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        variable = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if variable == null goto label1;

        $u1 = variable.<androidx.constraintlayout.solver.Metrics: long slackvariables>;

        $u1 = $u1 + 1L;

        variable.<androidx.constraintlayout.solver.Metrics: long slackvariables> = $u1;

     label1:
        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        variable#4 = variable#4 + 1;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        if variable#4 < $u1#6 goto label2;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void increaseTableSize()>();

     label2:
        variable#7 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type SLACK>;

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable acquireSolverVariable(androidx.constraintlayout.solver.SolverVariable$Type,java.lang.String)>(variable#7, null);

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        variable#4 = variable#4 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = variable#4;

        $u1#6 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u1#6 = $u1#6 + 1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = $u1#6;

        $u-1.<androidx.constraintlayout.solver.SolverVariable: int id> = variable#4;

        $u1#14 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        $u1#15 = $u1#14.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        $u1#15[variable#4] = $u-1;

        return $u-1;
    }

    public void displayReadableRows()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String s;
        int i, variable;
        androidx.constraintlayout.solver.Cache variable#4;
        androidx.constraintlayout.solver.SolverVariable[] variable#5;
        androidx.constraintlayout.solver.SolverVariable variable#6;
        boolean $u4;
        java.lang.StringBuilder $u4#8;
        float $u5;
        androidx.constraintlayout.solver.ArrayRow[] $u4#21;
        androidx.constraintlayout.solver.ArrayRow $u4#22;
        androidx.constraintlayout.solver.LinearSystem$Row i#30;
        java.io.PrintStream i#35;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        s = "";

        i = 0;

     label1:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        if i >= variable goto label3;

        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        variable#5 = variable#4.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#6 = variable#5[i];

        if variable#6 == null goto label2;

        $u4 = variable#6.<androidx.constraintlayout.solver.SolverVariable: boolean isFinalValue>;

        if $u4 == 0 goto label2;

        $u4#8 = new java.lang.StringBuilder;

        specialinvoke $u4#8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" $[");

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] => ");

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(variable#6);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $u5 = variable#6.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($u5);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i = i + 1;

        goto label1;

     label3:
        $u4#8 = new java.lang.StringBuilder;

        specialinvoke $u4#8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n #  ");

        s = virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.String toString()>();

        i = 0;

     label4:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= variable goto label5;

        $u4#8 = new java.lang.StringBuilder;

        specialinvoke $u4#8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $u4#21 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u4#22 = $u4#21[i];

        s = virtualinvoke $u4#22.<androidx.constraintlayout.solver.ArrayRow: java.lang.String toReadableString()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        s = virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.String toString()>();

        $u4#8 = new java.lang.StringBuilder;

        specialinvoke $u4#8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n #  ");

        s = virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.String toString()>();

        i = i + 1;

        goto label4;

     label5:
        i#30 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        if i#30 == null goto label6;

        $u4#8 = new java.lang.StringBuilder;

        specialinvoke $u4#8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Goal: ");

        i#30 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(i#30);

        virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u4#8.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        i#35 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke i#35.<java.io.PrintStream: void println(java.lang.String)>(s);

        return;
    }

    void displaySystemInformations()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int rowSize, i, i1, $u4#11;
        androidx.constraintlayout.solver.ArrayRow[] i1#4;
        androidx.constraintlayout.solver.ArrayRow $u4;
        java.io.PrintStream i1#17;
        java.lang.StringBuilder $u4#18;
        java.lang.String $u-1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        rowSize = 0;

        i = 0;

     label1:
        i1 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        if i >= i1 goto label3;

        i1#4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u4 = i1#4[i];

        if $u4 == null goto label2;

        $u4 = i1#4[i];

        i1 = virtualinvoke $u4.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        rowSize = rowSize + i1;

     label2:
        i = i + 1;

        goto label1;

     label3:
        i = 0;

        i1 = 0;

     label4:
        $u4#11 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i1 >= $u4#11 goto label6;

        i1#4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u4 = i1#4[i1];

        if $u4 == null goto label5;

        $u4 = i1#4[i1];

        $u4#11 = virtualinvoke $u4.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        i = i + $u4#11;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        i1#17 = <java.lang.System: java.io.PrintStream out>;

        $u4#18 = new java.lang.StringBuilder;

        specialinvoke $u4#18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linear System -> Table size: ");

        i1 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        i1 = this.<androidx.constraintlayout.solver.LinearSystem: int TABLE_SIZE>;

        i1 = i1 * i1;

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>(i1);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") -- row sizes: ");

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>(rowSize);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual size: ");

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>(i);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows: ");

        rowSize = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(rowSize);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        rowSize = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxRows>;

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(rowSize);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cols: ");

        rowSize = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(rowSize);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        rowSize = this.<androidx.constraintlayout.solver.LinearSystem: int mMaxColumns>;

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(rowSize);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occupied cells, ");

        $u-1 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: java.lang.String getDisplaySize(int)>(0);

        virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        $u-1 = virtualinvoke $u4#18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke i1#17.<java.io.PrintStream: void println(java.lang.String)>($u-1);

        return;
    }

    public void displayVariablesReadableRows()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String s;
        int i, $u2;
        androidx.constraintlayout.solver.ArrayRow[] $u2#4;
        androidx.constraintlayout.solver.ArrayRow $u2#5;
        androidx.constraintlayout.solver.SolverVariable $u2#6;
        androidx.constraintlayout.solver.SolverVariable$Type $u2#7, $u4;
        java.lang.StringBuilder $u2#9;
        androidx.constraintlayout.solver.LinearSystem$Row $u2#19;
        java.io.PrintStream i#22;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void displaySolverVariables()>();

        s = "";

        i = 0;

     label1:
        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= $u2 goto label3;

        $u2#4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u2#5 = $u2#4[i];

        $u2#6 = $u2#5.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u2#7 = $u2#6.<androidx.constraintlayout.solver.SolverVariable: androidx.constraintlayout.solver.SolverVariable$Type mType>;

        $u4 = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        if $u2#7 != $u4 goto label2;

        $u2#9 = new java.lang.StringBuilder;

        specialinvoke $u2#9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $u2#4 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u2#5 = $u2#4[i];

        s = virtualinvoke $u2#5.<androidx.constraintlayout.solver.ArrayRow: java.lang.String toReadableString()>();

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        s = virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.String toString()>();

        $u2#9 = new java.lang.StringBuilder;

        specialinvoke $u2#9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i = i + 1;

        goto label1;

     label3:
        $u2#9 = new java.lang.StringBuilder;

        specialinvoke $u2#9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $u2#19 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u2#19);

        virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        s = virtualinvoke $u2#9.<java.lang.StringBuilder: java.lang.String toString()>();

        i#22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke i#22.<java.io.PrintStream: void println(java.lang.String)>(s);

        return;
    }

    public void fillMetrics(androidx.constraintlayout.solver.Metrics)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.Metrics $u1;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u1 := @parameter0: androidx.constraintlayout.solver.Metrics;

        <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics> = $u1;

        return;
    }

    public androidx.constraintlayout.solver.Cache getCache()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.Cache ret0;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        ret0 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        return ret0;
    }

    androidx.constraintlayout.solver.LinearSystem$Row getGoal()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.LinearSystem$Row ret0;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        ret0 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        return ret0;
    }

    public int getMemoryUsed()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u3;
        int $u-1, actualRowSize, i;
        androidx.constraintlayout.solver.ArrayRow[] $u2;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        actualRowSize = 0;

        i = 0;

     label1:
        $u-1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= $u-1 goto label3;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u3 = $u2[i];

        if $u3 == null goto label2;

        $u3 = $u2[i];

        $u-1 = virtualinvoke $u3.<androidx.constraintlayout.solver.ArrayRow: int sizeInBytes()>();

        actualRowSize = actualRowSize + $u-1;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return actualRowSize;
    }

    public int getNumEquations()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int ret0;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        ret0 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        return ret0;
    }

    public int getNumVariables()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int ret0;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        ret0 = this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID>;

        return ret0;
    }

    public int getObjectVariableValue(java.lang.Object)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.Object $u4;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.widgets.ConstraintAnchor variable;
        float $u1;
        int $u1#6;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: java.lang.Object;

        variable = (androidx.constraintlayout.solver.widgets.ConstraintAnchor) $u4;

        $u-1 = virtualinvoke variable.<androidx.constraintlayout.solver.widgets.ConstraintAnchor: androidx.constraintlayout.solver.SolverVariable getSolverVariable()>();

        if $u-1 == null goto label1;

        $u1 = $u-1.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        $u1 = $u1 + 0.5F;

        $u1#6 = (int) $u1;

        return $u1#6;

     label1:
        return 0;
    }

    androidx.constraintlayout.solver.ArrayRow getRow(int)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int $u2;
        androidx.constraintlayout.solver.ArrayRow[] $u0;
        androidx.constraintlayout.solver.ArrayRow $u0#2;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u0#2 = $u0[$u2];

        return $u0#2;
    }

    float getValueFor(java.lang.String)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String $u3;
        androidx.constraintlayout.solver.SolverVariable $u-1;
        androidx.constraintlayout.solver.SolverVariable$Type v;
        float ret0;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u3 := @parameter0: java.lang.String;

        v = <androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type UNRESTRICTED>;

        $u-1 = virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable getVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)>($u3, v);

        if $u-1 != null goto label1;

        return 0.0F;

     label1:
        ret0 = $u-1.<androidx.constraintlayout.solver.SolverVariable: float computedValue>;

        return ret0;
    }

    androidx.constraintlayout.solver.SolverVariable getVariable(java.lang.String, androidx.constraintlayout.solver.SolverVariable$Type)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        java.lang.String $u2;
        androidx.constraintlayout.solver.SolverVariable$Type $u3;
        java.util.HashMap variable;
        java.lang.Object $u-1;
        androidx.constraintlayout.solver.SolverVariable variable#6;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u2 := @parameter0: java.lang.String;

        $u3 := @parameter1: androidx.constraintlayout.solver.SolverVariable$Type;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if variable != null goto label1;

        variable = new java.util.HashMap;

        specialinvoke variable.<java.util.HashMap: void <init>()>();

        this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables> = variable;

     label1:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        $u-1 = virtualinvoke variable.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($u2);

        variable#6 = (androidx.constraintlayout.solver.SolverVariable) $u-1;

        if variable#6 != null goto label2;

        variable#6 = specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable createVariable(java.lang.String,androidx.constraintlayout.solver.SolverVariable$Type)>($u2, $u3);

     label2:
        return variable#6;
    }

    public void minimize() throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem this;
        boolean $u5, fullySolved#11;
        androidx.constraintlayout.solver.Metrics fullySolved;
        long i;
        androidx.constraintlayout.solver.LinearSystem$Row fullySolved#7;
        int i#12, r;
        androidx.constraintlayout.solver.ArrayRow[] r#14;
        androidx.constraintlayout.solver.ArrayRow r#15;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        fullySolved = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if fullySolved == null goto label01;

        i = fullySolved.<androidx.constraintlayout.solver.Metrics: long minimize>;

        i = i + 1L;

        fullySolved.<androidx.constraintlayout.solver.Metrics: long minimize> = i;

     label01:
        $u5 = this.<androidx.constraintlayout.solver.LinearSystem: boolean graphOptimizer>;

        if $u5 != 0 goto label03;

        $u5 = this.<androidx.constraintlayout.solver.LinearSystem: boolean newgraphOptimizer>;

        if $u5 == 0 goto label02;

        goto label03;

     label02:
        fullySolved#7 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row)>(fullySolved#7);

        return;

     label03:
        fullySolved = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if fullySolved == null goto label04;

        i = fullySolved.<androidx.constraintlayout.solver.Metrics: long graphOptimizer>;

        i = i + 1L;

        fullySolved.<androidx.constraintlayout.solver.Metrics: long graphOptimizer> = i;

     label04:
        fullySolved#11 = 1;

        i#12 = 0;

     label05:
        r = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i#12 >= r goto label07;

        r#14 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        r#15 = r#14[i#12];

        $u5 = r#15.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if $u5 != 0 goto label06;

        fullySolved#11 = 0;

        goto label07;

     label06:
        i#12 = i#12 + 1;

        goto label05;

     label07:
        if fullySolved#11 != 0 goto label08;

        fullySolved#7 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        virtualinvoke this.<androidx.constraintlayout.solver.LinearSystem: void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row)>(fullySolved#7);

        goto label10;

     label08:
        fullySolved = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if fullySolved == null goto label09;

        i = fullySolved.<androidx.constraintlayout.solver.Metrics: long fullySolved>;

        i = i + 1L;

        fullySolved.<androidx.constraintlayout.solver.Metrics: long fullySolved> = i;

     label09:
        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void computeValues()>();

     label10:
        return;
    }

    void minimizeGoal(androidx.constraintlayout.solver.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.LinearSystem$Row $u6;
        androidx.constraintlayout.solver.Metrics $u0;
        long $u1, $u3#8;
        int $u3;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u6 := @parameter0: androidx.constraintlayout.solver.LinearSystem$Row;

        $u0 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        if $u0 == null goto label1;

        $u1 = $u0.<androidx.constraintlayout.solver.Metrics: long minimizeGoal>;

        $u1 = $u1 + 1L;

        $u0.<androidx.constraintlayout.solver.Metrics: long minimizeGoal> = $u1;

        $u0 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $u1 = $u0.<androidx.constraintlayout.solver.Metrics: long maxVariables>;

        $u3 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns>;

        $u3#8 = (long) $u3;

        $u1 = staticinvoke <java.lang.Math: long max(long,long)>($u1, $u3#8);

        $u0.<androidx.constraintlayout.solver.Metrics: long maxVariables> = $u1;

        $u0 = <androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Metrics sMetrics>;

        $u1 = $u0.<androidx.constraintlayout.solver.Metrics: long maxRows>;

        $u3 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u3#8 = (long) $u3;

        $u1 = staticinvoke <java.lang.Math: long max(long,long)>($u1, $u3#8);

        $u0.<androidx.constraintlayout.solver.Metrics: long maxRows> = $u1;

     label1:
        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: int enforceBFS(androidx.constraintlayout.solver.LinearSystem$Row)>($u6);

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: int optimize(androidx.constraintlayout.solver.LinearSystem$Row,boolean)>($u6, 0);

        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void computeValues()>();

        return;
    }

    public void removeRow(androidx.constraintlayout.solver.ArrayRow)
    {
        androidx.constraintlayout.solver.LinearSystem this;
        androidx.constraintlayout.solver.ArrayRow $u4, $u2#12;
        boolean i;
        androidx.constraintlayout.solver.SolverVariable i#2;
        int i#4, $u1, $u2;
        androidx.constraintlayout.solver.ArrayRow[] $u1#10;
        float $u1#15;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        $u4 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        i = $u4.<androidx.constraintlayout.solver.ArrayRow: boolean isSimpleDefinition>;

        if i == 0 goto label4;

        i#2 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        if i#2 == null goto label4;

        i#2 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        i#4 = i#2.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

        if i#4 == -1 goto label3;

        i#2 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        i#4 = i#2.<androidx.constraintlayout.solver.SolverVariable: int definitionId>;

     label1:
        $u1 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        $u2 = $u1 + -1;

        if i#4 >= $u2 goto label2;

        $u1#10 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u1 = i#4 + 1;

        $u2#12 = $u1#10[$u1];

        $u1#10[i#4] = $u2#12;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        i#4 = $u1 + -1;

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = i#4;

     label3:
        i#2 = $u4.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        $u1#15 = $u4.<androidx.constraintlayout.solver.ArrayRow: float constantValue>;

        virtualinvoke i#2.<androidx.constraintlayout.solver.SolverVariable: void setFinalValue(androidx.constraintlayout.solver.LinearSystem,float)>(this, $u1#15);

     label4:
        return;
    }

    public void reset()
    {
        androidx.constraintlayout.solver.LinearSystem this;
        int i, variable#4;
        androidx.constraintlayout.solver.Cache variable;
        androidx.constraintlayout.solver.SolverVariable[] variable#3;
        androidx.constraintlayout.solver.SolverVariable variable#7;
        androidx.constraintlayout.solver.Pools$Pool i#9;
        java.util.HashMap variable#16;
        androidx.constraintlayout.solver.LinearSystem$Row variable#17;
        androidx.constraintlayout.solver.ArrayRow[] $u2;
        androidx.constraintlayout.solver.ArrayRow $u2#22;
        boolean i#23;
        androidx.constraintlayout.solver.LinearSystem$ValuesRow i#24;

        this := @this: androidx.constraintlayout.solver.LinearSystem;

        i = 0;

     label1:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        variable#3 = variable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#4 = lengthof variable#3;

        if i >= variable#4 goto label3;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        variable#3 = variable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        variable#7 = variable#3[i];

        if variable#7 == null goto label2;

        virtualinvoke variable#7.<androidx.constraintlayout.solver.SolverVariable: void reset()>();

     label2:
        i = i + 1;

        goto label1;

     label3:
        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        i#9 = variable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.Pools$Pool solverVariablePool>;

        variable#3 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.SolverVariable[] mPoolVariables>;

        i = this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount>;

        interfaceinvoke i#9.<androidx.constraintlayout.solver.Pools$Pool: void releaseAll(java.lang.Object[],int)>(variable#3, i);

        this.<androidx.constraintlayout.solver.LinearSystem: int mPoolVariablesCount> = 0;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        variable#3 = variable.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(variable#3, null);

        variable#16 = this.<androidx.constraintlayout.solver.LinearSystem: java.util.HashMap mVariables>;

        if variable#16 == null goto label4;

        virtualinvoke variable#16.<java.util.HashMap: void clear()>();

     label4:
        this.<androidx.constraintlayout.solver.LinearSystem: int mVariablesID> = 0;

        variable#17 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mGoal>;

        interfaceinvoke variable#17.<androidx.constraintlayout.solver.LinearSystem$Row: void clear()>();

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumColumns> = 1;

        i = 0;

     label5:
        variable#4 = this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows>;

        if i >= variable#4 goto label6;

        $u2 = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.ArrayRow[] mRows>;

        $u2#22 = $u2[i];

        $u2#22.<androidx.constraintlayout.solver.ArrayRow: boolean used> = 0;

        i = i + 1;

        goto label5;

     label6:
        specialinvoke this.<androidx.constraintlayout.solver.LinearSystem: void releaseRows()>();

        this.<androidx.constraintlayout.solver.LinearSystem: int mNumRows> = 0;

        i#23 = <androidx.constraintlayout.solver.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if i#23 == 0 goto label7;

        i#24 = new androidx.constraintlayout.solver.LinearSystem$ValuesRow;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke i#24.<androidx.constraintlayout.solver.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.solver.LinearSystem,androidx.constraintlayout.solver.Cache)>(this, variable);

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal> = i#24;

        return;

     label7:
        $u2#22 = new androidx.constraintlayout.solver.ArrayRow;

        variable = this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.Cache mCache>;

        specialinvoke $u2#22.<androidx.constraintlayout.solver.ArrayRow: void <init>(androidx.constraintlayout.solver.Cache)>(variable);

        this.<androidx.constraintlayout.solver.LinearSystem: androidx.constraintlayout.solver.LinearSystem$Row mTempGoal> = $u2#22;

        return;
    }
}
