abstract class androidx.collection.MapCollections extends java.lang.Object
{
    androidx.collection.MapCollections$EntrySet mEntrySet;
    androidx.collection.MapCollections$KeySet mKeySet;
    androidx.collection.MapCollections$ValuesCollection mValues;

    void <init>()
    {
        androidx.collection.MapCollections this;

        this := @this: androidx.collection.MapCollections;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean containsAllHelper(java.util.Map, java.util.Collection)
    {
        java.util.Map map;
        java.util.Collection collection;
        java.util.Iterator $u-1;
        boolean $u-1#2;
        java.lang.Object $u-1#4;

        map := @parameter0: java.util.Map;

        collection := @parameter1: java.util.Collection;

        $u-1 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $u-1#2 = interfaceinvoke $u-1.<java.util.Iterator: boolean hasNext()>();

        if $u-1#2 == 0 goto label2;

        $u-1#4 = interfaceinvoke $u-1.<java.util.Iterator: java.lang.Object next()>();

        $u-1#2 = interfaceinvoke map.<java.util.Map: boolean containsKey(java.lang.Object)>($u-1#4);

        if $u-1#2 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public static boolean equalsSetHelper(java.util.Set, java.lang.Object)
    {
        java.util.Set set, s#4;
        java.lang.Object $u6;
        boolean s;
        int $u-1, $u-1#7;
        java.lang.ClassCastException ignored;
        java.lang.NullPointerException ignored#12;

        set := @parameter0: java.util.Set;

        $u6 := @parameter1: java.lang.Object;

        if set != $u6 goto label1;

        return 1;

     label1:
        s = $u6 instanceof java.util.Set;

        if s == 0 goto label9;

        s#4 = (java.util.Set) $u6;

     label2:
        $u-1 = interfaceinvoke set.<java.util.Set: int size()>();

        $u-1#7 = interfaceinvoke s#4.<java.util.Set: int size()>();

     label3:
        if $u-1 != $u-1#7 goto label6;

     label4:
        s = interfaceinvoke set.<java.util.Set: boolean containsAll(java.util.Collection)>(s#4);

     label5:
        if s == 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        ignored := @caughtexception;

        return 0;

     label8:
        ignored#12 := @caughtexception;

     label9:
        return 0;

        catch java.lang.NullPointerException from label2 to label3 with label8;
        catch java.lang.NullPointerException from label4 to label5 with label8;
        catch java.lang.ClassCastException from label2 to label3 with label7;
        catch java.lang.ClassCastException from label4 to label5 with label7;
    }

    public static boolean removeAllHelper(java.util.Map, java.util.Collection)
    {
        java.util.Map map;
        java.util.Collection collection;
        int $u-1, $u-1#7;
        java.util.Iterator $u-1#2;
        boolean $u-1#3;
        java.lang.Object $u-1#5;

        map := @parameter0: java.util.Map;

        collection := @parameter1: java.util.Collection;

        $u-1 = interfaceinvoke map.<java.util.Map: int size()>();

        $u-1#2 = interfaceinvoke collection.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $u-1#3 = interfaceinvoke $u-1#2.<java.util.Iterator: boolean hasNext()>();

        if $u-1#3 == 0 goto label2;

        $u-1#5 = interfaceinvoke $u-1#2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke map.<java.util.Map: java.lang.Object remove(java.lang.Object)>($u-1#5);

        goto label1;

     label2:
        $u-1#7 = interfaceinvoke map.<java.util.Map: int size()>();

        if $u-1 == $u-1#7 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean retainAllHelper(java.util.Map, java.util.Collection)
    {
        java.util.Map map;
        java.util.Collection collection;
        int $u-1, $u-1#12;
        java.util.Set $u-1#2;
        java.util.Iterator $u-1#4;
        boolean $u-1#6;
        java.lang.Object $u-1#8;

        map := @parameter0: java.util.Map;

        collection := @parameter1: java.util.Collection;

        $u-1 = interfaceinvoke map.<java.util.Map: int size()>();

        $u-1#2 = interfaceinvoke map.<java.util.Map: java.util.Set keySet()>();

        $u-1#4 = interfaceinvoke $u-1#2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $u-1#6 = interfaceinvoke $u-1#4.<java.util.Iterator: boolean hasNext()>();

        if $u-1#6 == 0 goto label2;

        $u-1#8 = interfaceinvoke $u-1#4.<java.util.Iterator: java.lang.Object next()>();

        $u-1#6 = interfaceinvoke collection.<java.util.Collection: boolean contains(java.lang.Object)>($u-1#8);

        if $u-1#6 != 0 goto label1;

        interfaceinvoke $u-1#4.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $u-1#12 = interfaceinvoke map.<java.util.Map: int size()>();

        if $u-1 == $u-1#12 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected abstract void colClear();

    protected abstract java.lang.Object colGetEntry(int, int);

    protected abstract java.util.Map colGetMap();

    protected abstract int colGetSize();

    protected abstract int colIndexOfKey(java.lang.Object);

    protected abstract int colIndexOfValue(java.lang.Object);

    protected abstract void colPut(java.lang.Object, java.lang.Object);

    protected abstract void colRemoveAt(int);

    protected abstract java.lang.Object colSetValue(int, java.lang.Object);

    public java.util.Set getEntrySet()
    {
        androidx.collection.MapCollections this;
        androidx.collection.MapCollections$EntrySet $u0;

        this := @this: androidx.collection.MapCollections;

        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$EntrySet mEntrySet>;

        if $u0 != null goto label1;

        $u0 = new androidx.collection.MapCollections$EntrySet;

        specialinvoke $u0.<androidx.collection.MapCollections$EntrySet: void <init>(androidx.collection.MapCollections)>(this);

        this.<androidx.collection.MapCollections: androidx.collection.MapCollections$EntrySet mEntrySet> = $u0;

     label1:
        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$EntrySet mEntrySet>;

        return $u0;
    }

    public java.util.Set getKeySet()
    {
        androidx.collection.MapCollections this;
        androidx.collection.MapCollections$KeySet $u0;

        this := @this: androidx.collection.MapCollections;

        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$KeySet mKeySet>;

        if $u0 != null goto label1;

        $u0 = new androidx.collection.MapCollections$KeySet;

        specialinvoke $u0.<androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)>(this);

        this.<androidx.collection.MapCollections: androidx.collection.MapCollections$KeySet mKeySet> = $u0;

     label1:
        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$KeySet mKeySet>;

        return $u0;
    }

    public java.util.Collection getValues()
    {
        androidx.collection.MapCollections this;
        androidx.collection.MapCollections$ValuesCollection $u0;

        this := @this: androidx.collection.MapCollections;

        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$ValuesCollection mValues>;

        if $u0 != null goto label1;

        $u0 = new androidx.collection.MapCollections$ValuesCollection;

        specialinvoke $u0.<androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)>(this);

        this.<androidx.collection.MapCollections: androidx.collection.MapCollections$ValuesCollection mValues> = $u0;

     label1:
        $u0 = this.<androidx.collection.MapCollections: androidx.collection.MapCollections$ValuesCollection mValues>;

        return $u0;
    }

    public java.lang.Object[] toArrayHelper(int)
    {
        androidx.collection.MapCollections this;
        int $u5, $u-1, i;
        java.lang.Object[] result;
        java.lang.Object $u-1#3;

        this := @this: androidx.collection.MapCollections;

        $u5 := @parameter0: int;

        $u-1 = virtualinvoke this.<androidx.collection.MapCollections: int colGetSize()>();

        result = newarray (java.lang.Object)[$u-1];

        i = 0;

     label1:
        if i >= $u-1 goto label2;

        $u-1#3 = virtualinvoke this.<androidx.collection.MapCollections: java.lang.Object colGetEntry(int,int)>(i, $u5);

        result[i] = $u-1#3;

        i = i + 1;

        goto label1;

     label2:
        return result;
    }

    public java.lang.Object[] toArrayHelper(java.lang.Object[], int)
    {
        androidx.collection.MapCollections this;
        int $u5, $u-1, newArray;
        java.lang.Object[] array;
        java.lang.Class $u-1#4;
        java.lang.Object $u-1#8;

        this := @this: androidx.collection.MapCollections;

        array := @parameter0: java.lang.Object[];

        $u5 := @parameter1: int;

        $u-1 = virtualinvoke this.<androidx.collection.MapCollections: int colGetSize()>();

        newArray = lengthof array;

        if newArray >= $u-1 goto label1;

        $u-1#4 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $u-1#4 = virtualinvoke $u-1#4.<java.lang.Class: java.lang.Class getComponentType()>();

        $u-1#8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($u-1#4, $u-1);

        array = (java.lang.Object[]) $u-1#8;

     label1:
        newArray = 0;

     label2:
        if newArray >= $u-1 goto label3;

        $u-1#8 = virtualinvoke this.<androidx.collection.MapCollections: java.lang.Object colGetEntry(int,int)>(newArray, $u5);

        array[newArray] = $u-1#8;

        newArray = newArray + 1;

        goto label2;

     label3:
        $u5 = lengthof array;

        if $u5 <= $u-1 goto label4;

        array[$u-1] = null;

     label4:
        return array;
    }
}
