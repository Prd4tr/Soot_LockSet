class androidx.core.graphics.TypefaceCompatBaseImpl extends java.lang.Object
{
    private static final int INVALID_KEY;
    private static final java.lang.String TAG;
    private java.util.concurrent.ConcurrentHashMap mFontFamilies;

    void <init>()
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        java.util.concurrent.ConcurrentHashMap $u0;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $u0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies> = $u0;

        return;
    }

    private void addFontFamily(android.graphics.Typeface, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.graphics.Typeface $u6;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $u7;
        byte $u4;
        long $u-1;
        java.util.concurrent.ConcurrentHashMap $u2;
        java.lang.Long $u-1#4;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u6 := @parameter0: android.graphics.Typeface;

        $u7 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: long getUniqueKey(android.graphics.Typeface)>($u6);

        $u4 = $u-1 cmp 0L;

        if $u4 == 0 goto label1;

        $u2 = this.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies>;

        $u-1#4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($u-1);

        virtualinvoke $u2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u-1#4, $u7);

     label1:
        return;
    }

    private androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $u3;
        int $u4;
        androidx.core.graphics.TypefaceCompatBaseImpl$2 $u1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $u-1;
        java.lang.Object $u-1#3;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $u0;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u3 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $u4 := @parameter1: int;

        $u-1 = virtualinvoke $u3.<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>();

        $u1 = new androidx.core.graphics.TypefaceCompatBaseImpl$2;

        specialinvoke $u1.<androidx.core.graphics.TypefaceCompatBaseImpl$2: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>(this);

        $u-1#3 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($u-1, $u4, $u1);

        $u0 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) $u-1#3;

        return $u0;
    }

    private static java.lang.Object findBestFont(java.lang.Object[], int, androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    {
        java.lang.Object[] fonts;
        int $u12, targetWeight, $u7, $u-1;
        androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor extractor;
        java.lang.Object font, best;
        short targetWeight#2;
        boolean isTargetItalic, $u-1#14;
        byte $u10;

        fonts := @parameter0: java.lang.Object[];

        $u12 := @parameter1: int;

        extractor := @parameter2: androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor;

        targetWeight = $u12 & 1;

        if targetWeight != 0 goto label01;

        targetWeight#2 = 400;

        goto label02;

     label01:
        targetWeight#2 = 700;

     label02:
        $u12 = $u12 & 2;

        if $u12 == 0 goto label03;

        isTargetItalic = 1;

        goto label04;

     label03:
        isTargetItalic = 0;

     label04:
        best = null;

        targetWeight = 2147483647;

        $u12 = lengthof fonts;

        $u7 = 0;

     label05:
        if $u7 >= $u12 goto label10;

        font = fonts[$u7];

        $u-1 = interfaceinvoke extractor.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: int getWeight(java.lang.Object)>(font);

        $u-1 = $u-1 - targetWeight#2;

        $u-1 = staticinvoke <java.lang.Math: int abs(int)>($u-1);

        $u-1 = $u-1 * 2;

        $u-1#14 = interfaceinvoke extractor.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: boolean isItalic(java.lang.Object)>(font);

        if $u-1#14 != isTargetItalic goto label06;

        $u10 = 0;

        goto label07;

     label06:
        $u10 = 1;

     label07:
        $u-1 = $u-1 + $u10;

        if best == null goto label08;

        if targetWeight <= $u-1 goto label09;

     label08:
        best = font;

        targetWeight = $u-1;

     label09:
        $u7 = $u7 + 1;

        goto label05;

     label10:
        return best;
    }

    private static long getUniqueKey(android.graphics.Typeface)
    {
        android.graphics.Typeface $u6;
        java.lang.Class field;
        java.lang.reflect.Field $u-1;
        java.lang.Object $u-1#7;
        java.lang.Number num;
        long $u-1#10;
        java.lang.IllegalAccessException field#12;
        java.lang.NoSuchFieldException field#13;

        $u6 := @parameter0: android.graphics.Typeface;

        if $u6 != null goto label1;

        return 0L;

     label1:
        field = class "Landroid/graphics/Typeface;";

     label2:
        $u-1 = virtualinvoke field.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("native_instance");

        virtualinvoke $u-1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $u-1#7 = virtualinvoke $u-1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($u6);

     label3:
        num = (java.lang.Number) $u-1#7;

     label4:
        $u-1#10 = virtualinvoke num.<java.lang.Number: long longValue()>();

     label5:
        return $u-1#10;

     label6:
        field#12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TypefaceCompatBaseImpl", "Could not retrieve font from family.", field#12);

        return 0L;

     label7:
        field#13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TypefaceCompatBaseImpl", "Could not retrieve font from family.", field#13);

        return 0L;

        catch java.lang.NoSuchFieldException from label2 to label3 with label7;
        catch java.lang.NoSuchFieldException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
    }

    public android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, android.content.res.Resources, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.content.Context $u4;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $u5;
        android.content.res.Resources $u6;
        int $u7, $u-1#3;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $u-1;
        java.lang.String $u-1#5;
        android.graphics.Typeface $u-1#6;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u4 := @parameter0: android.content.Context;

        $u5 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        $u6 := @parameter2: android.content.res.Resources;

        $u7 := @parameter3: int;

        $u-1 = specialinvoke this.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)>($u5, $u7);

        if $u-1 != null goto label1;

        return null;

     label1:
        $u-1#3 = virtualinvoke $u-1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getResourceId()>();

        $u-1#5 = virtualinvoke $u-1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: java.lang.String getFileName()>();

        $u-1#6 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int)>($u4, $u6, $u-1#3, $u-1#5, $u7);

        specialinvoke this.<androidx.core.graphics.TypefaceCompatBaseImpl: void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)>($u-1#6, $u5);

        return $u-1#6;
    }

    public android.graphics.Typeface createFromFontInfo(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.content.Context $u6;
        android.os.CancellationSignal $u7;
        androidx.core.provider.FontsContractCompat$FontInfo[] $u8;
        int $u9, font;
        androidx.core.provider.FontsContractCompat$FontInfo $u-1;
        java.io.InputStream is, $u-1#10;
        android.content.ContentResolver $u-1#7;
        android.net.Uri $u-1#9;
        android.graphics.Typeface $u-1#12;
        java.lang.Throwable $u1;
        java.io.IOException e;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u6 := @parameter0: android.content.Context;

        $u7 := @parameter1: android.os.CancellationSignal;

        $u8 := @parameter2: androidx.core.provider.FontsContractCompat$FontInfo[];

        $u9 := @parameter3: int;

        font = lengthof $u8;

        if font >= 1 goto label1;

        return null;

     label1:
        $u-1 = virtualinvoke this.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>($u8, $u9);

        is = null;

     label2:
        $u-1#7 = virtualinvoke $u6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $u-1#9 = virtualinvoke $u-1.<androidx.core.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $u-1#10 = virtualinvoke $u-1#7.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($u-1#9);

     label3:
        is = $u-1#10;

     label4:
        $u-1#12 = virtualinvoke this.<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>($u6, $u-1#10);

     label5:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>($u-1#10);

        return $u-1#12;

     label6:
        $u1 := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(is);

        throw $u1;

     label7:
        e := @caughtexception;

        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(is);

        return null;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected android.graphics.Typeface createFromInputStream(android.content.Context, java.io.InputStream)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.content.Context $u4;
        java.io.InputStream $u5;
        java.io.File $u-1;
        boolean $u-1#3;
        java.lang.String $u-1#5;
        android.graphics.Typeface $u-1#7;
        java.lang.Throwable $u1;
        java.lang.RuntimeException e;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u4 := @parameter0: android.content.Context;

        $u5 := @parameter1: java.io.InputStream;

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($u4);

        if $u-1 != null goto label1;

        return null;

     label1:
        $u-1#3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>($u-1, $u5);

     label2:
        if $u-1#3 != 0 goto label3;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return null;

     label3:
        $u-1#5 = virtualinvoke $u-1.<java.io.File: java.lang.String getPath()>();

        $u-1#7 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($u-1#5);

     label4:
        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return $u-1#7;

     label5:
        $u1 := @caughtexception;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        throw $u1;

     label6:
        e := @caughtexception;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.graphics.Typeface createFromResourcesFontFile(android.content.Context, android.content.res.Resources, int, java.lang.String, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.content.Context $u4;
        android.content.res.Resources $u5;
        int $u6, $u8;
        java.lang.String $u7;
        java.io.File $u-1;
        boolean $u-1#3;
        android.graphics.Typeface $u-1#7;
        java.lang.Throwable $u1;
        java.lang.RuntimeException e;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u4 := @parameter0: android.content.Context;

        $u5 := @parameter1: android.content.res.Resources;

        $u6 := @parameter2: int;

        $u7 := @parameter3: java.lang.String;

        $u8 := @parameter4: int;

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>($u4);

        if $u-1 != null goto label1;

        return null;

     label1:
        $u-1#3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>($u-1, $u5, $u6);

     label2:
        if $u-1#3 != 0 goto label3;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return null;

     label3:
        $u7 = virtualinvoke $u-1.<java.io.File: java.lang.String getPath()>();

        $u-1#7 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($u7);

     label4:
        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return $u-1#7;

     label5:
        $u1 := @caughtexception;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        throw $u1;

     label6:
        e := @caughtexception;

        virtualinvoke $u-1.<java.io.File: boolean delete()>();

        return null;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        androidx.core.provider.FontsContractCompat$FontInfo[] $u2;
        int $u3;
        java.lang.Object $u-1;
        androidx.core.graphics.TypefaceCompatBaseImpl$1 $u0;
        androidx.core.provider.FontsContractCompat$FontInfo $u0#3;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u2 := @parameter0: androidx.core.provider.FontsContractCompat$FontInfo[];

        $u3 := @parameter1: int;

        $u0 = new androidx.core.graphics.TypefaceCompatBaseImpl$1;

        specialinvoke $u0.<androidx.core.graphics.TypefaceCompatBaseImpl$1: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>(this);

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($u2, $u3, $u0);

        $u0#3 = (androidx.core.provider.FontsContractCompat$FontInfo) $u-1;

        return $u0#3;
    }

    androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry getFontFamily(android.graphics.Typeface)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl this;
        android.graphics.Typeface $u6;
        byte $u4;
        long $u-1;
        java.util.concurrent.ConcurrentHashMap $u2;
        java.lang.Long $u-1#5;
        java.lang.Object $u-1#6;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $u2#8;

        this := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        $u6 := @parameter0: android.graphics.Typeface;

        $u-1 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: long getUniqueKey(android.graphics.Typeface)>($u6);

        $u4 = $u-1 cmp 0L;

        if $u4 != 0 goto label1;

        return null;

     label1:
        $u2 = this.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies>;

        $u-1#5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($u-1);

        $u-1#6 = virtualinvoke $u2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($u-1#5);

        $u2#8 = (androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry) $u-1#6;

        return $u2#8;
    }

    public static void <clinit>()
    {
        <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.String TAG> = "TypefaceCompatBaseImpl";

        <androidx.core.graphics.TypefaceCompatBaseImpl: int INVALID_KEY> = 0;

        return;
    }
}
