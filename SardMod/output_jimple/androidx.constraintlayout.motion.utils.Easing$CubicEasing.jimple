class androidx.constraintlayout.motion.utils.Easing$CubicEasing extends androidx.constraintlayout.motion.utils.Easing
{
    private static double d_error;
    private static double error;
    double x1;
    double x2;
    double y1;
    double y2;

    static void <clinit>()
    {
        <androidx.constraintlayout.motion.utils.Easing$CubicEasing: double error> = 0.01;

        <androidx.constraintlayout.motion.utils.Easing$CubicEasing: double d_error> = 1.0E-4;

        return;
    }

    public void <init>(double, double, double, double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u1, $u3, $u5, $u7;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u1 := @parameter0: double;

        $u3 := @parameter1: double;

        $u5 := @parameter2: double;

        $u7 := @parameter3: double;

        specialinvoke this.<androidx.constraintlayout.motion.utils.Easing: void <init>()>();

        virtualinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: void setup(double,double,double,double)>($u1, $u3, $u5, $u7);

        return;
    }

    void <init>(java.lang.String)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        java.lang.String $u8, $u-1#7;
        int $u-1, $u-1#5;
        double $u-1#11;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u8 := @parameter0: java.lang.String;

        specialinvoke this.<androidx.constraintlayout.motion.utils.Easing: void <init>()>();

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: java.lang.String str> = $u8;

        $u-1 = virtualinvoke $u8.<java.lang.String: int indexOf(int)>(40);

        $u-1#5 = virtualinvoke $u8.<java.lang.String: int indexOf(int,int)>(44, $u-1);

        $u-1 = $u-1 + 1;

        $u-1#7 = virtualinvoke $u8.<java.lang.String: java.lang.String substring(int,int)>($u-1, $u-1#5);

        $u-1#7 = virtualinvoke $u-1#7.<java.lang.String: java.lang.String trim()>();

        $u-1#11 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($u-1#7);

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x1> = $u-1#11;

        $u-1 = $u-1#5 + 1;

        $u-1 = virtualinvoke $u8.<java.lang.String: int indexOf(int,int)>(44, $u-1);

        $u-1#5 = $u-1#5 + 1;

        $u-1#7 = virtualinvoke $u8.<java.lang.String: java.lang.String substring(int,int)>($u-1#5, $u-1);

        $u-1#7 = virtualinvoke $u-1#7.<java.lang.String: java.lang.String trim()>();

        $u-1#11 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($u-1#7);

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y1> = $u-1#11;

        $u-1#5 = $u-1 + 1;

        $u-1#5 = virtualinvoke $u8.<java.lang.String: int indexOf(int,int)>(44, $u-1#5);

        $u-1 = $u-1 + 1;

        $u-1#7 = virtualinvoke $u8.<java.lang.String: java.lang.String substring(int,int)>($u-1, $u-1#5);

        $u-1#7 = virtualinvoke $u-1#7.<java.lang.String: java.lang.String trim()>();

        $u-1#11 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($u-1#7);

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x2> = $u-1#11;

        $u-1 = $u-1#5 + 1;

        $u-1 = virtualinvoke $u8.<java.lang.String: int indexOf(int,int)>(41, $u-1);

        $u-1#5 = $u-1#5 + 1;

        $u8 = virtualinvoke $u8.<java.lang.String: java.lang.String substring(int,int)>($u-1#5, $u-1);

        $u8 = virtualinvoke $u8.<java.lang.String: java.lang.String trim()>();

        $u-1#11 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($u8);

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y2> = $u-1#11;

        return;
    }

    private double getDiffX(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u16, t1, $u7, $u9, $u11;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u16 := @parameter0: double;

        t1 = 1.0 - $u16;

        $u7 = t1 * 3.0;

        $u7 = $u7 * t1;

        $u9 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x1>;

        $u7 = $u7 * $u9;

        t1 = 6.0 * t1;

        $u11 = t1 * $u16;

        t1 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x2>;

        $u9 = t1 - $u9;

        $u9 = $u11 * $u9;

        $u7 = $u7 + $u9;

        $u9 = 3.0 * $u16;

        $u16 = $u9 * $u16;

        t1 = 1.0 - t1;

        $u16 = $u16 * t1;

        $u16 = $u7 + $u16;

        return $u16;
    }

    private double getDiffY(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u16, t1, $u7, $u9, $u11;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u16 := @parameter0: double;

        t1 = 1.0 - $u16;

        $u7 = t1 * 3.0;

        $u7 = $u7 * t1;

        $u9 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y1>;

        $u7 = $u7 * $u9;

        t1 = 6.0 * t1;

        $u11 = t1 * $u16;

        t1 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y2>;

        $u9 = t1 - $u9;

        $u9 = $u11 * $u9;

        $u7 = $u7 + $u9;

        $u9 = 3.0 * $u16;

        $u16 = $u9 * $u16;

        t1 = 1.0 - t1;

        $u16 = $u16 * t1;

        $u16 = $u7 + $u16;

        return $u16;
    }

    private double getX(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u13, t1, f1, f3;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u13 := @parameter0: double;

        t1 = 1.0 - $u13;

        f1 = t1 * 3.0;

        f1 = f1 * t1;

        f1 = f1 * $u13;

        t1 = 3.0 * t1;

        t1 = t1 * $u13;

        t1 = t1 * $u13;

        f3 = $u13 * $u13;

        $u13 = f3 * $u13;

        f3 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x1>;

        f1 = f3 * f1;

        f3 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x2>;

        t1 = f3 * t1;

        f1 = f1 + t1;

        $u13 = f1 + $u13;

        return $u13;
    }

    private double getY(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u13, t1, f1, f3;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u13 := @parameter0: double;

        t1 = 1.0 - $u13;

        f1 = t1 * 3.0;

        f1 = f1 * t1;

        f1 = f1 * $u13;

        t1 = 3.0 * t1;

        t1 = t1 * $u13;

        t1 = t1 * $u13;

        f3 = $u13 * $u13;

        $u13 = f3 * $u13;

        f3 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y1>;

        f1 = f3 * f1;

        f3 = this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y2>;

        t1 = f3 * t1;

        f1 = f1 + t1;

        $u13 = f1 + $u13;

        return $u13;
    }

    public double get(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u18, t, range#6, tx, x2, $u-1;
        byte range;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u18 := @parameter0: double;

        range = $u18 cmpg 0.0;

        if range > 0 goto label1;

        return 0.0;

     label1:
        range = $u18 cmpl 1.0;

        if range < 0 goto label2;

        return 1.0;

     label2:
        t = 0.5;

        range#6 = 0.5;

     label3:
        tx = <androidx.constraintlayout.motion.utils.Easing$CubicEasing: double error>;

        range = range#6 cmpl tx;

        if range <= 0 goto label5;

        tx = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>(t);

        range#6 = range#6 * 0.5;

        range = tx cmpg $u18;

        if range >= 0 goto label4;

        t = t + range#6;

        goto label3;

     label4:
        t = t - range#6;

        goto label3;

     label5:
        tx = t - range#6;

        tx = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>(tx);

        x2 = t + range#6;

        $u-1 = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>(x2);

        x2 = t - range#6;

        x2 = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getY(double)>(x2);

        t = t + range#6;

        t = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getY(double)>(t);

        t = t - x2;

        $u18 = $u18 - tx;

        $u18 = t * $u18;

        tx = $u-1 - tx;

        $u18 = $u18 / tx;

        $u18 = $u18 + x2;

        return $u18;
    }

    public double getDiff(double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u18, t, range, tx, y1;
        byte x2;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u18 := @parameter0: double;

        t = 0.5;

        range = 0.5;

     label1:
        tx = <androidx.constraintlayout.motion.utils.Easing$CubicEasing: double d_error>;

        x2 = range cmpl tx;

        if x2 <= 0 goto label3;

        tx = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>(t);

        range = range * 0.5;

        x2 = tx cmpg $u18;

        if x2 >= 0 goto label2;

        t = t + range;

        goto label1;

     label2:
        t = t - range;

        goto label1;

     label3:
        $u18 = t - range;

        $u18 = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>($u18);

        tx = t + range;

        tx = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getX(double)>(tx);

        y1 = t - range;

        y1 = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getY(double)>(y1);

        t = t + range;

        t = specialinvoke this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double getY(double)>(t);

        t = t - y1;

        $u18 = tx - $u18;

        $u18 = t / $u18;

        return $u18;
    }

    void setup(double, double, double, double)
    {
        androidx.constraintlayout.motion.utils.Easing$CubicEasing this;
        double $u1, $u3, $u5, $u7;

        this := @this: androidx.constraintlayout.motion.utils.Easing$CubicEasing;

        $u1 := @parameter0: double;

        $u3 := @parameter1: double;

        $u5 := @parameter2: double;

        $u7 := @parameter3: double;

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x1> = $u1;

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y1> = $u3;

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double x2> = $u5;

        this.<androidx.constraintlayout.motion.utils.Easing$CubicEasing: double y2> = $u7;

        return;
    }
}
