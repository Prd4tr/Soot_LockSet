public class androidx.core.provider.SelfDestructiveThread extends java.lang.Object
{
    private static final int MSG_DESTRUCTION;
    private static final int MSG_INVOKE_RUNNABLE;
    private android.os.Handler$Callback mCallback;
    private final int mDestructAfterMillisec;
    private int mGeneration;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private final int mPriority;
    private android.os.HandlerThread mThread;
    private final java.lang.String mThreadName;

    public void <init>(java.lang.String, int, int)
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.String $u2;
        int $u3, $u4;
        java.lang.Object $u0;
        androidx.core.provider.SelfDestructiveThread$1 $u0#2;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u2 := @parameter0: java.lang.String;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $u0 = new java.lang.Object;

        specialinvoke $u0.<java.lang.Object: void <init>()>();

        this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock> = $u0;

        $u0#2 = new androidx.core.provider.SelfDestructiveThread$1;

        specialinvoke $u0#2.<androidx.core.provider.SelfDestructiveThread$1: void <init>(androidx.core.provider.SelfDestructiveThread)>(this);

        this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback> = $u0#2;

        this.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName> = $u2;

        this.<androidx.core.provider.SelfDestructiveThread: int mPriority> = $u3;

        this.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec> = $u4;

        this.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = 0;

        return;
    }

    private void post(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.Runnable $u6;
        java.lang.Object $u0;
        android.os.HandlerThread $u1;
        java.lang.String $u3;
        int $u4;
        android.os.Handler $u1#6, $u3#16;
        android.os.Looper $u-1;
        android.os.Handler$Callback $u4#10;
        android.os.Message $u-1#17;
        java.lang.Throwable $u1#19;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u6 := @parameter0: java.lang.Runnable;

        $u0 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $u0;

     label1:
        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $u1 != null goto label2;

        $u1 = new android.os.HandlerThread;

        $u3 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName>;

        $u4 = this.<androidx.core.provider.SelfDestructiveThread: int mPriority>;

        specialinvoke $u1.<android.os.HandlerThread: void <init>(java.lang.String,int)>($u3, $u4);

        this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = $u1;

        virtualinvoke $u1.<android.os.HandlerThread: void start()>();

        $u1#6 = new android.os.Handler;

        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        $u-1 = virtualinvoke $u1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $u4#10 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback>;

        specialinvoke $u1#6.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($u-1, $u4#10);

        this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = $u1#6;

        $u4 = this.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        $u4 = $u4 + 1;

        this.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = $u4;

     label2:
        $u1#6 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $u1#6.<android.os.Handler: void removeMessages(int)>(0);

        $u1#6 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $u3#16 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $u-1#17 = virtualinvoke $u3#16.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $u6);

        virtualinvoke $u1#6.<android.os.Handler: boolean sendMessage(android.os.Message)>($u-1#17);

        exitmonitor $u0;

     label3:
        return;

     label4:
        $u1#19 := @caughtexception;

        exitmonitor $u0;

     label5:
        throw $u1#19;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getGeneration()
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.Object $u0;
        java.lang.Throwable $u1;
        int ret0;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u0 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $u0;

     label1:
        ret0 = this.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        exitmonitor $u0;

     label2:
        return ret0;

     label3:
        $u1 := @caughtexception;

        exitmonitor $u0;

     label4:
        throw $u1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isRunning()
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.Object $u0;
        android.os.HandlerThread $u1;
        boolean $u1#2;
        java.lang.Throwable $u1#3;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u0 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $u0;

     label1:
        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $u1 == null goto label2;

        $u1#2 = 1;

        goto label3;

     label2:
        $u1#2 = 0;

     label3:
        exitmonitor $u0;

     label4:
        return $u1#2;

     label5:
        $u1#3 := @caughtexception;

        exitmonitor $u0;

     label6:
        throw $u1#3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onDestruction()
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.Object $u0;
        boolean $u-1;
        android.os.Handler $u1;
        android.os.HandlerThread $u1#3;
        java.lang.Throwable $u1#5;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u0 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $u0;

     label1:
        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $u-1 = virtualinvoke $u1.<android.os.Handler: boolean hasMessages(int)>(1);

        if $u-1 == 0 goto label3;

        exitmonitor $u0;

     label2:
        return;

     label3:
        $u1#3 = this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $u1#3.<android.os.HandlerThread: boolean quit()>();

        this.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = null;

        this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = null;

        exitmonitor $u0;

     label4:
        return;

     label5:
        $u1#5 := @caughtexception;

        exitmonitor $u0;

     label6:
        throw $u1#5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void onInvokeRunnable(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.lang.Runnable $u6;
        java.lang.Object $u0;
        android.os.Message $u-1;
        android.os.Handler $u1, $u3;
        int $u3#6;
        long $u3#7;
        java.lang.Throwable $u1#8;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        $u6 := @parameter0: java.lang.Runnable;

        interfaceinvoke $u6.<java.lang.Runnable: void run()>();

        $u0 = this.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        entermonitor $u0;

     label1:
        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $u1.<android.os.Handler: void removeMessages(int)>(0);

        $u1 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $u3 = this.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $u-1 = virtualinvoke $u3.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        $u3#6 = this.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec>;

        $u3#7 = (long) $u3#6;

        virtualinvoke $u1.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($u-1, $u3#7);

        exitmonitor $u0;

     label2:
        return;

     label3:
        $u1#8 := @caughtexception;

        exitmonitor $u0;

     label4:
        throw $u1#8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void postAndReply(java.util.concurrent.Callable, androidx.core.provider.SelfDestructiveThread$ReplyCallback)
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.util.concurrent.Callable callable;
        androidx.core.provider.SelfDestructiveThread$ReplyCallback reply;
        android.os.Handler callingHandler;
        androidx.core.provider.SelfDestructiveThread$2 $u1;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        callable := @parameter0: java.util.concurrent.Callable;

        reply := @parameter1: androidx.core.provider.SelfDestructiveThread$ReplyCallback;

        callingHandler = new android.os.Handler;

        specialinvoke callingHandler.<android.os.Handler: void <init>()>();

        $u1 = new androidx.core.provider.SelfDestructiveThread$2;

        specialinvoke $u1.<androidx.core.provider.SelfDestructiveThread$2: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>(this, callable, callingHandler, reply);

        specialinvoke this.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($u1);

        return;
    }

    public java.lang.Object postAndWait(java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        androidx.core.provider.SelfDestructiveThread this;
        java.util.concurrent.Callable callable;
        int $u12;
        java.util.concurrent.atomic.AtomicReference holder;
        java.util.concurrent.locks.ReentrantLock lock;
        java.util.concurrent.atomic.AtomicBoolean running;
        java.util.concurrent.locks.Condition $u-1;
        androidx.core.provider.SelfDestructiveThread$3 $u8;
        boolean $u-1#7;
        java.lang.Object $u-1#9;
        java.util.concurrent.TimeUnit remaining;
        long $u8#12, $u-1#15;
        java.lang.InterruptedException $u3;
        byte $u3#23;
        java.lang.Throwable remaining#26;

        this := @this: androidx.core.provider.SelfDestructiveThread;

        callable := @parameter0: java.util.concurrent.Callable;

        $u12 := @parameter1: int;

        lock = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke lock.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $u-1 = virtualinvoke lock.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        holder = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke holder.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        running = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke running.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        $u8 = new androidx.core.provider.SelfDestructiveThread$3;

        specialinvoke $u8.<androidx.core.provider.SelfDestructiveThread$3: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>(this, holder, callable, lock, running, $u-1);

        specialinvoke this.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($u8);

        virtualinvoke lock.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $u-1#7 = virtualinvoke running.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label02:
        if $u-1#7 != 0 goto label05;

     label03:
        $u-1#9 = virtualinvoke holder.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label04:
        virtualinvoke lock.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $u-1#9;

     label05:
        remaining = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label06:
        $u8#12 = (long) $u12;

     label07:
        $u8#12 = virtualinvoke remaining.<java.util.concurrent.TimeUnit: long toNanos(long)>($u8#12);

     label08:
        $u-1#15 = interfaceinvoke $u-1.<java.util.concurrent.locks.Condition: long awaitNanos(long)>($u8#12);

     label09:
        $u8#12 = $u-1#15;

        goto label11;

     label10:
        $u3 := @caughtexception;

     label11:
        $u-1#7 = virtualinvoke running.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label12:
        if $u-1#7 != 0 goto label15;

     label13:
        $u-1#9 = virtualinvoke holder.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label14:
        virtualinvoke lock.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $u-1#9;

     label15:
        $u3#23 = $u8#12 cmp 0L;

        if $u3#23 <= 0 goto label16;

        goto label08;

     label16:
        $u3 = new java.lang.InterruptedException;

        specialinvoke $u3.<java.lang.InterruptedException: void <init>(java.lang.String)>("timeout");

        throw $u3;

     label17:
        remaining#26 := @caughtexception;

        virtualinvoke lock.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label18;

     label18:
        throw remaining#26;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    public static void <clinit>()
    {
        <androidx.core.provider.SelfDestructiveThread: int MSG_INVOKE_RUNNABLE> = 1;

        <androidx.core.provider.SelfDestructiveThread: int MSG_DESTRUCTION> = 0;

        return;
    }
}
