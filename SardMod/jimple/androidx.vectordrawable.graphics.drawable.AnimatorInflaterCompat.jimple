public class androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat extends java.lang.Object
{
    private static final boolean DBG_ANIMATOR_INFLATER;
    private static final int MAX_NUM_POINTS;
    private static final java.lang.String TAG;
    private static final int TOGETHER;
    private static final int VALUE_TYPE_COLOR;
    private static final int VALUE_TYPE_FLOAT;
    private static final int VALUE_TYPE_INT;
    private static final int VALUE_TYPE_PATH;
    private static final int VALUE_TYPE_UNDEFINED;

    private void <init>()
    {
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat this;

        this := @this: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static android.animation.Animator createAnimatorFromXml(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context $u8;
        android.content.res.Resources $u9;
        android.content.res.Resources$Theme $u10;
        org.xmlpull.v1.XmlPullParser $u11;
        float $u12;
        android.util.AttributeSet $u-1;
        android.animation.Animator $u-1#3;

        $u8 := @parameter0: android.content.Context;

        $u9 := @parameter1: android.content.res.Resources;

        $u10 := @parameter2: android.content.res.Resources$Theme;

        $u11 := @parameter3: org.xmlpull.v1.XmlPullParser;

        $u12 := @parameter4: float;

        $u-1 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($u11);

        $u-1#3 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>($u8, $u9, $u10, $u11, $u-1, null, 0, $u12);

        return $u-1#3;
    }

    private static android.animation.Animator createAnimatorFromXml(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.animation.AnimatorSet, int, float) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context $u20;
        android.content.res.Resources $u21;
        android.content.res.Resources$Theme $u22;
        org.xmlpull.v1.XmlPullParser $u23;
        android.util.AttributeSet $u24, $u-1#65;
        android.animation.AnimatorSet $u25, anim;
        int $u26, $u-1, $u-1#6, $u-1#9;
        float $u27;
        android.animation.Animator anim1, a;
        java.util.ArrayList childAnims1;
        java.lang.String $u-1#14;
        boolean gotValues, $u-1#17;
        android.animation.ValueAnimator $u-1#38;
        int[] anim#45;
        android.content.res.TypedArray $u-1#47;
        android.animation.PropertyValuesHolder[] $u-1#68;
        java.lang.RuntimeException anim#75;
        java.lang.StringBuilder index;
        android.animation.Animator[] anim#85;
        java.util.Iterator $u-1#87;
        java.lang.Object $u-1#91;

        $u20 := @parameter0: android.content.Context;

        $u21 := @parameter1: android.content.res.Resources;

        $u22 := @parameter2: android.content.res.Resources$Theme;

        $u23 := @parameter3: org.xmlpull.v1.XmlPullParser;

        $u24 := @parameter4: android.util.AttributeSet;

        $u25 := @parameter5: android.animation.AnimatorSet;

        $u26 := @parameter6: int;

        $u27 := @parameter7: float;

        $u-1 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        anim1 = null;

        childAnims1 = null;

     label01:
        $u-1#6 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $u-1#6 != 3 goto label03;

        $u-1#9 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $u-1#9 <= $u-1 goto label02;

        goto label03;

     label02:
        goto label12;

     label03:
        if $u-1#6 == 1 goto label12;

        if $u-1#6 == 2 goto label04;

        goto label01;

     label04:
        $u-1#14 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        gotValues = 0;

        $u-1#17 = virtualinvoke $u-1#14.<java.lang.String: boolean equals(java.lang.Object)>("objectAnimator");

        if $u-1#17 == 0 goto label05;

        anim1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser)>($u20, $u21, $u22, $u24, $u27, $u23);

        goto label09;

     label05:
        $u-1#17 = virtualinvoke $u-1#14.<java.lang.String: boolean equals(java.lang.Object)>("animator");

        if $u-1#17 == 0 goto label06;

        anim1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>($u20, $u21, $u22, $u24, null, $u27, $u23);

        goto label09;

     label06:
        $u-1#17 = virtualinvoke $u-1#14.<java.lang.String: boolean equals(java.lang.Object)>("set");

        if $u-1#17 == 0 goto label07;

        anim = new android.animation.AnimatorSet;

        specialinvoke anim.<android.animation.AnimatorSet: void <init>()>();

        anim#45 = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_ANIMATOR_SET>;

        $u-1#47 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u21, $u22, $u24, anim#45);

        $u-1#6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u-1#47, $u23, "ordering", 0, 0);

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float)>($u20, $u21, $u22, $u23, $u24, anim, $u-1#6, $u27);

        virtualinvoke $u-1#47.<android.content.res.TypedArray: void recycle()>();

        anim1 = anim;

        goto label09;

     label07:
        gotValues = virtualinvoke $u-1#14.<java.lang.String: boolean equals(java.lang.Object)>("propertyValuesHolder");

        if gotValues == 0 goto label11;

        $u-1#65 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($u23);

        $u-1#68 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>($u20, $u21, $u22, $u23, $u-1#65);

        if $u-1#68 == null goto label08;

        gotValues = anim1 instanceof android.animation.ValueAnimator;

        if gotValues == 0 goto label08;

        $u-1#38 = (android.animation.ValueAnimator) anim1;

        virtualinvoke $u-1#38.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($u-1#68);

     label08:
        gotValues = 1;

     label09:
        if $u25 == null goto label01;

        if gotValues != 0 goto label01;

        if childAnims1 != null goto label10;

        childAnims1 = new java.util.ArrayList;

        specialinvoke childAnims1.<java.util.ArrayList: void <init>()>();

     label10:
        virtualinvoke childAnims1.<java.util.ArrayList: boolean add(java.lang.Object)>(anim1);

        goto label01;

     label11:
        anim#75 = new java.lang.RuntimeException;

        index = new java.lang.StringBuilder;

        specialinvoke index.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke index.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown animator name: ");

        $u-1#14 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke index.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#14);

        $u-1#14 = virtualinvoke index.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke anim#75.<java.lang.RuntimeException: void <init>(java.lang.String)>($u-1#14);

        throw anim#75;

     label12:
        if $u25 == null goto label16;

        if childAnims1 == null goto label16;

        $u-1 = virtualinvoke childAnims1.<java.util.ArrayList: int size()>();

        anim#85 = newarray (android.animation.Animator)[$u-1];

        $u-1 = 0;

        $u-1#87 = virtualinvoke childAnims1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        gotValues = interfaceinvoke $u-1#87.<java.util.Iterator: boolean hasNext()>();

        if gotValues == 0 goto label14;

        $u-1#91 = interfaceinvoke $u-1#87.<java.util.Iterator: java.lang.Object next()>();

        a = (android.animation.Animator) $u-1#91;

        anim#85[$u-1] = a;

        $u-1 = $u-1 + 1;

        goto label13;

     label14:
        if $u26 != 0 goto label15;

        virtualinvoke $u25.<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>(anim#85);

        return anim1;

     label15:
        virtualinvoke $u25.<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>(anim#85);

     label16:
        return anim1;
    }

    private static android.animation.Keyframe createNewKeyframe(android.animation.Keyframe, float)
    {
        android.animation.Keyframe $u2;
        float $u3;
        java.lang.Class $u-1, $u1;

        $u2 := @parameter0: android.animation.Keyframe;

        $u3 := @parameter1: float;

        $u-1 = virtualinvoke $u2.<android.animation.Keyframe: java.lang.Class getType()>();

        $u1 = <java.lang.Float: java.lang.Class TYPE>;

        if $u-1 != $u1 goto label1;

        $u2 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>($u3);

        return $u2;

     label1:
        $u-1 = virtualinvoke $u2.<android.animation.Keyframe: java.lang.Class getType()>();

        $u1 = <java.lang.Integer: java.lang.Class TYPE>;

        if $u-1 != $u1 goto label2;

        $u2 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float)>($u3);

        return $u2;

     label2:
        $u2 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofObject(float)>($u3);

        return $u2;
    }

    private static void distributeKeyframes(android.animation.Keyframe[], float, int, int)
    {
        android.animation.Keyframe[] $u5;
        float $u6, $u-1;
        int $u7, $u8, count;
        android.animation.Keyframe $u3, $u4;

        $u5 := @parameter0: android.animation.Keyframe[];

        $u6 := @parameter1: float;

        $u7 := @parameter2: int;

        $u8 := @parameter3: int;

        count = $u8 - $u7;

        count = count + 2;

        $u-1 = (float) count;

        $u6 = $u6 / $u-1;

     label1:
        if $u7 > $u8 goto label2;

        $u3 = $u5[$u7];

        count = $u7 + -1;

        $u4 = $u5[count];

        $u-1 = virtualinvoke $u4.<android.animation.Keyframe: float getFraction()>();

        $u-1 = $u-1 + $u6;

        virtualinvoke $u3.<android.animation.Keyframe: void setFraction(float)>($u-1);

        $u7 = $u7 + 1;

        goto label1;

     label2:
        return;
    }

    private static void dumpKeyframes(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] $u8;
        java.lang.String $u9;
        int count, i;
        java.lang.Object keyframe;
        android.animation.Keyframe keyframe#5;
        java.lang.StringBuilder $u4;
        float $u-1;
        byte $u5;
        java.io.Serializable $u5#13;
        boolean $u-1#18;

        $u8 := @parameter0: java.lang.Object[];

        $u9 := @parameter1: java.lang.String;

        if $u8 == null goto label6;

        count = lengthof $u8;

        if count != 0 goto label1;

        return;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AnimatorInflater", $u9);

        count = lengthof $u8;

        i = 0;

     label2:
        if i >= count goto label6;

        keyframe = $u8[i];

        keyframe#5 = (android.animation.Keyframe) keyframe;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keyframe ");

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": fraction ");

        $u-1 = virtualinvoke keyframe#5.<android.animation.Keyframe: float getFraction()>();

        keyframe = "null";

        $u5 = $u-1 cmpg 0.0F;

        if $u5 >= 0 goto label3;

        $u5#13 = "null";

        goto label4;

     label3:
        $u-1 = virtualinvoke keyframe#5.<android.animation.Keyframe: float getFraction()>();

        $u5#13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($u-1);

     label4:
        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($u5#13);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", , value : ");

        $u-1#18 = virtualinvoke keyframe#5.<android.animation.Keyframe: boolean hasValue()>();

        if $u-1#18 == 0 goto label5;

        keyframe = virtualinvoke keyframe#5.<android.animation.Keyframe: java.lang.Object getValue()>();

     label5:
        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(keyframe);

        $u9 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AnimatorInflater", $u9);

        i = i + 1;

        goto label2;

     label6:
        return;
    }

    private static android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray, int, int, int, java.lang.String)
    {
        android.content.res.TypedArray $u22;
        int $u23, $u24, $u25, fromType, toType, valueType;
        java.lang.String $u26, $u-1#20, $u-1#22;
        android.util.TypedValue $u-1;
        boolean hasFrom, hasTo, $u-1#12;
        androidx.core.graphics.PathParser$PathDataNode[] $u-1#24, $u-1#27;
        androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator tvTo1;
        java.lang.Object[] tvTo;
        android.animation.PropertyValuesHolder $u-1#41;
        android.view.InflateException tvTo#47;
        java.lang.StringBuilder evaluator;
        androidx.vectordrawable.graphics.drawable.ArgbEvaluator evaluator#74;
        float $u-1#79, $u-1#84;
        float[] fromString;
        int[] returnValue;

        $u22 := @parameter0: android.content.res.TypedArray;

        $u23 := @parameter1: int;

        $u24 := @parameter2: int;

        $u25 := @parameter3: int;

        $u26 := @parameter4: java.lang.String;

        $u-1 = virtualinvoke $u22.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>($u24);

        if $u-1 == null goto label01;

        hasFrom = 1;

        goto label02;

     label01:
        hasFrom = 0;

     label02:
        if hasFrom == 0 goto label03;

        fromType = $u-1.<android.util.TypedValue: int type>;

        goto label04;

     label03:
        fromType = 0;

     label04:
        $u-1 = virtualinvoke $u22.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>($u25);

        if $u-1 == null goto label05;

        hasTo = 1;

        goto label06;

     label05:
        hasTo = 0;

     label06:
        if hasTo == 0 goto label07;

        toType = $u-1.<android.util.TypedValue: int type>;

        goto label08;

     label07:
        toType = 0;

     label08:
        if $u23 != 4 goto label12;

        if hasFrom == 0 goto label09;

        $u-1#12 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(fromType);

        if $u-1#12 != 0 goto label10;

     label09:
        if hasTo == 0 goto label11;

        $u-1#12 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(toType);

        if $u-1#12 == 0 goto label11;

     label10:
        valueType = 3;

        goto label13;

     label11:
        valueType = 0;

        goto label13;

     label12:
        valueType = $u23;

     label13:
        if valueType != 0 goto label14;

        $u-1#12 = 1;

        goto label15;

     label14:
        $u-1#12 = 0;

     label15:
        if valueType != 2 goto label24;

        $u-1#20 = virtualinvoke $u22.<android.content.res.TypedArray: java.lang.String getString(int)>($u24);

        $u-1#22 = virtualinvoke $u22.<android.content.res.TypedArray: java.lang.String getString(int)>($u25);

        $u-1#24 = staticinvoke <androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>($u-1#20);

        $u-1#27 = staticinvoke <androidx.core.graphics.PathParser: androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String)>($u-1#22);

        if $u-1#24 != null goto label17;

        if $u-1#27 == null goto label16;

        goto label17;

     label16:
        goto label22;

     label17:
        if $u-1#24 == null goto label21;

        tvTo1 = new androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator;

        specialinvoke tvTo1.<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>();

        if $u-1#27 == null goto label19;

        hasTo = staticinvoke <androidx.core.graphics.PathParser: boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[])>($u-1#24, $u-1#27);

        if hasTo == 0 goto label18;

        tvTo = newarray (java.lang.Object)[2];

        tvTo[0] = $u-1#24;

        tvTo[1] = $u-1#27;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>($u26, tvTo1, tvTo);

        goto label20;

     label18:
        tvTo#47 = new android.view.InflateException;

        evaluator = new java.lang.StringBuilder;

        specialinvoke evaluator.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke evaluator.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Can\'t morph from ");

        virtualinvoke evaluator.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#20);

        virtualinvoke evaluator.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke evaluator.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#22);

        $u26 = virtualinvoke evaluator.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tvTo#47.<android.view.InflateException: void <init>(java.lang.String)>($u26);

        throw tvTo#47;

     label19:
        tvTo = newarray (java.lang.Object)[1];

        tvTo[0] = $u-1#24;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>($u26, tvTo1, tvTo);

     label20:
        goto label23;

     label21:
        if $u-1#27 == null goto label22;

        tvTo1 = new androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator;

        specialinvoke tvTo1.<androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator: void <init>()>();

        tvTo = newarray (java.lang.Object)[1];

        tvTo[0] = $u-1#27;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>($u26, tvTo1, tvTo);

        goto label23;

     label22:
        $u-1#41 = null;

     label23:
        return $u-1#41;

     label24:
        $u23 = toType;

        evaluator#74 = null;

        if valueType != 3 goto label25;

        evaluator#74 = staticinvoke <androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>();

     label25:
        if $u-1#12 == 0 goto label35;

        if hasFrom == 0 goto label31;

        if fromType != 5 goto label26;

        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u24, 0.0F);

        goto label27;

     label26:
        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getFloat(int,float)>($u24, 0.0F);

     label27:
        if hasTo == 0 goto label30;

        if $u23 != 5 goto label28;

        $u-1#84 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u25, 0.0F);

        goto label29;

     label28:
        $u-1#84 = virtualinvoke $u22.<android.content.res.TypedArray: float getFloat(int,float)>($u25, 0.0F);

     label29:
        fromString = newarray (float)[2];

        fromString[0] = $u-1#79;

        fromString[1] = $u-1#84;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>($u26, fromString);

        goto label34;

     label30:
        fromString = newarray (float)[1];

        fromString[0] = $u-1#79;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>($u26, fromString);

        goto label34;

     label31:
        if $u23 != 5 goto label32;

        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u25, 0.0F);

        goto label33;

     label32:
        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getFloat(int,float)>($u25, 0.0F);

     label33:
        fromString = newarray (float)[1];

        fromString[0] = $u-1#79;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>($u26, fromString);

     label34:
        goto label48;

     label35:
        if hasFrom == 0 goto label43;

        if fromType != 5 goto label36;

        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u24, 0.0F);

        $u24 = (int) $u-1#79;

        goto label38;

     label36:
        hasFrom = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(fromType);

        if hasFrom == 0 goto label37;

        $u24 = virtualinvoke $u22.<android.content.res.TypedArray: int getColor(int,int)>($u24, 0);

        goto label38;

     label37:
        $u24 = virtualinvoke $u22.<android.content.res.TypedArray: int getInt(int,int)>($u24, 0);

     label38:
        if hasTo == 0 goto label42;

        if $u23 != 5 goto label39;

        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u25, 0.0F);

        $u23 = (int) $u-1#79;

        goto label41;

     label39:
        hasTo = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($u23);

        if hasTo == 0 goto label40;

        $u23 = virtualinvoke $u22.<android.content.res.TypedArray: int getColor(int,int)>($u25, 0);

        goto label41;

     label40:
        $u23 = virtualinvoke $u22.<android.content.res.TypedArray: int getInt(int,int)>($u25, 0);

     label41:
        returnValue = newarray (int)[2];

        returnValue[0] = $u24;

        returnValue[1] = $u23;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>($u26, returnValue);

        goto label48;

     label42:
        returnValue = newarray (int)[1];

        returnValue[0] = $u24;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>($u26, returnValue);

        goto label48;

     label43:
        if hasTo == 0 goto label47;

        if $u23 != 5 goto label44;

        $u-1#79 = virtualinvoke $u22.<android.content.res.TypedArray: float getDimension(int,float)>($u25, 0.0F);

        $u23 = (int) $u-1#79;

        goto label46;

     label44:
        hasTo = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($u23);

        if hasTo == 0 goto label45;

        $u23 = virtualinvoke $u22.<android.content.res.TypedArray: int getColor(int,int)>($u25, 0);

        goto label46;

     label45:
        $u23 = virtualinvoke $u22.<android.content.res.TypedArray: int getInt(int,int)>($u25, 0);

     label46:
        returnValue = newarray (int)[1];

        returnValue[0] = $u23;

        $u-1#41 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>($u26, returnValue);

        goto label48;

     label47:
        $u-1#41 = null;

     label48:
        if $u-1#41 == null goto label49;

        if evaluator#74 == null goto label49;

        virtualinvoke $u-1#41.<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>(evaluator#74);

     label49:
        return $u-1#41;
    }

    private static int inferValueTypeFromValues(android.content.res.TypedArray, int, int)
    {
        android.content.res.TypedArray $u7;
        int $u8, $u9, fromType;
        android.util.TypedValue $u-1;
        boolean hasTo, hasFrom;

        $u7 := @parameter0: android.content.res.TypedArray;

        $u8 := @parameter1: int;

        $u9 := @parameter2: int;

        $u-1 = virtualinvoke $u7.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>($u8);

        hasTo = 1;

        $u8 = 0;

        if $u-1 == null goto label01;

        hasFrom = 1;

        goto label02;

     label01:
        hasFrom = 0;

     label02:
        if hasFrom == 0 goto label03;

        fromType = $u-1.<android.util.TypedValue: int type>;

        goto label04;

     label03:
        fromType = 0;

     label04:
        $u-1 = virtualinvoke $u7.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>($u9);

        if $u-1 == null goto label05;

        goto label06;

     label05:
        hasTo = 0;

     label06:
        if hasTo == 0 goto label07;

        $u8 = $u-1.<android.util.TypedValue: int type>;

     label07:
        if hasFrom == 0 goto label08;

        hasFrom = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(fromType);

        if hasFrom != 0 goto label09;

     label08:
        if hasTo == 0 goto label10;

        hasTo = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($u8);

        if hasTo == 0 goto label10;

     label09:
        return 3;

     label10:
        return 0;
    }

    private static int inferValueTypeOfKeyframe(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, org.xmlpull.v1.XmlPullParser)
    {
        android.content.res.Resources $u4;
        android.content.res.Resources$Theme $u5;
        android.util.AttributeSet $u6;
        org.xmlpull.v1.XmlPullParser $u7;
        int[] a;
        android.content.res.TypedArray $u-1;
        boolean hasValue;
        android.util.TypedValue $u-1#6;
        int valueType;
        byte valueType#11;

        $u4 := @parameter0: android.content.res.Resources;

        $u5 := @parameter1: android.content.res.Resources$Theme;

        $u6 := @parameter2: android.util.AttributeSet;

        $u7 := @parameter3: org.xmlpull.v1.XmlPullParser;

        a = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_KEYFRAME>;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u4, $u5, $u6, a);

        hasValue = 0;

        $u-1#6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u-1, $u7, "value", 0);

        if $u-1#6 == null goto label1;

        hasValue = 1;

     label1:
        if hasValue == 0 goto label2;

        valueType = $u-1#6.<android.util.TypedValue: int type>;

        hasValue = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>(valueType);

        if hasValue == 0 goto label2;

        valueType#11 = 3;

        goto label3;

     label2:
        valueType#11 = 0;

     label3:
        virtualinvoke $u-1.<android.content.res.TypedArray: void recycle()>();

        return valueType#11;
    }

    private static boolean isColorType(int)
    {
        int $u1;

        $u1 := @parameter0: int;

        if $u1 < 28 goto label1;

        if $u1 > 31 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static android.animation.Animator loadAnimator(android.content.Context, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context $u2;
        int $u3, objectAnimator;
        android.animation.Animator $u-1;
        android.content.res.Resources $u-1#5;
        android.content.res.Resources$Theme $u-1#7;

        $u2 := @parameter0: android.content.Context;

        $u3 := @parameter1: int;

        objectAnimator = <android.os.Build$VERSION: int SDK_INT>;

        if objectAnimator < 24 goto label1;

        $u-1 = staticinvoke <android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>($u2, $u3);

        return $u-1;

     label1:
        $u-1#5 = virtualinvoke $u2.<android.content.Context: android.content.res.Resources getResources()>();

        $u-1#7 = virtualinvoke $u2.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $u-1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int)>($u2, $u-1#5, $u-1#7, $u3);

        return $u-1;
    }

    public static android.animation.Animator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, int) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context $u1;
        android.content.res.Resources $u2;
        android.content.res.Resources$Theme $u3;
        int $u4;
        android.animation.Animator $u-1;

        $u1 := @parameter0: android.content.Context;

        $u2 := @parameter1: android.content.res.Resources;

        $u3 := @parameter2: android.content.res.Resources$Theme;

        $u4 := @parameter3: int;

        $u-1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float)>($u1, $u2, $u3, $u4, 1.0F);

        return $u-1;
    }

    public static android.animation.Animator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, int, float) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context $u5;
        android.content.res.Resources $u6;
        android.content.res.Resources$Theme $u7;
        int $u8;
        float $u9;
        android.content.res.XmlResourceParser parser, $u-1;
        android.animation.Animator $u-1#5;
        java.lang.Throwable animator;
        java.io.IOException ex;
        android.content.res.Resources$NotFoundException $u3;
        java.lang.StringBuilder $u4;
        java.lang.String $u-1#11;
        org.xmlpull.v1.XmlPullParserException ex#16;

        $u5 := @parameter0: android.content.Context;

        $u6 := @parameter1: android.content.res.Resources;

        $u7 := @parameter2: android.content.res.Resources$Theme;

        $u8 := @parameter3: int;

        $u9 := @parameter4: float;

        parser = null;

     label01:
        $u-1 = virtualinvoke $u6.<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>($u8);

     label02:
        parser = $u-1;

     label03:
        $u-1#5 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float)>($u5, $u6, $u7, $u-1, $u9);

     label04:
        if $u-1 == null goto label12;

        interfaceinvoke $u-1.<android.content.res.XmlResourceParser: void close()>();

        return $u-1#5;

     label05:
        animator := @caughtexception;

        goto label10;

     label06:
        ex := @caughtexception;

     label07:
        $u3 = new android.content.res.Resources$NotFoundException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load animation resource ID #0x");

        $u-1#11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($u8);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#11);

        $u-1#11 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($u-1#11);

        virtualinvoke $u3.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(ex);

        throw $u3;

     label08:
        ex#16 := @caughtexception;

     label09:
        $u3 = new android.content.res.Resources$NotFoundException;

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load animation resource ID #0x");

        $u-1#11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($u8);

        virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#11);

        $u-1#11 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u3.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($u-1#11);

        virtualinvoke $u3.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(ex#16);

        throw $u3;

     label10:
        if parser == null goto label11;

        interfaceinvoke parser.<android.content.res.XmlResourceParser: void close()>();

     label11:
        throw animator;

     label12:
        return $u-1#5;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label08;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    private static android.animation.ValueAnimator loadAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, android.animation.ValueAnimator, float, org.xmlpull.v1.XmlPullParser) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context $u4;
        android.content.res.Resources $u5;
        android.content.res.Resources$Theme $u6;
        android.util.AttributeSet $u7;
        float $u9;
        org.xmlpull.v1.XmlPullParser $u10;
        android.animation.ValueAnimator $u8;
        int[] arrayAnimator;
        android.content.res.TypedArray $u-1, $u-1#6;
        int $u-1#11;
        android.view.animation.Interpolator $u-1#13;

        $u4 := @parameter0: android.content.Context;

        $u5 := @parameter1: android.content.res.Resources;

        $u6 := @parameter2: android.content.res.Resources$Theme;

        $u7 := @parameter3: android.util.AttributeSet;

        $u8 := @parameter4: android.animation.ValueAnimator;

        $u9 := @parameter5: float;

        $u10 := @parameter6: org.xmlpull.v1.XmlPullParser;

        arrayAnimator = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_ANIMATOR>;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u5, $u6, $u7, arrayAnimator);

        arrayAnimator = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_PROPERTY_ANIMATOR>;

        $u-1#6 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u5, $u6, $u7, arrayAnimator);

        if $u8 != null goto label1;

        $u8 = new android.animation.ValueAnimator;

        specialinvoke $u8.<android.animation.ValueAnimator: void <init>()>();

     label1:
        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser)>($u8, $u-1, $u-1#6, $u9, $u10);

        $u-1#11 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u-1, $u10, "interpolator", 0, 0);

        if $u-1#11 <= 0 goto label2;

        $u-1#13 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>($u4, $u-1#11);

        virtualinvoke $u8.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($u-1#13);

     label2:
        virtualinvoke $u-1.<android.content.res.TypedArray: void recycle()>();

        if $u-1#6 == null goto label3;

        virtualinvoke $u-1#6.<android.content.res.TypedArray: void recycle()>();

     label3:
        return $u8;
    }

    private static android.animation.Keyframe loadKeyframe(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context $u10;
        android.content.res.Resources $u11;
        android.content.res.Resources$Theme $u12;
        android.util.AttributeSet $u13;
        org.xmlpull.v1.XmlPullParser $u15;
        int $u14;
        int[] a;
        android.content.res.TypedArray $u-1;
        android.animation.Keyframe keyframe;
        float $u-1#9, $u-1#22;
        android.util.TypedValue $u-1#12;
        boolean hasValue, $u-1#16;
        android.view.animation.Interpolator $u-1#31;

        $u10 := @parameter0: android.content.Context;

        $u11 := @parameter1: android.content.res.Resources;

        $u12 := @parameter2: android.content.res.Resources$Theme;

        $u13 := @parameter3: android.util.AttributeSet;

        $u14 := @parameter4: int;

        $u15 := @parameter5: org.xmlpull.v1.XmlPullParser;

        a = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_KEYFRAME>;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u11, $u12, $u13, a);

        keyframe = null;

        $u-1#9 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($u-1, $u15, "fraction", 3, -1.0F);

        $u-1#12 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.util.TypedValue peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u-1, $u15, "value", 0);

        if $u-1#12 == null goto label01;

        hasValue = 1;

        goto label02;

     label01:
        hasValue = 0;

     label02:
        if $u14 != 4 goto label04;

        if hasValue == 0 goto label03;

        $u14 = $u-1#12.<android.util.TypedValue: int type>;

        $u-1#16 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean isColorType(int)>($u14);

        if $u-1#16 == 0 goto label03;

        $u14 = 3;

        goto label04;

     label03:
        $u14 = 0;

     label04:
        if hasValue == 0 goto label08;

        if $u14 == 0 goto label06;

        if $u14 == 1 goto label05;

        if $u14 == 3 goto label05;

        goto label07;

     label05:
        $u14 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u-1, $u15, "value", 0, 0);

        keyframe = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>($u-1#9, $u14);

        goto label07;

     label06:
        $u-1#22 = staticinvoke <androidx.core.content.res.TypedArrayUtils: float getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float)>($u-1, $u15, "value", 0, 0.0F);

        keyframe = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>($u-1#9, $u-1#22);

     label07:
        goto label10;

     label08:
        if $u14 != 0 goto label09;

        keyframe = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>($u-1#9);

        goto label10;

     label09:
        keyframe = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofInt(float)>($u-1#9);

     label10:
        $u14 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u-1, $u15, "interpolator", 1, 0);

        if $u14 <= 0 goto label11;

        $u-1#31 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>($u10, $u14);

        virtualinvoke keyframe.<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>($u-1#31);

     label11:
        virtualinvoke $u-1.<android.content.res.TypedArray: void recycle()>();

        return keyframe;
    }

    private static android.animation.ObjectAnimator loadObjectAnimator(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, float, org.xmlpull.v1.XmlPullParser) throws android.content.res.Resources$NotFoundException
    {
        android.content.Context $u8;
        android.content.res.Resources $u9;
        android.content.res.Resources$Theme $u10;
        android.util.AttributeSet $u11;
        float $u12;
        org.xmlpull.v1.XmlPullParser $u13;
        android.animation.ObjectAnimator anim;

        $u8 := @parameter0: android.content.Context;

        $u9 := @parameter1: android.content.res.Resources;

        $u10 := @parameter2: android.content.res.Resources$Theme;

        $u11 := @parameter3: android.util.AttributeSet;

        $u12 := @parameter4: float;

        $u13 := @parameter5: org.xmlpull.v1.XmlPullParser;

        anim = new android.animation.ObjectAnimator;

        specialinvoke anim.<android.animation.ObjectAnimator: void <init>()>();

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser)>($u8, $u9, $u10, $u11, anim, $u12, $u13);

        return anim;
    }

    private static android.animation.PropertyValuesHolder loadPvh(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, java.lang.String, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context $u20;
        android.content.res.Resources $u21;
        android.content.res.Resources$Theme $u22;
        org.xmlpull.v1.XmlPullParser $u23;
        java.lang.String $u24, $u-1#10;
        int $u25, $u-1, $u-1#41, lastKeyframe, startIndex1, value, type;
        java.util.ArrayList keyframes;
        boolean $u-1#13;
        android.util.AttributeSet $u-1#16;
        android.animation.Keyframe $u-1#32, lastKeyframe#51;
        java.lang.Object $u-1#45;
        float $u-1#52, $u-1#101;
        byte i;
        android.animation.Keyframe[] name;
        android.animation.PropertyValuesHolder $u-1#110;
        androidx.vectordrawable.graphics.drawable.ArgbEvaluator $u-1#113;

        $u20 := @parameter0: android.content.Context;

        $u21 := @parameter1: android.content.res.Resources;

        $u22 := @parameter2: android.content.res.Resources$Theme;

        $u23 := @parameter3: org.xmlpull.v1.XmlPullParser;

        $u24 := @parameter4: java.lang.String;

        $u25 := @parameter5: int;

        keyframes = null;

     label01:
        $u-1 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $u-1 == 3 goto label06;

        if $u-1 == 1 goto label06;

        $u-1#10 = interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $u-1#13 = virtualinvoke $u-1#10.<java.lang.String: boolean equals(java.lang.Object)>("keyframe");

        if $u-1#13 == 0 goto label05;

        if $u25 != 4 goto label02;

        $u-1#16 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($u23);

        $u25 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser)>($u21, $u22, $u-1#16, $u23);

        goto label02;

     label02:
        $u-1#16 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($u23);

        $u-1#32 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser)>($u20, $u21, $u22, $u-1#16, $u25, $u23);

        if $u-1#32 == null goto label04;

        if keyframes != null goto label03;

        keyframes = new java.util.ArrayList;

        specialinvoke keyframes.<java.util.ArrayList: void <init>()>();

     label03:
        virtualinvoke keyframes.<java.util.ArrayList: boolean add(java.lang.Object)>($u-1#32);

     label04:
        interfaceinvoke $u23.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label05:
        goto label01;

     label06:
        if keyframes == null goto label20;

        $u-1#41 = virtualinvoke keyframes.<java.util.ArrayList: int size()>();

        $u-1 = $u-1#41;

        if $u-1#41 <= 0 goto label19;

        $u-1#45 = virtualinvoke keyframes.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $u-1#32 = (android.animation.Keyframe) $u-1#45;

        lastKeyframe = $u-1#41 + -1;

        $u-1#45 = virtualinvoke keyframes.<java.util.ArrayList: java.lang.Object get(int)>(lastKeyframe);

        lastKeyframe#51 = (android.animation.Keyframe) $u-1#45;

        $u-1#52 = virtualinvoke lastKeyframe#51.<android.animation.Keyframe: float getFraction()>();

        i = $u-1#52 cmpg 1.0F;

        if i >= 0 goto label08;

        i = $u-1#52 cmpg 0.0F;

        if i >= 0 goto label07;

        virtualinvoke lastKeyframe#51.<android.animation.Keyframe: void setFraction(float)>(1.0F);

        goto label08;

     label07:
        $u-1 = virtualinvoke keyframes.<java.util.ArrayList: int size()>();

        lastKeyframe#51 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>(lastKeyframe#51, 1.0F);

        virtualinvoke keyframes.<java.util.ArrayList: void add(int,java.lang.Object)>($u-1, lastKeyframe#51);

        $u-1 = $u-1#41 + 1;

     label08:
        $u-1#52 = virtualinvoke $u-1#32.<android.animation.Keyframe: float getFraction()>();

        i = $u-1#52 cmpl 0.0F;

        if i == 0 goto label10;

        i = $u-1#52 cmpg 0.0F;

        if i >= 0 goto label09;

        virtualinvoke $u-1#32.<android.animation.Keyframe: void setFraction(float)>(0.0F);

        goto label10;

     label09:
        $u-1#32 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float)>($u-1#32, 0.0F);

        virtualinvoke keyframes.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $u-1#32);

        $u-1 = $u-1 + 1;

     label10:
        name = newarray (android.animation.Keyframe)[$u-1];

        virtualinvoke keyframes.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(name);

        $u-1#41 = 0;

     label11:
        if $u-1#41 >= $u-1 goto label18;

        $u-1#32 = name[$u-1#41];

        $u-1#52 = virtualinvoke $u-1#32.<android.animation.Keyframe: float getFraction()>();

        i = $u-1#52 cmpg 0.0F;

        if i >= 0 goto label17;

        if $u-1#41 != 0 goto label12;

        virtualinvoke $u-1#32.<android.animation.Keyframe: void setFraction(float)>(0.0F);

        goto label17;

     label12:
        lastKeyframe = $u-1 + -1;

        if $u-1#41 != lastKeyframe goto label13;

        virtualinvoke $u-1#32.<android.animation.Keyframe: void setFraction(float)>(1.0F);

        goto label17;

     label13:
        lastKeyframe = $u-1#41;

        value = $u-1#41 + 1;

        startIndex1 = $u-1#41;

     label14:
        type = $u-1 + -1;

        if value >= type goto label16;

        $u-1#32 = name[value];

        $u-1#52 = virtualinvoke $u-1#32.<android.animation.Keyframe: float getFraction()>();

        i = $u-1#52 cmpl 0.0F;

        if i < 0 goto label15;

        goto label16;

     label15:
        startIndex1 = value;

        value = value + 1;

        goto label14;

     label16:
        value = startIndex1 + 1;

        $u-1#32 = name[value];

        $u-1#52 = virtualinvoke $u-1#32.<android.animation.Keyframe: float getFraction()>();

        value = lastKeyframe + -1;

        $u-1#32 = name[value];

        $u-1#101 = virtualinvoke $u-1#32.<android.animation.Keyframe: float getFraction()>();

        $u-1#52 = $u-1#52 - $u-1#101;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void distributeKeyframes(android.animation.Keyframe[],float,int,int)>(name, $u-1#52, lastKeyframe, startIndex1);

        goto label17;

     label17:
        $u-1#41 = $u-1#41 + 1;

        goto label11;

     label18:
        $u-1#110 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>($u24, name);

        if $u25 != 3 goto label21;

        $u-1#113 = staticinvoke <androidx.vectordrawable.graphics.drawable.ArgbEvaluator: androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance()>();

        virtualinvoke $u-1#110.<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>($u-1#113);

        return $u-1#110;

     label19:
        goto label20;

     label20:
        return null;

     label21:
        return $u-1#110;
    }

    private static android.animation.PropertyValuesHolder[] loadValues(android.content.Context, android.content.res.Resources, android.content.res.Resources$Theme, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.Context $u17;
        android.content.res.Resources $u18;
        android.content.res.Resources$Theme $u19;
        org.xmlpull.v1.XmlPullParser $u20;
        android.util.AttributeSet $u21;
        java.util.ArrayList values;
        int $u-1, valueType#42;
        java.lang.String $u-1#7;
        boolean $u-1#9;
        int[] valueType;
        android.content.res.TypedArray $u-1#15;
        android.animation.PropertyValuesHolder $u-1#25, pvh;
        android.animation.PropertyValuesHolder[] pvh#41;
        java.lang.Object $u-1#43;

        $u17 := @parameter0: android.content.Context;

        $u18 := @parameter1: android.content.res.Resources;

        $u19 := @parameter2: android.content.res.Resources$Theme;

        $u20 := @parameter3: org.xmlpull.v1.XmlPullParser;

        $u21 := @parameter4: android.util.AttributeSet;

        values = null;

     label01:
        $u-1 = interfaceinvoke $u20.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $u-1 == 3 goto label07;

        if $u-1 == 1 goto label07;

        if $u-1 == 2 goto label02;

        interfaceinvoke $u20.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label02:
        $u-1#7 = interfaceinvoke $u20.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $u-1#9 = virtualinvoke $u-1#7.<java.lang.String: boolean equals(java.lang.Object)>("propertyValuesHolder");

        if $u-1#9 == 0 goto label06;

        valueType = <androidx.vectordrawable.graphics.drawable.AndroidResources: int[] STYLEABLE_PROPERTY_VALUES_HOLDER>;

        $u-1#15 = staticinvoke <androidx.core.content.res.TypedArrayUtils: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($u18, $u19, $u21, valueType);

        $u-1#7 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u-1#15, $u20, "propertyName", 3);

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u-1#15, $u20, "valueType", 2, 4);

        $u-1#25 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u17, $u18, $u19, $u20, $u-1#7, $u-1);

        pvh = $u-1#25;

        if $u-1#25 != null goto label03;

        pvh = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>($u-1#15, $u-1, 0, 1, $u-1#7);

        goto label03;

     label03:
        if pvh == null goto label05;

        if values != null goto label04;

        values = new java.util.ArrayList;

        specialinvoke values.<java.util.ArrayList: void <init>()>();

     label04:
        virtualinvoke values.<java.util.ArrayList: boolean add(java.lang.Object)>(pvh);

     label05:
        virtualinvoke $u-1#15.<android.content.res.TypedArray: void recycle()>();

        goto label06;

     label06:
        interfaceinvoke $u20.<org.xmlpull.v1.XmlPullParser: int next()>();

        goto label01;

     label07:
        if values == null goto label09;

        $u-1 = virtualinvoke values.<java.util.ArrayList: int size()>();

        pvh#41 = newarray (android.animation.PropertyValuesHolder)[$u-1];

        valueType#42 = 0;

     label08:
        if valueType#42 >= $u-1 goto label10;

        $u-1#43 = virtualinvoke values.<java.util.ArrayList: java.lang.Object get(int)>(valueType#42);

        $u-1#25 = (android.animation.PropertyValuesHolder) $u-1#43;

        pvh#41[valueType#42] = $u-1#25;

        valueType#42 = valueType#42 + 1;

        goto label08;

     label09:
        return null;

     label10:
        return pvh#41;
    }

    private static void parseAnimatorFromTypeArray(android.animation.ValueAnimator, android.content.res.TypedArray, android.content.res.TypedArray, float, org.xmlpull.v1.XmlPullParser)
    {
        android.animation.ValueAnimator $u11;
        android.content.res.TypedArray $u12, $u13;
        float $u14;
        org.xmlpull.v1.XmlPullParser $u15;
        long startDelay, duration;
        int $u-1, $u-1#13;
        boolean $u-1#16;
        android.animation.PropertyValuesHolder $u-1#24;
        android.animation.PropertyValuesHolder[] $u9;

        $u11 := @parameter0: android.animation.ValueAnimator;

        $u12 := @parameter1: android.content.res.TypedArray;

        $u13 := @parameter2: android.content.res.TypedArray;

        $u14 := @parameter3: float;

        $u15 := @parameter4: org.xmlpull.v1.XmlPullParser;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u12, $u15, "duration", 1, 300);

        duration = (long) $u-1;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u12, $u15, "startOffset", 2, 0);

        startDelay = (long) $u-1;

        $u-1#13 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u12, $u15, "valueType", 7, 4);

        $u-1 = $u-1#13;

        $u-1#16 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>($u15, "valueFrom");

        if $u-1#16 == 0 goto label2;

        $u-1#16 = staticinvoke <androidx.core.content.res.TypedArrayUtils: boolean hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>($u15, "valueTo");

        if $u-1#16 == 0 goto label2;

        if $u-1#13 != 4 goto label1;

        $u-1 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int inferValueTypeFromValues(android.content.res.TypedArray,int,int)>($u12, 5, 6);

     label1:
        $u-1#24 = staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String)>($u12, $u-1, 5, 6, "");

        if $u-1#24 == null goto label2;

        $u9 = newarray (android.animation.PropertyValuesHolder)[1];

        $u9[0] = $u-1#24;

        virtualinvoke $u11.<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>($u9);

     label2:
        virtualinvoke $u11.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(duration);

        virtualinvoke $u11.<android.animation.ValueAnimator: void setStartDelay(long)>(startDelay);

        $u-1#13 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u12, $u15, "repeatCount", 3, 0);

        virtualinvoke $u11.<android.animation.ValueAnimator: void setRepeatCount(int)>($u-1#13);

        $u-1#13 = staticinvoke <androidx.core.content.res.TypedArrayUtils: int getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int)>($u12, $u15, "repeatMode", 4, 1);

        virtualinvoke $u11.<android.animation.ValueAnimator: void setRepeatMode(int)>($u-1#13);

        if $u13 == null goto label3;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser)>($u11, $u13, $u-1, $u14, $u15);

     label3:
        return;
    }

    private static void setupObjectAnimator(android.animation.ValueAnimator, android.content.res.TypedArray, int, float, org.xmlpull.v1.XmlPullParser)
    {
        android.animation.ValueAnimator $u7;
        android.content.res.TypedArray $u8;
        float $u10;
        org.xmlpull.v1.XmlPullParser $u11;
        int $u9;
        android.animation.ObjectAnimator oa;
        java.lang.String $u-1, $u-1#10, $u-1#14;
        android.view.InflateException path;
        java.lang.StringBuilder $u5;
        android.graphics.Path $u-1#25;

        $u7 := @parameter0: android.animation.ValueAnimator;

        $u8 := @parameter1: android.content.res.TypedArray;

        $u9 := @parameter2: int;

        $u10 := @parameter3: float;

        $u11 := @parameter4: org.xmlpull.v1.XmlPullParser;

        oa = (android.animation.ObjectAnimator) $u7;

        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u8, $u11, "pathData", 1);

        if $u-1 == null goto label4;

        $u-1#10 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u8, $u11, "propertyXName", 2);

        $u-1#14 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u8, $u11, "propertyYName", 3);

        if $u9 == 2 goto label1;

        if $u9 != 4 goto label1;

     label1:
        if $u-1#10 != null goto label3;

        if $u-1#14 == null goto label2;

        goto label3;

     label2:
        path = new android.view.InflateException;

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $u-1 = virtualinvoke $u8.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1);

        virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" propertyXName or propertyYName is needed for PathData");

        $u-1 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke path.<android.view.InflateException: void <init>(java.lang.String)>($u-1);

        throw path;

     label3:
        $u-1#25 = staticinvoke <androidx.core.graphics.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)>($u-1);

        $u10 = 0.5F * $u10;

        staticinvoke <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String)>($u-1#25, oa, $u10, $u-1#10, $u-1#14);

        return;

     label4:
        $u-1 = staticinvoke <androidx.core.content.res.TypedArrayUtils: java.lang.String getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int)>($u8, $u11, "propertyName", 0);

        virtualinvoke oa.<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>($u-1);

        return;
    }

    private static void setupPathMotion(android.graphics.Path, android.animation.ObjectAnimator, float, java.lang.String, java.lang.String)
    {
        android.graphics.Path $u20, x;
        android.animation.ObjectAnimator $u21;
        float $u22, totalLength, $u-1#7;
        java.lang.String $u23, $u24;
        android.graphics.PathMeasure measureForTotalLength;
        java.util.ArrayList contourLengths;
        float[] mY, position, mX#21;
        java.lang.Float $u-1;
        boolean $u-1#11;
        int mX, contourIndex, step, x#41, $u-1#42;
        java.lang.Object $u-1#30;
        byte x#50;
        android.animation.PropertyValuesHolder x#53, y;
        android.animation.PropertyValuesHolder[] i;

        $u20 := @parameter0: android.graphics.Path;

        $u21 := @parameter1: android.animation.ObjectAnimator;

        $u22 := @parameter2: float;

        $u23 := @parameter3: java.lang.String;

        $u24 := @parameter4: java.lang.String;

        x = $u20;

        measureForTotalLength = new android.graphics.PathMeasure;

        specialinvoke measureForTotalLength.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>($u20, 0);

        totalLength = 0.0F;

        contourLengths = new java.util.ArrayList;

        specialinvoke contourLengths.<java.util.ArrayList: void <init>()>();

        $u-1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke contourLengths.<java.util.ArrayList: boolean add(java.lang.Object)>($u-1);

     label1:
        $u-1#7 = virtualinvoke measureForTotalLength.<android.graphics.PathMeasure: float getLength()>();

        totalLength = totalLength + $u-1#7;

        $u-1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(totalLength);

        virtualinvoke contourLengths.<java.util.ArrayList: boolean add(java.lang.Object)>($u-1);

        $u-1#11 = virtualinvoke measureForTotalLength.<android.graphics.PathMeasure: boolean nextContour()>();

        if $u-1#11 != 0 goto label9;

        measureForTotalLength = new android.graphics.PathMeasure;

        specialinvoke measureForTotalLength.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>(x, 0);

        $u22 = totalLength / $u22;

        mX = (int) $u22;

        mX = mX + 1;

        mX = staticinvoke <java.lang.Math: int min(int,int)>(100, mX);

        mX#21 = newarray (float)[mX];

        mY = newarray (float)[mX];

        position = newarray (float)[2];

        contourIndex = 0;

        step = mX + -1;

        $u22 = (float) step;

        $u22 = totalLength / $u22;

        totalLength = 0.0F;

        step = 0;

     label2:
        if step >= mX goto label4;

        $u-1#30 = virtualinvoke contourLengths.<java.util.ArrayList: java.lang.Object get(int)>(contourIndex);

        $u-1 = (java.lang.Float) $u-1#30;

        $u-1#7 = virtualinvoke $u-1.<java.lang.Float: float floatValue()>();

        $u-1#7 = totalLength - $u-1#7;

        virtualinvoke measureForTotalLength.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>($u-1#7, position, null);

        $u-1#7 = position[0];

        mX#21[step] = $u-1#7;

        $u-1#7 = position[1];

        mY[step] = $u-1#7;

        totalLength = totalLength + $u22;

        x#41 = contourIndex + 1;

        $u-1#42 = virtualinvoke contourLengths.<java.util.ArrayList: int size()>();

        if x#41 >= $u-1#42 goto label3;

        x#41 = contourIndex + 1;

        $u-1#30 = virtualinvoke contourLengths.<java.util.ArrayList: java.lang.Object get(int)>(x#41);

        $u-1 = (java.lang.Float) $u-1#30;

        $u-1#7 = virtualinvoke $u-1.<java.lang.Float: float floatValue()>();

        x#50 = totalLength cmpl $u-1#7;

        if x#50 <= 0 goto label3;

        contourIndex = contourIndex + 1;

        virtualinvoke measureForTotalLength.<android.graphics.PathMeasure: boolean nextContour()>();

     label3:
        step = step + 1;

        goto label2;

     label4:
        x#53 = null;

        y = null;

        if $u23 == null goto label5;

        x#53 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>($u23, mX#21);

     label5:
        if $u24 == null goto label6;

        y = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>($u24, mY);

     label6:
        if x#53 != null goto label7;

        i = newarray (android.animation.PropertyValuesHolder)[1];

        i[0] = y;

        virtualinvoke $u21.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>(i);

        return;

     label7:
        if y != null goto label8;

        i = newarray (android.animation.PropertyValuesHolder)[1];

        i[0] = x#53;

        virtualinvoke $u21.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>(i);

        return;

     label8:
        i = newarray (android.animation.PropertyValuesHolder)[2];

        i[0] = x#53;

        i[1] = y;

        virtualinvoke $u21.<android.animation.ObjectAnimator: void setValues(android.animation.PropertyValuesHolder[])>(i);

        return;

     label9:
        x = $u20;

        goto label1;
    }

    public static void <clinit>()
    {
        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_UNDEFINED> = 4;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_PATH> = 2;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_INT> = 1;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_FLOAT> = 0;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int VALUE_TYPE_COLOR> = 3;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int TOGETHER> = 0;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: java.lang.String TAG> = "AnimatorInflater";

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: int MAX_NUM_POINTS> = 100;

        <androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat: boolean DBG_ANIMATOR_INFLATER> = 0;

        return;
    }
}
