public class androidx.appcompat.graphics.drawable.DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private android.graphics.drawable.Drawable mDrawable;

    public void <init>(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u1;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke this.<android.graphics.drawable.Drawable: void <init>()>();

        virtualinvoke this.<androidx.appcompat.graphics.drawable.DrawableWrapper: void setWrappedDrawable(android.graphics.drawable.Drawable)>($u1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.Canvas $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.graphics.Canvas;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($u2);

        return;
    }

    public int getChangingConfigurations()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        return $u-1;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u-1;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u-1 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u-1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>();

        return $u-1;
    }

    public int getIntrinsicHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $u-1;
    }

    public int getIntrinsicWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $u-1;
    }

    public int getMinimumHeight()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        return $u-1;
    }

    public int getMinimumWidth()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        return $u-1;
    }

    public int getOpacity()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $u-1;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.Rect $u2;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.graphics.Rect;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>($u2);

        return $u-1;
    }

    public int[] getState()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int[] $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: int[] getState()>();

        return $u-1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.Region $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>();

        return $u-1;
    }

    public android.graphics.drawable.Drawable getWrappedDrawable()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable ret0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        ret0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        return ret0;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u1;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke this.<androidx.appcompat.graphics.drawable.DrawableWrapper: void invalidateSelf()>();

        return;
    }

    public boolean isAutoMirrored()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: boolean isAutoMirrored(android.graphics.drawable.Drawable)>($u0);

        return $u-1;
    }

    public boolean isStateful()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $u-1;
    }

    public void jumpToCurrentState()
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.Rect $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.graphics.Rect;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($u2);

        return;
    }

    protected boolean onLevelChange(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u2;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean setLevel(int)>($u2);

        return $u-1;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u1;
        java.lang.Runnable $u2;
        long $u3;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u1 := @parameter0: android.graphics.drawable.Drawable;

        $u2 := @parameter1: java.lang.Runnable;

        $u3 := @parameter2: long;

        virtualinvoke this.<androidx.appcompat.graphics.drawable.DrawableWrapper: void scheduleSelf(java.lang.Runnable,long)>($u2, $u3);

        return;
    }

    public void setAlpha(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setAlpha(int)>($u2);

        return;
    }

    public void setAutoMirrored(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: boolean;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setAutoMirrored(android.graphics.drawable.Drawable,boolean)>($u0, $u2);

        return;
    }

    public void setChangingConfigurations(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>($u2);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.ColorFilter $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.graphics.ColorFilter;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($u2);

        return;
    }

    public void setDither(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: boolean;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setDither(boolean)>($u2);

        return;
    }

    public void setFilterBitmap(boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: boolean;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>($u2);

        return;
    }

    public void setHotspot(float, float)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        float $u2, $u3;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: float;

        $u3 := @parameter1: float;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setHotspot(android.graphics.drawable.Drawable,float,float)>($u0, $u2, $u3);

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u2, $u3, $u4, $u5;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u5 := @parameter3: int;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)>($u0, $u2, $u3, $u4, $u5);

        return;
    }

    public boolean setState(int[])
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int[] $u2;
        boolean $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int[];

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u-1 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean setState(int[])>($u2);

        return $u-1;
    }

    public void setTint(int)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        int $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: int;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTint(android.graphics.drawable.Drawable,int)>($u0, $u2);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.content.res.ColorStateList $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.content.res.ColorStateList;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($u0, $u2);

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.PorterDuff$Mode $u2;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: android.graphics.PorterDuff$Mode;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($u0, $u2);

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        boolean $u2, $u3, $u-1;
        android.graphics.drawable.Drawable $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u2 := @parameter0: boolean;

        $u3 := @parameter1: boolean;

        $u-1 = specialinvoke this.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($u2, $u3);

        if $u-1 != 0 goto label2;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        $u2 = virtualinvoke $u0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($u2, $u3);

        if $u2 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void setWrappedDrawable(android.graphics.drawable.Drawable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u3, $u0;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u3 := @parameter0: android.graphics.drawable.Drawable;

        $u0 = this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable>;

        if $u0 == null goto label1;

        virtualinvoke $u0.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        this.<androidx.appcompat.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable mDrawable> = $u3;

        if $u3 == null goto label2;

        virtualinvoke $u3.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(this);

     label2:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        androidx.appcompat.graphics.drawable.DrawableWrapper this;
        android.graphics.drawable.Drawable $u1;
        java.lang.Runnable $u2;

        this := @this: androidx.appcompat.graphics.drawable.DrawableWrapper;

        $u1 := @parameter0: android.graphics.drawable.Drawable;

        $u2 := @parameter1: java.lang.Runnable;

        virtualinvoke this.<androidx.appcompat.graphics.drawable.DrawableWrapper: void unscheduleSelf(java.lang.Runnable)>($u2);

        return;
    }
}
