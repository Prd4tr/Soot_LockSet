public class androidx.core.view.ViewCompat extends java.lang.Object
{
    private static final int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS;
    public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;
    public static final int ACCESSIBILITY_LIVE_REGION_NONE;
    public static final int ACCESSIBILITY_LIVE_REGION_POLITE;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_YES;
    public static final int LAYER_TYPE_HARDWARE;
    public static final int LAYER_TYPE_NONE;
    public static final int LAYER_TYPE_SOFTWARE;
    public static final int LAYOUT_DIRECTION_INHERIT;
    public static final int LAYOUT_DIRECTION_LOCALE;
    public static final int LAYOUT_DIRECTION_LTR;
    public static final int LAYOUT_DIRECTION_RTL;
    public static final int MEASURED_HEIGHT_STATE_SHIFT;
    public static final int MEASURED_SIZE_MASK;
    public static final int MEASURED_STATE_MASK;
    public static final int MEASURED_STATE_TOO_SMALL;
    public static final int OVER_SCROLL_ALWAYS;
    public static final int OVER_SCROLL_IF_CONTENT_SCROLLS;
    public static final int OVER_SCROLL_NEVER;
    public static final int SCROLL_AXIS_HORIZONTAL;
    public static final int SCROLL_AXIS_NONE;
    public static final int SCROLL_AXIS_VERTICAL;
    public static final int SCROLL_INDICATOR_BOTTOM;
    public static final int SCROLL_INDICATOR_END;
    public static final int SCROLL_INDICATOR_LEFT;
    public static final int SCROLL_INDICATOR_RIGHT;
    public static final int SCROLL_INDICATOR_START;
    public static final int SCROLL_INDICATOR_TOP;
    private static final java.lang.String TAG;
    public static final int TYPE_NON_TOUCH;
    public static final int TYPE_TOUCH;
    private static boolean sAccessibilityDelegateCheckFailed;
    private static java.lang.reflect.Field sAccessibilityDelegateField;
    private static androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager;
    private static java.lang.reflect.Method sChildrenDrawingOrderMethod;
    private static java.lang.reflect.Method sDispatchFinishTemporaryDetach;
    private static java.lang.reflect.Method sDispatchStartTemporaryDetach;
    private static java.lang.reflect.Field sMinHeightField;
    private static boolean sMinHeightFieldFetched;
    private static java.lang.reflect.Field sMinWidthField;
    private static boolean sMinWidthFieldFetched;
    private static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId;
    private static boolean sTempDetachBound;
    private static java.lang.ThreadLocal sThreadLocalRect;
    private static java.util.WeakHashMap sTransitionNameMap;
    private static java.util.WeakHashMap sViewPropertyAnimatorMap;

    static void <clinit>()
    {
        int $u3;
        java.util.concurrent.atomic.AtomicInteger $u0;
        int[] $u2;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager $u0#68;

        <androidx.core.view.ViewCompat: int TYPE_NON_TOUCH> = 1;

        <androidx.core.view.ViewCompat: java.lang.String TAG> = "ViewCompat";

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_TOP> = 1;

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_START> = 16;

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_RIGHT> = 8;

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_LEFT> = 4;

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_END> = 32;

        <androidx.core.view.ViewCompat: int SCROLL_INDICATOR_BOTTOM> = 2;

        <androidx.core.view.ViewCompat: int SCROLL_AXIS_VERTICAL> = 2;

        <androidx.core.view.ViewCompat: int SCROLL_AXIS_NONE> = 0;

        <androidx.core.view.ViewCompat: int SCROLL_AXIS_HORIZONTAL> = 1;

        <androidx.core.view.ViewCompat: int OVER_SCROLL_NEVER> = 2;

        <androidx.core.view.ViewCompat: int OVER_SCROLL_IF_CONTENT_SCROLLS> = 1;

        <androidx.core.view.ViewCompat: int OVER_SCROLL_ALWAYS> = 0;

        <androidx.core.view.ViewCompat: int MEASURED_STATE_TOO_SMALL> = 16777216;

        <androidx.core.view.ViewCompat: int MEASURED_STATE_MASK> = -16777216;

        <androidx.core.view.ViewCompat: int MEASURED_SIZE_MASK> = 16777215;

        <androidx.core.view.ViewCompat: int MEASURED_HEIGHT_STATE_SHIFT> = 16;

        <androidx.core.view.ViewCompat: int LAYOUT_DIRECTION_RTL> = 1;

        <androidx.core.view.ViewCompat: int LAYOUT_DIRECTION_LTR> = 0;

        <androidx.core.view.ViewCompat: int LAYOUT_DIRECTION_LOCALE> = 3;

        <androidx.core.view.ViewCompat: int LAYOUT_DIRECTION_INHERIT> = 2;

        <androidx.core.view.ViewCompat: int LAYER_TYPE_SOFTWARE> = 1;

        <androidx.core.view.ViewCompat: int LAYER_TYPE_NONE> = 0;

        <androidx.core.view.ViewCompat: int LAYER_TYPE_HARDWARE> = 2;

        <androidx.core.view.ViewCompat: int IMPORTANT_FOR_ACCESSIBILITY_YES> = 1;

        <androidx.core.view.ViewCompat: int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS> = 4;

        <androidx.core.view.ViewCompat: int IMPORTANT_FOR_ACCESSIBILITY_NO> = 2;

        <androidx.core.view.ViewCompat: int IMPORTANT_FOR_ACCESSIBILITY_AUTO> = 0;

        <androidx.core.view.ViewCompat: int ACCESSIBILITY_LIVE_REGION_POLITE> = 1;

        <androidx.core.view.ViewCompat: int ACCESSIBILITY_LIVE_REGION_NONE> = 0;

        <androidx.core.view.ViewCompat: int ACCESSIBILITY_LIVE_REGION_ASSERTIVE> = 2;

        $u0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $u0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <androidx.core.view.ViewCompat: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId> = $u0;

        <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap> = null;

        <androidx.core.view.ViewCompat: boolean sAccessibilityDelegateCheckFailed> = 0;

        $u2 = newarray (int)[32];

        $u3 = <androidx.core.R$id: int accessibility_custom_action_0>;

        $u2[0] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_1>;

        $u2[1] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_2>;

        $u2[2] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_3>;

        $u2[3] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_4>;

        $u2[4] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_5>;

        $u2[5] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_6>;

        $u2[6] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_7>;

        $u2[7] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_8>;

        $u2[8] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_9>;

        $u2[9] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_10>;

        $u2[10] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_11>;

        $u2[11] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_12>;

        $u2[12] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_13>;

        $u2[13] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_14>;

        $u2[14] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_15>;

        $u2[15] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_16>;

        $u2[16] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_17>;

        $u2[17] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_18>;

        $u2[18] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_19>;

        $u2[19] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_20>;

        $u2[20] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_21>;

        $u2[21] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_22>;

        $u2[22] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_23>;

        $u2[23] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_24>;

        $u2[24] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_25>;

        $u2[25] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_26>;

        $u2[26] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_27>;

        $u2[27] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_28>;

        $u2[28] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_29>;

        $u2[29] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_30>;

        $u2[30] = $u3;

        $u3 = <androidx.core.R$id: int accessibility_custom_action_31>;

        $u2[31] = $u3;

        <androidx.core.view.ViewCompat: int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS> = $u2;

        $u0#68 = new androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager;

        specialinvoke $u0#68.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void <init>()>();

        <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager> = $u0#68;

        return;
    }

    protected void <init>()
    {
        androidx.core.view.ViewCompat this;

        this := @this: androidx.core.view.ViewCompat;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private static androidx.core.view.ViewCompat$AccessibilityViewProperty accessibilityHeadingProperty()
    {
        androidx.core.view.ViewCompat$5 $u0;
        int $u1;

        $u0 = new androidx.core.view.ViewCompat$5;

        $u1 = <androidx.core.R$id: int tag_accessibility_heading>;

        specialinvoke $u0.<androidx.core.view.ViewCompat$5: void <init>(int,java.lang.Class,int)>($u1, class "Ljava/lang/Boolean;", 28);

        return $u0;
    }

    public static int addAccessibilityAction(android.view.View, java.lang.CharSequence, androidx.core.view.accessibility.AccessibilityViewCommand)
    {
        android.view.View $u2;
        java.lang.CharSequence $u3;
        androidx.core.view.accessibility.AccessibilityViewCommand $u4;
        int $u-1;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat action;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.CharSequence;

        $u4 := @parameter2: androidx.core.view.accessibility.AccessibilityViewCommand;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: int getAvailableActionIdFromResources(android.view.View)>($u2);

        if $u-1 == -1 goto label1;

        action = new androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat;

        specialinvoke action.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: void <init>(int,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)>($u-1, $u3, $u4);

        staticinvoke <androidx.core.view.ViewCompat: void addAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)>($u2, action);

     label1:
        return $u-1;
    }

    private static void addAccessibilityAction(android.view.View, androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)
    {
        android.view.View $u2;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat $u3;
        int $u0;
        java.util.List $u-1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.AccessibilityDelegateCompat getOrCreateAccessibilityDelegateCompat(android.view.View)>($u2);

        $u0 = virtualinvoke $u3.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: int getId()>();

        staticinvoke <androidx.core.view.ViewCompat: void removeActionWithId(int,android.view.View)>($u0, $u2);

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: java.util.List getActionList(android.view.View)>($u2);

        interfaceinvoke $u-1.<java.util.List: boolean add(java.lang.Object)>($u3);

        staticinvoke <androidx.core.view.ViewCompat: void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int)>($u2, 0);

     label1:
        return;
    }

    public static void addKeyboardNavigationClusters(android.view.View, java.util.Collection, int)
    {
        android.view.View $u2;
        java.util.Collection views;
        int $u4, $u0;

        $u2 := @parameter0: android.view.View;

        views := @parameter1: java.util.Collection;

        $u4 := @parameter2: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>(views, $u4);

     label1:
        return;
    }

    public static void addOnUnhandledKeyEventListener(android.view.View, androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    {
        android.view.View $u3;
        androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat $u4;
        int viewListeners;
        java.lang.Object $u-1;
        androidx.collection.SimpleArrayMap viewListeners#6, fwListener;
        androidx.core.view.ViewCompat$2 fwListener#9;
        java.util.ArrayList viewListeners#13, fwListener#14;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat;

        viewListeners = <android.os.Build$VERSION: int SDK_INT>;

        if viewListeners < 28 goto label2;

        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $u-1 = virtualinvoke $u3.<android.view.View: java.lang.Object getTag(int)>(viewListeners);

        viewListeners#6 = (androidx.collection.SimpleArrayMap) $u-1;

        if viewListeners#6 != null goto label1;

        fwListener = new androidx.collection.SimpleArrayMap;

        specialinvoke fwListener.<androidx.collection.SimpleArrayMap: void <init>()>();

        viewListeners#6 = fwListener;

        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        virtualinvoke $u3.<android.view.View: void setTag(int,java.lang.Object)>(viewListeners, fwListener);

     label1:
        fwListener#9 = new androidx.core.view.ViewCompat$2;

        specialinvoke fwListener#9.<androidx.core.view.ViewCompat$2: void <init>(androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)>($u4);

        virtualinvoke viewListeners#6.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u4, fwListener#9);

        virtualinvoke $u3.<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>(fwListener#9);

        return;

     label2:
        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $u-1 = virtualinvoke $u3.<android.view.View: java.lang.Object getTag(int)>(viewListeners);

        viewListeners#13 = (java.util.ArrayList) $u-1;

        if viewListeners#13 != null goto label3;

        fwListener#14 = new java.util.ArrayList;

        specialinvoke fwListener#14.<java.util.ArrayList: void <init>()>();

        viewListeners#13 = fwListener#14;

        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        virtualinvoke $u3.<android.view.View: void setTag(int,java.lang.Object)>(viewListeners, fwListener#14);

     label3:
        virtualinvoke viewListeners#13.<java.util.ArrayList: boolean add(java.lang.Object)>($u4);

        viewListeners = virtualinvoke viewListeners#13.<java.util.ArrayList: int size()>();

        if viewListeners != 1 goto label4;

        staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void registerListeningView(android.view.View)>($u3);

     label4:
        return;
    }

    public static androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)
    {
        android.view.View $u2;
        java.lang.Object $u-1;
        java.util.WeakHashMap vpa;
        androidx.core.view.ViewPropertyAnimatorCompat vpa#5;

        $u2 := @parameter0: android.view.View;

        vpa = <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap>;

        if vpa != null goto label1;

        vpa = new java.util.WeakHashMap;

        specialinvoke vpa.<java.util.WeakHashMap: void <init>()>();

        <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap> = vpa;

     label1:
        vpa = <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap>;

        $u-1 = virtualinvoke vpa.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($u2);

        vpa#5 = (androidx.core.view.ViewPropertyAnimatorCompat) $u-1;

        if vpa#5 != null goto label2;

        vpa#5 = new androidx.core.view.ViewPropertyAnimatorCompat;

        specialinvoke vpa#5.<androidx.core.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)>($u2);

        vpa = <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap>;

        virtualinvoke vpa.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u2, vpa#5);

     label2:
        return vpa#5;
    }

    private static void bindTempDetach()
    {
        java.lang.Class[] $u3;
        java.lang.Class e;
        java.lang.reflect.Method $u-1;
        java.lang.NoSuchMethodException e#11;

        e = class "Landroid/view/View;";

        $u3 = newarray (java.lang.Class)[0];

     label1:
        $u-1 = virtualinvoke e.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchStartTemporaryDetach", $u3);

     label2:
        <androidx.core.view.ViewCompat: java.lang.reflect.Method sDispatchStartTemporaryDetach> = $u-1;

        e = class "Landroid/view/View;";

        $u3 = newarray (java.lang.Class)[0];

     label3:
        $u-1 = virtualinvoke e.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("dispatchFinishTemporaryDetach", $u3);

     label4:
        <androidx.core.view.ViewCompat: java.lang.reflect.Method sDispatchFinishTemporaryDetach> = $u-1;

        goto label6;

     label5:
        e#11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Couldn\'t find method", e#11);

     label6:
        <androidx.core.view.ViewCompat: boolean sTempDetachBound> = 1;

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

    public static boolean canScrollHorizontally(android.view.View, int)
    {
        android.view.View $u1;
        int $u2;
        boolean $u-1;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: int;

        $u-1 = virtualinvoke $u1.<android.view.View: boolean canScrollHorizontally(int)>($u2);

        return $u-1;
    }

    public static boolean canScrollVertically(android.view.View, int)
    {
        android.view.View $u1;
        int $u2;
        boolean $u-1;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: int;

        $u-1 = virtualinvoke $u1.<android.view.View: boolean canScrollVertically(int)>($u2);

        return $u-1;
    }

    public static void cancelDragAndDrop(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 24 goto label1;

        virtualinvoke $u2.<android.view.View: void cancelDragAndDrop()>();

     label1:
        return;
    }

    public static int combineMeasuredStates(int, int)
    {
        int $u1, $u2;

        $u1 := @parameter0: int;

        $u2 := @parameter1: int;

        $u1 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>($u1, $u2);

        return $u1;
    }

    private static void compatOffsetLeftAndRight(android.view.View, int)
    {
        android.view.View $u2;
        int $u3;
        android.view.ViewParent $u-1;
        boolean $u1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        virtualinvoke $u2.<android.view.View: void offsetLeftAndRight(int)>($u3);

        $u3 = virtualinvoke $u2.<android.view.View: int getVisibility()>();

        if $u3 != 0 goto label1;

        staticinvoke <androidx.core.view.ViewCompat: void tickleInvalidationFlag(android.view.View)>($u2);

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.ViewParent getParent()>();

        $u1 = $u-1 instanceof android.view.View;

        if $u1 == 0 goto label1;

        $u2 = (android.view.View) $u-1;

        staticinvoke <androidx.core.view.ViewCompat: void tickleInvalidationFlag(android.view.View)>($u2);

     label1:
        return;
    }

    private static void compatOffsetTopAndBottom(android.view.View, int)
    {
        android.view.View $u2;
        int $u3;
        android.view.ViewParent $u-1;
        boolean $u1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        virtualinvoke $u2.<android.view.View: void offsetTopAndBottom(int)>($u3);

        $u3 = virtualinvoke $u2.<android.view.View: int getVisibility()>();

        if $u3 != 0 goto label1;

        staticinvoke <androidx.core.view.ViewCompat: void tickleInvalidationFlag(android.view.View)>($u2);

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.ViewParent getParent()>();

        $u1 = $u-1 instanceof android.view.View;

        if $u1 == 0 goto label1;

        $u2 = (android.view.View) $u-1;

        staticinvoke <androidx.core.view.ViewCompat: void tickleInvalidationFlag(android.view.View)>($u2);

     label1:
        return;
    }

    public static androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View, androidx.core.view.WindowInsetsCompat, android.graphics.Rect)
    {
        android.view.View $u2;
        androidx.core.view.WindowInsetsCompat $u3;
        android.graphics.Rect $u4;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: androidx.core.view.WindowInsetsCompat;

        $u4 := @parameter2: android.graphics.Rect;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u3 = staticinvoke <androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)>($u2, $u3, $u4);

     label1:
        return $u3;
    }

    public static androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View, androidx.core.view.WindowInsetsCompat)
    {
        android.view.View $u3;
        androidx.core.view.WindowInsetsCompat $u4;
        int unwrapped;
        android.view.WindowInsets $u-1, $u-1#5;
        boolean $u-1#7;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: androidx.core.view.WindowInsetsCompat;

        unwrapped = <android.os.Build$VERSION: int SDK_INT>;

        if unwrapped < 21 goto label1;

        $u-1 = virtualinvoke $u4.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>();

        if $u-1 == null goto label1;

        $u-1#5 = virtualinvoke $u3.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>($u-1);

        $u-1#7 = virtualinvoke $u-1#5.<android.view.WindowInsets: boolean equals(java.lang.Object)>($u-1);

        if $u-1#7 != 0 goto label1;

        $u4 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($u-1);

     label1:
        return $u4;
    }

    public static void dispatchFinishTemporaryDetach(android.view.View)
    {
        android.view.View $u3;
        int e;
        boolean e#3;
        java.lang.reflect.Method e#4;
        java.lang.Object[] $u1;
        java.lang.Exception e#7;

        $u3 := @parameter0: android.view.View;

        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 24 goto label1;

        virtualinvoke $u3.<android.view.View: void dispatchFinishTemporaryDetach()>();

        return;

     label1:
        e#3 = <androidx.core.view.ViewCompat: boolean sTempDetachBound>;

        if e#3 != 0 goto label2;

        staticinvoke <androidx.core.view.ViewCompat: void bindTempDetach()>();

     label2:
        e#4 = <androidx.core.view.ViewCompat: java.lang.reflect.Method sDispatchFinishTemporaryDetach>;

        if e#4 == null goto label7;

     label3:
        $u1 = newarray (java.lang.Object)[0];

        virtualinvoke e#4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u3, $u1);

     label4:
        goto label6;

     label5:
        e#7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchFinishTemporaryDetach", e#7);

     label6:
        return;

     label7:
        virtualinvoke $u3.<android.view.View: void onFinishTemporaryDetach()>();

        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static boolean dispatchNestedFling(android.view.View, float, float, boolean)
    {
        android.view.View $u2;
        float $u3, $u4;
        boolean $u5, $u0#4;
        int $u0;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: float;

        $u4 := @parameter2: float;

        $u5 := @parameter3: boolean;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u5 = virtualinvoke $u2.<android.view.View: boolean dispatchNestedFling(float,float,boolean)>($u3, $u4, $u5);

        return $u5;

     label1:
        $u0#4 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u0#4 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u5 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean dispatchNestedFling(float,float,boolean)>($u3, $u4, $u5);

        return $u5;

     label2:
        return 0;
    }

    public static boolean dispatchNestedPreFling(android.view.View, float, float)
    {
        android.view.View $u2;
        float $u3, $u4;
        int $u0;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: float;

        $u4 := @parameter2: float;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean dispatchNestedPreFling(float,float)>($u3, $u4);

        return $u-1;

     label1:
        $u-1 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean dispatchNestedPreFling(float,float)>($u3, $u4);

        return $u-1;

     label2:
        return 0;
    }

    public static boolean dispatchNestedPreScroll(android.view.View, int, int, int[], int[])
    {
        android.view.View $u2;
        int $u3, $u4, $u0;
        int[] $u5, $u6;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u5 := @parameter3: int[];

        $u6 := @parameter4: int[];

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>($u3, $u4, $u5, $u6);

        return $u-1;

     label1:
        $u-1 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean dispatchNestedPreScroll(int,int,int[],int[])>($u3, $u4, $u5, $u6);

        return $u-1;

     label2:
        return 0;
    }

    public static boolean dispatchNestedPreScroll(android.view.View, int, int, int[], int[], int)
    {
        android.view.View $u7;
        int $u8, $u9, $u12;
        int[] $u10, $u11;
        boolean $u0;
        androidx.core.view.NestedScrollingChild2 $u1;

        $u7 := @parameter0: android.view.View;

        $u8 := @parameter1: int;

        $u9 := @parameter2: int;

        $u10 := @parameter3: int[];

        $u11 := @parameter4: int[];

        $u12 := @parameter5: int;

        $u0 = $u7 instanceof androidx.core.view.NestedScrollingChild2;

        if $u0 == 0 goto label1;

        $u1 = (androidx.core.view.NestedScrollingChild2) $u7;

        $u0 = interfaceinvoke $u1.<androidx.core.view.NestedScrollingChild2: boolean dispatchNestedPreScroll(int,int,int[],int[],int)>($u8, $u9, $u10, $u11, $u12);

        return $u0;

     label1:
        if $u12 != 0 goto label2;

        $u0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])>($u7, $u8, $u9, $u10, $u11);

        return $u0;

     label2:
        return 0;
    }

    public static void dispatchNestedScroll(android.view.View, int, int, int, int, int[], int, int[])
    {
        android.view.View $u10;
        int $u11, $u12, $u13, $u14, $u16;
        int[] $u15, $u17;
        boolean $u1;
        androidx.core.view.NestedScrollingChild3 $u2;

        $u10 := @parameter0: android.view.View;

        $u11 := @parameter1: int;

        $u12 := @parameter2: int;

        $u13 := @parameter3: int;

        $u14 := @parameter4: int;

        $u15 := @parameter5: int[];

        $u16 := @parameter6: int;

        $u17 := @parameter7: int[];

        $u1 = $u10 instanceof androidx.core.view.NestedScrollingChild3;

        if $u1 == 0 goto label1;

        $u2 = (androidx.core.view.NestedScrollingChild3) $u10;

        interfaceinvoke $u2.<androidx.core.view.NestedScrollingChild3: void dispatchNestedScroll(int,int,int,int,int[],int,int[])>($u11, $u12, $u13, $u14, $u15, $u16, $u17);

        return;

     label1:
        staticinvoke <androidx.core.view.ViewCompat: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[],int)>($u10, $u11, $u12, $u13, $u14, $u15, $u16);

        return;
    }

    public static boolean dispatchNestedScroll(android.view.View, int, int, int, int, int[])
    {
        android.view.View $u7;
        int $u8, $u9, $u10, $u11, $u0;
        int[] $u12;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u1;

        $u7 := @parameter0: android.view.View;

        $u8 := @parameter1: int;

        $u9 := @parameter2: int;

        $u10 := @parameter3: int;

        $u11 := @parameter4: int;

        $u12 := @parameter5: int[];

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u7.<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>($u8, $u9, $u10, $u11, $u12);

        return $u-1;

     label1:
        $u-1 = $u7 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u1 = (androidx.core.view.NestedScrollingChild) $u7;

        $u-1 = interfaceinvoke $u1.<androidx.core.view.NestedScrollingChild: boolean dispatchNestedScroll(int,int,int,int,int[])>($u8, $u9, $u10, $u11, $u12);

        return $u-1;

     label2:
        return 0;
    }

    public static boolean dispatchNestedScroll(android.view.View, int, int, int, int, int[], int)
    {
        android.view.View $u8;
        int $u9, $u10, $u11, $u12, $u14;
        int[] $u13;
        boolean $u0;
        androidx.core.view.NestedScrollingChild2 $u1;

        $u8 := @parameter0: android.view.View;

        $u9 := @parameter1: int;

        $u10 := @parameter2: int;

        $u11 := @parameter3: int;

        $u12 := @parameter4: int;

        $u13 := @parameter5: int[];

        $u14 := @parameter6: int;

        $u0 = $u8 instanceof androidx.core.view.NestedScrollingChild2;

        if $u0 == 0 goto label1;

        $u1 = (androidx.core.view.NestedScrollingChild2) $u8;

        $u0 = interfaceinvoke $u1.<androidx.core.view.NestedScrollingChild2: boolean dispatchNestedScroll(int,int,int,int,int[],int)>($u9, $u10, $u11, $u12, $u13, $u14);

        return $u0;

     label1:
        if $u14 != 0 goto label2;

        $u0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])>($u8, $u9, $u10, $u11, $u12, $u13);

        return $u0;

     label2:
        return 0;
    }

    public static void dispatchStartTemporaryDetach(android.view.View)
    {
        android.view.View $u3;
        int e;
        boolean e#3;
        java.lang.reflect.Method e#4;
        java.lang.Object[] $u1;
        java.lang.Exception e#7;

        $u3 := @parameter0: android.view.View;

        e = <android.os.Build$VERSION: int SDK_INT>;

        if e < 24 goto label1;

        virtualinvoke $u3.<android.view.View: void dispatchStartTemporaryDetach()>();

        return;

     label1:
        e#3 = <androidx.core.view.ViewCompat: boolean sTempDetachBound>;

        if e#3 != 0 goto label2;

        staticinvoke <androidx.core.view.ViewCompat: void bindTempDetach()>();

     label2:
        e#4 = <androidx.core.view.ViewCompat: java.lang.reflect.Method sDispatchStartTemporaryDetach>;

        if e#4 == null goto label7;

     label3:
        $u1 = newarray (java.lang.Object)[0];

        virtualinvoke e#4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u3, $u1);

     label4:
        goto label6;

     label5:
        e#7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Error calling dispatchStartTemporaryDetach", e#7);

     label6:
        return;

     label7:
        virtualinvoke $u3.<android.view.View: void onStartTemporaryDetach()>();

        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    static boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View, android.view.KeyEvent)
    {
        android.view.View $u2;
        android.view.KeyEvent $u3;
        int $u0;
        androidx.core.view.ViewCompat$UnhandledKeyEventManager $u-1;
        boolean $u-1#5;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.view.KeyEvent;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 28 goto label1;

        return 0;

     label1:
        $u-1 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($u2);

        $u-1#5 = virtualinvoke $u-1.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)>($u2, $u3);

        return $u-1#5;
    }

    static boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View, android.view.KeyEvent)
    {
        android.view.View $u2;
        android.view.KeyEvent $u3;
        int $u0;
        androidx.core.view.ViewCompat$UnhandledKeyEventManager $u-1;
        boolean $u-1#5;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.view.KeyEvent;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 28 goto label1;

        return 0;

     label1:
        $u-1 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($u2);

        $u-1#5 = virtualinvoke $u-1.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)>($u3);

        return $u-1#5;
    }

    public static void enableAccessibleClickableSpanSupport(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.AccessibilityDelegateCompat getOrCreateAccessibilityDelegateCompat(android.view.View)>($u2);

     label1:
        return;
    }

    public static int generateViewId()
    {
        int result, newValue;
        java.util.concurrent.atomic.AtomicInteger result#5;
        boolean $u-1;

        result = <android.os.Build$VERSION: int SDK_INT>;

        if result < 17 goto label1;

        result = staticinvoke <android.view.View: int generateViewId()>();

        return result;

     label1:
        result#5 = <androidx.core.view.ViewCompat: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        result = virtualinvoke result#5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        newValue = result + 1;

        if newValue <= 16777215 goto label2;

        newValue = 1;

     label2:
        result#5 = <androidx.core.view.ViewCompat: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $u-1 = virtualinvoke result#5.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(result, newValue);

        if $u-1 == 0 goto label1;

        return result;
    }

    public static androidx.core.view.AccessibilityDelegateCompat getAccessibilityDelegate(android.view.View)
    {
        android.view.View $u2;
        android.view.View$AccessibilityDelegate $u-1;
        boolean $u1;
        androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter $u1#4;
        androidx.core.view.AccessibilityDelegateCompat $u1#6;

        $u2 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View)>($u2);

        if $u-1 != null goto label1;

        return null;

     label1:
        $u1 = $u-1 instanceof androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter;

        if $u1 == 0 goto label2;

        $u1#4 = (androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter) $u-1;

        $u1#6 = $u1#4.<androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter: androidx.core.view.AccessibilityDelegateCompat mCompat>;

        return $u1#6;

     label2:
        $u1#6 = new androidx.core.view.AccessibilityDelegateCompat;

        specialinvoke $u1#6.<androidx.core.view.AccessibilityDelegateCompat: void <init>(android.view.View$AccessibilityDelegate)>($u-1);

        return $u1#6;
    }

    private static android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        android.view.View$AccessibilityDelegate $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 29 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>();

        return $u-1;

     label1:
        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.view.View$AccessibilityDelegate getAccessibilityDelegateThroughReflection(android.view.View)>($u2);

        return $u-1;
    }

    private static android.view.View$AccessibilityDelegate getAccessibilityDelegateThroughReflection(android.view.View)
    {
        android.view.View $u4;
        boolean t;
        java.lang.reflect.Field t#2;
        java.lang.Class t#3;
        java.lang.Throwable t#7, t#14;
        java.lang.Object $u-1;
        android.view.View$AccessibilityDelegate $u3;

        $u4 := @parameter0: android.view.View;

        t = <androidx.core.view.ViewCompat: boolean sAccessibilityDelegateCheckFailed>;

        if t == 0 goto label01;

        return null;

     label01:
        t#2 = <androidx.core.view.ViewCompat: java.lang.reflect.Field sAccessibilityDelegateField>;

        if t#2 != null goto label05;

        t#3 = class "Landroid/view/View;";

     label02:
        t#2 = virtualinvoke t#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mAccessibilityDelegate");

        <androidx.core.view.ViewCompat: java.lang.reflect.Field sAccessibilityDelegateField> = t#2;

        virtualinvoke t#2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label03:
        goto label05;

     label04:
        t#7 := @caughtexception;

        <androidx.core.view.ViewCompat: boolean sAccessibilityDelegateCheckFailed> = 1;

        return null;

     label05:
        t#2 = <androidx.core.view.ViewCompat: java.lang.reflect.Field sAccessibilityDelegateField>;

        $u-1 = virtualinvoke t#2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($u4);

        t = $u-1 instanceof android.view.View$AccessibilityDelegate;

     label06:
        if t == 0 goto label09;

     label07:
        $u3 = (android.view.View$AccessibilityDelegate) $u-1;

     label08:
        return $u3;

     label09:
        return null;

     label10:
        t#14 := @caughtexception;

        <androidx.core.view.ViewCompat: boolean sAccessibilityDelegateCheckFailed> = 1;

        return null;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public static int getAccessibilityLiveRegion(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 19 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getAccessibilityLiveRegion()>();

        return $u-1;

     label1:
        return 0;
    }

    public static androidx.core.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)
    {
        android.view.View $u2;
        android.view.accessibility.AccessibilityNodeProvider $u-1;
        int provider;
        androidx.core.view.accessibility.AccessibilityNodeProviderCompat $u1;

        $u2 := @parameter0: android.view.View;

        provider = <android.os.Build$VERSION: int SDK_INT>;

        if provider < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $u-1 == null goto label1;

        $u1 = new androidx.core.view.accessibility.AccessibilityNodeProviderCompat;

        specialinvoke $u1.<androidx.core.view.accessibility.AccessibilityNodeProviderCompat: void <init>(java.lang.Object)>($u-1);

        return $u1;

     label1:
        return null;
    }

    public static java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
    {
        android.view.View $u1;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        java.lang.Object $u-1#3;
        java.lang.CharSequence $u0;

        $u1 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty()>();

        $u-1#3 = virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: java.lang.Object get(android.view.View)>($u1);

        $u0 = (java.lang.CharSequence) $u-1#3;

        return $u0;
    }

    private static java.util.List getActionList(android.view.View)
    {
        android.view.View $u2;
        java.lang.Object $u-1;
        int actions;
        java.util.ArrayList actions#3;

        $u2 := @parameter0: android.view.View;

        actions = <androidx.core.R$id: int tag_accessibility_actions>;

        $u-1 = virtualinvoke $u2.<android.view.View: java.lang.Object getTag(int)>(actions);

        actions#3 = (java.util.ArrayList) $u-1;

        if actions#3 != null goto label1;

        actions#3 = new java.util.ArrayList;

        specialinvoke actions#3.<java.util.ArrayList: void <init>()>();

        actions = <androidx.core.R$id: int tag_accessibility_actions>;

        virtualinvoke $u2.<android.view.View: void setTag(int,java.lang.Object)>(actions, actions#3);

     label1:
        return actions#3;
    }

    public static float getAlpha(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getAlpha()>();

        return $u-1;
    }

    private static int getAvailableActionIdFromResources(android.view.View)
    {
        android.view.View $u7;
        int result, i, idAvailable, idAvailable#8, j, $u-1#10;
        java.util.List $u-1;
        int[] id;
        java.lang.Object $u-1#12;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat $u6;
        byte $u6#17;

        $u7 := @parameter0: android.view.View;

        result = -1;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: java.util.List getActionList(android.view.View)>($u7);

        i = 0;

     label1:
        id = <androidx.core.view.ViewCompat: int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS>;

        idAvailable = lengthof id;

        if i >= idAvailable goto label7;

        if result != -1 goto label7;

        idAvailable = id[i];

        idAvailable#8 = 1;

        j = 0;

     label2:
        $u-1#10 = interfaceinvoke $u-1.<java.util.List: int size()>();

        if j >= $u-1#10 goto label5;

        $u-1#12 = interfaceinvoke $u-1.<java.util.List: java.lang.Object get(int)>(j);

        $u6 = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) $u-1#12;

        $u-1#10 = virtualinvoke $u6.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: int getId()>();

        if $u-1#10 == idAvailable goto label3;

        $u6#17 = 1;

        goto label4;

     label3:
        $u6#17 = 0;

     label4:
        idAvailable#8 = idAvailable#8 & $u6#17;

        j = j + 1;

        goto label2;

     label5:
        if idAvailable#8 == 0 goto label6;

        result = idAvailable;

     label6:
        i = i + 1;

        goto label1;

     label7:
        return result;
    }

    public static android.content.res.ColorStateList getBackgroundTintList(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        android.content.res.ColorStateList $u-1;
        boolean $u0#4;
        androidx.core.view.TintableBackgroundView $u0#6;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>();

        return $u-1;

     label1:
        $u0#4 = $u2 instanceof androidx.core.view.TintableBackgroundView;

        if $u0#4 == 0 goto label2;

        $u0#6 = (androidx.core.view.TintableBackgroundView) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.TintableBackgroundView: android.content.res.ColorStateList getSupportBackgroundTintList()>();

        return $u-1;

     label2:
        return null;
    }

    public static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        android.graphics.PorterDuff$Mode $u-1;
        boolean $u0#4;
        androidx.core.view.TintableBackgroundView $u0#6;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>();

        return $u-1;

     label1:
        $u0#4 = $u2 instanceof androidx.core.view.TintableBackgroundView;

        if $u0#4 == 0 goto label2;

        $u0#6 = (androidx.core.view.TintableBackgroundView) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.TintableBackgroundView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()>();

        return $u-1;

     label2:
        return null;
    }

    public static android.graphics.Rect getClipBounds(android.view.View)
    {
        android.view.View $u2;
        android.graphics.Rect $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 18 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.graphics.Rect getClipBounds()>();

        return $u-1;

     label1:
        return null;
    }

    public static android.view.Display getDisplay(android.view.View)
    {
        android.view.View $u2;
        int wm;
        android.view.Display $u-1;
        boolean $u-1#5;
        android.content.Context $u-1#7;
        java.lang.Object $u-1#10;
        android.view.WindowManager wm#12;

        $u2 := @parameter0: android.view.View;

        wm = <android.os.Build$VERSION: int SDK_INT>;

        if wm < 17 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.Display getDisplay()>();

        return $u-1;

     label1:
        $u-1#5 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($u2);

        if $u-1#5 == 0 goto label2;

        $u-1#7 = virtualinvoke $u2.<android.view.View: android.content.Context getContext()>();

        $u-1#10 = virtualinvoke $u-1#7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        wm#12 = (android.view.WindowManager) $u-1#10;

        $u-1 = interfaceinvoke wm#12.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        return $u-1;

     label2:
        return null;
    }

    public static float getElevation(android.view.View)
    {
        android.view.View $u2;
        float $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: float getElevation()>();

        return $u-1;

     label1:
        return 0.0F;
    }

    private static android.graphics.Rect getEmptyTempRect()
    {
        java.lang.Object $u-1;
        java.lang.ThreadLocal rect;
        android.graphics.Rect rect#5, $u1;

        rect = <androidx.core.view.ViewCompat: java.lang.ThreadLocal sThreadLocalRect>;

        if rect != null goto label1;

        rect = new java.lang.ThreadLocal;

        specialinvoke rect.<java.lang.ThreadLocal: void <init>()>();

        <androidx.core.view.ViewCompat: java.lang.ThreadLocal sThreadLocalRect> = rect;

     label1:
        rect = <androidx.core.view.ViewCompat: java.lang.ThreadLocal sThreadLocalRect>;

        $u-1 = virtualinvoke rect.<java.lang.ThreadLocal: java.lang.Object get()>();

        rect#5 = (android.graphics.Rect) $u-1;

        if rect#5 != null goto label2;

        $u1 = new android.graphics.Rect;

        specialinvoke $u1.<android.graphics.Rect: void <init>()>();

        rect#5 = $u1;

        rect = <androidx.core.view.ViewCompat: java.lang.ThreadLocal sThreadLocalRect>;

        virtualinvoke rect.<java.lang.ThreadLocal: void set(java.lang.Object)>($u1);

     label2:
        virtualinvoke rect#5.<android.graphics.Rect: void setEmpty()>();

        return rect#5;
    }

    public static boolean getFitsSystemWindows(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean getFitsSystemWindows()>();

        return $u-1;

     label1:
        return 0;
    }

    public static int getImportantForAccessibility(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getImportantForAccessibility()>();

        return $u-1;

     label1:
        return 0;
    }

    public static int getImportantForAutofill(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getImportantForAutofill()>();

        return $u-1;

     label1:
        return 0;
    }

    public static int getLabelFor(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 17 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getLabelFor()>();

        return $u-1;

     label1:
        return 0;
    }

    public static int getLayerType(android.view.View)
    {
        android.view.View $u1;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: int getLayerType()>();

        return $u-1;
    }

    public static int getLayoutDirection(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 17 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getLayoutDirection()>();

        return $u-1;

     label1:
        return 0;
    }

    public static android.graphics.Matrix getMatrix(android.view.View)
    {
        android.view.View $u1;
        android.graphics.Matrix $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: android.graphics.Matrix getMatrix()>();

        return $u-1;
    }

    public static int getMeasuredHeightAndState(android.view.View)
    {
        android.view.View $u1;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: int getMeasuredHeightAndState()>();

        return $u-1;
    }

    public static int getMeasuredState(android.view.View)
    {
        android.view.View $u1;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: int getMeasuredState()>();

        return $u-1;
    }

    public static int getMeasuredWidthAndState(android.view.View)
    {
        android.view.View $u1;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: int getMeasuredWidthAndState()>();

        return $u-1;
    }

    public static int getMinimumHeight(android.view.View)
    {
        android.view.View $u3;
        int $u0;
        boolean $u0#5;
        java.lang.Class $u1;
        java.lang.reflect.Field $u-1;
        java.lang.NoSuchFieldException $u1#10;
        java.lang.Object $u-1#12;
        java.lang.Integer $u0#14;
        java.lang.Exception $u0#17;

        $u3 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label01;

        $u0 = virtualinvoke $u3.<android.view.View: int getMinimumHeight()>();

        return $u0;

     label01:
        $u0#5 = <androidx.core.view.ViewCompat: boolean sMinHeightFieldFetched>;

        if $u0#5 != 0 goto label08;

        $u1 = class "Landroid/view/View;";

     label02:
        $u-1 = virtualinvoke $u1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinHeight");

     label03:
        <androidx.core.view.ViewCompat: java.lang.reflect.Field sMinHeightField> = $u-1;

     label04:
        virtualinvoke $u-1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label05:
        goto label07;

     label06:
        $u1#10 := @caughtexception;

     label07:
        <androidx.core.view.ViewCompat: boolean sMinHeightFieldFetched> = 1;

     label08:
        $u-1 = <androidx.core.view.ViewCompat: java.lang.reflect.Field sMinHeightField>;

        if $u-1 == null goto label12;

     label09:
        $u-1#12 = virtualinvoke $u-1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($u3);

        $u0#14 = (java.lang.Integer) $u-1#12;

        $u0 = virtualinvoke $u0#14.<java.lang.Integer: int intValue()>();

     label10:
        return $u0;

     label11:
        $u0#17 := @caughtexception;

     label12:
        return 0;

        catch java.lang.NoSuchFieldException from label02 to label03 with label06;
        catch java.lang.NoSuchFieldException from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    public static int getMinimumWidth(android.view.View)
    {
        android.view.View $u3;
        int $u0;
        boolean $u0#5;
        java.lang.Class $u1;
        java.lang.reflect.Field $u-1;
        java.lang.NoSuchFieldException $u1#10;
        java.lang.Object $u-1#12;
        java.lang.Integer $u0#14;
        java.lang.Exception $u0#17;

        $u3 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label01;

        $u0 = virtualinvoke $u3.<android.view.View: int getMinimumWidth()>();

        return $u0;

     label01:
        $u0#5 = <androidx.core.view.ViewCompat: boolean sMinWidthFieldFetched>;

        if $u0#5 != 0 goto label08;

        $u1 = class "Landroid/view/View;";

     label02:
        $u-1 = virtualinvoke $u1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mMinWidth");

     label03:
        <androidx.core.view.ViewCompat: java.lang.reflect.Field sMinWidthField> = $u-1;

     label04:
        virtualinvoke $u-1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label05:
        goto label07;

     label06:
        $u1#10 := @caughtexception;

     label07:
        <androidx.core.view.ViewCompat: boolean sMinWidthFieldFetched> = 1;

     label08:
        $u-1 = <androidx.core.view.ViewCompat: java.lang.reflect.Field sMinWidthField>;

        if $u-1 == null goto label12;

     label09:
        $u-1#12 = virtualinvoke $u-1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($u3);

        $u0#14 = (java.lang.Integer) $u-1#12;

        $u0 = virtualinvoke $u0#14.<java.lang.Integer: int intValue()>();

     label10:
        return $u0;

     label11:
        $u0#17 := @caughtexception;

     label12:
        return 0;

        catch java.lang.NoSuchFieldException from label02 to label03 with label06;
        catch java.lang.NoSuchFieldException from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    public static int getNextClusterForwardId(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getNextClusterForwardId()>();

        return $u-1;

     label1:
        return -1;
    }

    static androidx.core.view.AccessibilityDelegateCompat getOrCreateAccessibilityDelegateCompat(android.view.View)
    {
        android.view.View $u2;
        androidx.core.view.AccessibilityDelegateCompat $u1, delegateCompat;

        $u2 := @parameter0: android.view.View;

        $u1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.AccessibilityDelegateCompat getAccessibilityDelegate(android.view.View)>($u2);

        delegateCompat = $u1;

        if $u1 != null goto label1;

        $u1 = new androidx.core.view.AccessibilityDelegateCompat;

        specialinvoke $u1.<androidx.core.view.AccessibilityDelegateCompat: void <init>()>();

        delegateCompat = $u1;

     label1:
        staticinvoke <androidx.core.view.ViewCompat: void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat)>($u2, delegateCompat);

        return delegateCompat;
    }

    public static int getOverScrollMode(android.view.View)
    {
        android.view.View $u1;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: int getOverScrollMode()>();

        return $u-1;
    }

    public static int getPaddingEnd(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        $u0 = virtualinvoke $u2.<android.view.View: int getPaddingEnd()>();

        return $u0;

     label1:
        $u0 = virtualinvoke $u2.<android.view.View: int getPaddingRight()>();

        return $u0;
    }

    public static int getPaddingStart(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        $u0 = virtualinvoke $u2.<android.view.View: int getPaddingStart()>();

        return $u0;

     label1:
        $u0 = virtualinvoke $u2.<android.view.View: int getPaddingLeft()>();

        return $u0;
    }

    public static android.view.ViewParent getParentForAccessibility(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        android.view.ViewParent $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

        return $u-1;

     label1:
        $u-1 = virtualinvoke $u2.<android.view.View: android.view.ViewParent getParent()>();

        return $u-1;
    }

    public static float getPivotX(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getPivotX()>();

        return $u-1;
    }

    public static float getPivotY(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getPivotY()>();

        return $u-1;
    }

    public static androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        android.view.WindowInsets $u-1;
        androidx.core.view.WindowInsetsCompat $u-1#4;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 23 goto label1;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat$Api23Impl: android.view.WindowInsets getRootWindowInsets(android.view.View)>($u2);

        $u-1#4 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($u-1);

        return $u-1#4;

     label1:
        return null;
    }

    public static float getRotation(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getRotation()>();

        return $u-1;
    }

    public static float getRotationX(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getRotationX()>();

        return $u-1;
    }

    public static float getRotationY(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getRotationY()>();

        return $u-1;
    }

    public static float getScaleX(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getScaleX()>();

        return $u-1;
    }

    public static float getScaleY(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getScaleY()>();

        return $u-1;
    }

    public static int getScrollIndicators(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 23 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getScrollIndicators()>();

        return $u-1;

     label1:
        return 0;
    }

    public static java.util.List getSystemGestureExclusionRects(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        java.util.List $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 29 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: java.util.List getSystemGestureExclusionRects()>();

        return $u-1;

     label1:
        $u-1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $u-1;
    }

    public static java.lang.String getTransitionName(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        java.lang.String $u-1;
        java.util.WeakHashMap $u0#4;
        java.lang.Object $u-1#6;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: java.lang.String getTransitionName()>();

        return $u-1;

     label1:
        $u0#4 = <androidx.core.view.ViewCompat: java.util.WeakHashMap sTransitionNameMap>;

        if $u0#4 != null goto label2;

        return null;

     label2:
        $u-1#6 = virtualinvoke $u0#4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($u2);

        $u-1 = (java.lang.String) $u-1#6;

        return $u-1;
    }

    public static float getTranslationX(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getTranslationX()>();

        return $u-1;
    }

    public static float getTranslationY(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getTranslationY()>();

        return $u-1;
    }

    public static float getTranslationZ(android.view.View)
    {
        android.view.View $u2;
        float $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: float getTranslationZ()>();

        return $u-1;

     label1:
        return 0.0F;
    }

    public static int getWindowSystemUiVisibility(android.view.View)
    {
        android.view.View $u2;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: int getWindowSystemUiVisibility()>();

        return $u-1;

     label1:
        return 0;
    }

    public static float getX(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getX()>();

        return $u-1;
    }

    public static float getY(android.view.View)
    {
        android.view.View $u1;
        float $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: float getY()>();

        return $u-1;
    }

    public static float getZ(android.view.View)
    {
        android.view.View $u2;
        float $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: float getZ()>();

        return $u-1;

     label1:
        return 0.0F;
    }

    public static boolean hasAccessibilityDelegate(android.view.View)
    {
        android.view.View $u1;
        android.view.View$AccessibilityDelegate $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View)>($u1);

        if $u-1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean hasExplicitFocusable(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasExplicitFocusable()>();

        return $u-1;

     label1:
        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasFocusable()>();

        return $u-1;
    }

    public static boolean hasNestedScrollingParent(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasNestedScrollingParent()>();

        return $u-1;

     label1:
        $u-1 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean hasNestedScrollingParent()>();

        return $u-1;

     label2:
        return 0;
    }

    public static boolean hasNestedScrollingParent(android.view.View, int)
    {
        android.view.View $u1;
        int $u2;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild2 $u0;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: int;

        $u-1 = $u1 instanceof androidx.core.view.NestedScrollingChild2;

        if $u-1 == 0 goto label1;

        $u0 = (androidx.core.view.NestedScrollingChild2) $u1;

        interfaceinvoke $u0.<androidx.core.view.NestedScrollingChild2: boolean hasNestedScrollingParent(int)>($u2);

        goto label2;

     label1:
        if $u2 != 0 goto label2;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: boolean hasNestedScrollingParent(android.view.View)>($u1);

        return $u-1;

     label2:
        return 0;
    }

    public static boolean hasOnClickListeners(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 15 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasOnClickListeners()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean hasOverlappingRendering(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasOverlappingRendering()>();

        return $u-1;

     label1:
        return 1;
    }

    public static boolean hasTransientState(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean hasTransientState()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isAccessibilityHeading(android.view.View)
    {
        android.view.View $u2;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        java.lang.Object $u-1#3;
        java.lang.Boolean result;
        boolean $u-1#7;

        $u2 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty accessibilityHeadingProperty()>();

        $u-1#3 = virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: java.lang.Object get(android.view.View)>($u2);

        result = (java.lang.Boolean) $u-1#3;

        if result != null goto label1;

        return 0;

     label1:
        $u-1#7 = virtualinvoke result.<java.lang.Boolean: boolean booleanValue()>();

        return $u-1#7;
    }

    public static boolean isAttachedToWindow(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;
        android.os.IBinder $u-1#4;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isAttachedToWindow()>();

        return $u-1;

     label1:
        $u-1#4 = virtualinvoke $u2.<android.view.View: android.os.IBinder getWindowToken()>();

        if $u-1#4 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public static boolean isFocusedByDefault(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isFocusedByDefault()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isImportantForAccessibility(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isImportantForAccessibility()>();

        return $u-1;

     label1:
        return 1;
    }

    public static boolean isImportantForAutofill(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isImportantForAutofill()>();

        return $u-1;

     label1:
        return 1;
    }

    public static boolean isInLayout(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 18 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isInLayout()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isKeyboardNavigationCluster(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isKeyboardNavigationCluster()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isLaidOut(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isLaidOut()>();

        return $u-1;

     label1:
        $u0 = virtualinvoke $u2.<android.view.View: int getWidth()>();

        if $u0 <= 0 goto label2;

        $u0 = virtualinvoke $u2.<android.view.View: int getHeight()>();

        if $u0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static boolean isLayoutDirectionResolved(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isLayoutDirectionResolved()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isNestedScrollingEnabled(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isNestedScrollingEnabled()>();

        return $u-1;

     label1:
        $u-1 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean isNestedScrollingEnabled()>();

        return $u-1;

     label2:
        return 0;
    }

    public static boolean isOpaque(android.view.View)
    {
        android.view.View $u1;
        boolean $u-1;

        $u1 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u1.<android.view.View: boolean isOpaque()>();

        return $u-1;
    }

    public static boolean isPaddingRelative(android.view.View)
    {
        android.view.View $u2;
        boolean $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean isPaddingRelative()>();

        return $u-1;

     label1:
        return 0;
    }

    public static boolean isScreenReaderFocusable(android.view.View)
    {
        android.view.View $u2;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        java.lang.Object $u-1#3;
        java.lang.Boolean result;
        boolean $u-1#7;

        $u2 := @parameter0: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty()>();

        $u-1#3 = virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: java.lang.Object get(android.view.View)>($u2);

        result = (java.lang.Boolean) $u-1#3;

        if result != null goto label1;

        return 0;

     label1:
        $u-1#7 = virtualinvoke result.<java.lang.Boolean: boolean booleanValue()>();

        return $u-1#7;
    }

    public static void jumpDrawablesToCurrentState(android.view.View)
    {
        android.view.View $u0;

        $u0 := @parameter0: android.view.View;

        virtualinvoke $u0.<android.view.View: void jumpDrawablesToCurrentState()>();

        return;
    }

    public static android.view.View keyboardNavigationClusterSearch(android.view.View, android.view.View, int)
    {
        android.view.View $u2, $u3;
        int $u4, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.view.View;

        $u4 := @parameter2: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u2 = virtualinvoke $u2.<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>($u3, $u4);

        return $u2;

     label1:
        return null;
    }

    static void notifyViewAccessibilityStateChangedIfNeeded(android.view.View, int)
    {
        android.view.View $u5;
        int $u6, $u-1#12;
        android.content.Context $u-1;
        java.lang.Object $u-1#4;
        android.view.accessibility.AccessibilityManager accessibilityManager;
        boolean $u-1#7;
        java.lang.CharSequence $u-1#9;
        android.view.ViewParent $u-1#16;
        java.lang.AbstractMethodError e;
        java.lang.StringBuilder $u3;
        java.lang.Class $u-1#24;
        java.lang.String $u-1#26;
        android.view.accessibility.AccessibilityEvent $u-1#32;
        short $u3#34;

        $u5 := @parameter0: android.view.View;

        $u6 := @parameter1: int;

        $u-1 = virtualinvoke $u5.<android.view.View: android.content.Context getContext()>();

        $u-1#4 = virtualinvoke $u-1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        accessibilityManager = (android.view.accessibility.AccessibilityManager) $u-1#4;

        $u-1#7 = virtualinvoke accessibilityManager.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $u-1#7 != 0 goto label01;

        return;

     label01:
        $u-1#9 = staticinvoke <androidx.core.view.ViewCompat: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)>($u5);

        if $u-1#9 == null goto label02;

        $u-1#7 = 1;

        goto label03;

     label02:
        $u-1#7 = 0;

     label03:
        $u-1#12 = staticinvoke <androidx.core.view.ViewCompat: int getAccessibilityLiveRegion(android.view.View)>($u5);

        if $u-1#12 != 0 goto label09;

        if $u-1#7 == 0 goto label04;

        $u-1#12 = virtualinvoke $u5.<android.view.View: int getVisibility()>();

        if $u-1#12 != 0 goto label04;

        goto label09;

     label04:
        $u-1#16 = virtualinvoke $u5.<android.view.View: android.view.ViewParent getParent()>();

        if $u-1#16 == null goto label08;

     label05:
        $u-1#16 = virtualinvoke $u5.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $u-1#16.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>($u5, $u5, $u6);

     label06:
        return;

     label07:
        e := @caughtexception;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $u-1#16 = virtualinvoke $u5.<android.view.View: android.view.ViewParent getParent()>();

        $u-1#24 = virtualinvoke $u-1#16.<java.lang.Object: java.lang.Class getClass()>();

        $u-1#26 = virtualinvoke $u-1#24.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($u-1#26);

        virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $u-1#26 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", $u-1#26, e);

     label08:
        return;

     label09:
        $u-1#32 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>();

        if $u-1#7 == 0 goto label10;

        $u3#34 = 32;

        goto label11;

     label10:
        $u3#34 = 2048;

     label11:
        virtualinvoke $u-1#32.<android.view.accessibility.AccessibilityEvent: void setEventType(int)>($u3#34);

        virtualinvoke $u-1#32.<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>($u6);

        virtualinvoke $u5.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>($u-1#32);

        goto label08;

        catch java.lang.AbstractMethodError from label05 to label06 with label07;
    }

    public static void offsetLeftAndRight(android.view.View, int)
    {
        android.view.View $u8, p#11;
        int $u9, parentRect, $u-1#14, $u-1#16, $u-1#18;
        android.graphics.Rect $u-1;
        boolean needInvalidateWorkaround, p;
        android.view.ViewParent $u-1#8;

        $u8 := @parameter0: android.view.View;

        $u9 := @parameter1: int;

        parentRect = <android.os.Build$VERSION: int SDK_INT>;

        if parentRect < 23 goto label1;

        virtualinvoke $u8.<android.view.View: void offsetLeftAndRight(int)>($u9);

        return;

     label1:
        parentRect = <android.os.Build$VERSION: int SDK_INT>;

        if parentRect < 21 goto label4;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.graphics.Rect getEmptyTempRect()>();

        needInvalidateWorkaround = 0;

        $u-1#8 = virtualinvoke $u8.<android.view.View: android.view.ViewParent getParent()>();

        p = $u-1#8 instanceof android.view.View;

        if p == 0 goto label2;

        p#11 = (android.view.View) $u-1#8;

        parentRect = virtualinvoke p#11.<android.view.View: int getLeft()>();

        $u-1#14 = virtualinvoke p#11.<android.view.View: int getTop()>();

        $u-1#16 = virtualinvoke p#11.<android.view.View: int getRight()>();

        $u-1#18 = virtualinvoke p#11.<android.view.View: int getBottom()>();

        virtualinvoke $u-1.<android.graphics.Rect: void set(int,int,int,int)>(parentRect, $u-1#14, $u-1#16, $u-1#18);

        parentRect = virtualinvoke $u8.<android.view.View: int getLeft()>();

        $u-1#14 = virtualinvoke $u8.<android.view.View: int getTop()>();

        $u-1#16 = virtualinvoke $u8.<android.view.View: int getRight()>();

        $u-1#18 = virtualinvoke $u8.<android.view.View: int getBottom()>();

        needInvalidateWorkaround = virtualinvoke $u-1.<android.graphics.Rect: boolean intersects(int,int,int,int)>(parentRect, $u-1#14, $u-1#16, $u-1#18);

        needInvalidateWorkaround = needInvalidateWorkaround ^ 1;

     label2:
        staticinvoke <androidx.core.view.ViewCompat: void compatOffsetLeftAndRight(android.view.View,int)>($u8, $u9);

        if needInvalidateWorkaround == 0 goto label3;

        $u9 = virtualinvoke $u8.<android.view.View: int getLeft()>();

        parentRect = virtualinvoke $u8.<android.view.View: int getTop()>();

        $u-1#14 = virtualinvoke $u8.<android.view.View: int getRight()>();

        $u-1#16 = virtualinvoke $u8.<android.view.View: int getBottom()>();

        needInvalidateWorkaround = virtualinvoke $u-1.<android.graphics.Rect: boolean intersect(int,int,int,int)>($u9, parentRect, $u-1#14, $u-1#16);

        if needInvalidateWorkaround == 0 goto label3;

        $u8 = (android.view.View) $u-1#8;

        virtualinvoke $u8.<android.view.View: void invalidate(android.graphics.Rect)>($u-1);

     label3:
        return;

     label4:
        staticinvoke <androidx.core.view.ViewCompat: void compatOffsetLeftAndRight(android.view.View,int)>($u8, $u9);

        return;
    }

    public static void offsetTopAndBottom(android.view.View, int)
    {
        android.view.View $u8, p#11;
        int $u9, parentRect, $u-1#14, $u-1#16, $u-1#18;
        android.graphics.Rect $u-1;
        boolean needInvalidateWorkaround, p;
        android.view.ViewParent $u-1#8;

        $u8 := @parameter0: android.view.View;

        $u9 := @parameter1: int;

        parentRect = <android.os.Build$VERSION: int SDK_INT>;

        if parentRect < 23 goto label1;

        virtualinvoke $u8.<android.view.View: void offsetTopAndBottom(int)>($u9);

        return;

     label1:
        parentRect = <android.os.Build$VERSION: int SDK_INT>;

        if parentRect < 21 goto label4;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.graphics.Rect getEmptyTempRect()>();

        needInvalidateWorkaround = 0;

        $u-1#8 = virtualinvoke $u8.<android.view.View: android.view.ViewParent getParent()>();

        p = $u-1#8 instanceof android.view.View;

        if p == 0 goto label2;

        p#11 = (android.view.View) $u-1#8;

        parentRect = virtualinvoke p#11.<android.view.View: int getLeft()>();

        $u-1#14 = virtualinvoke p#11.<android.view.View: int getTop()>();

        $u-1#16 = virtualinvoke p#11.<android.view.View: int getRight()>();

        $u-1#18 = virtualinvoke p#11.<android.view.View: int getBottom()>();

        virtualinvoke $u-1.<android.graphics.Rect: void set(int,int,int,int)>(parentRect, $u-1#14, $u-1#16, $u-1#18);

        parentRect = virtualinvoke $u8.<android.view.View: int getLeft()>();

        $u-1#14 = virtualinvoke $u8.<android.view.View: int getTop()>();

        $u-1#16 = virtualinvoke $u8.<android.view.View: int getRight()>();

        $u-1#18 = virtualinvoke $u8.<android.view.View: int getBottom()>();

        needInvalidateWorkaround = virtualinvoke $u-1.<android.graphics.Rect: boolean intersects(int,int,int,int)>(parentRect, $u-1#14, $u-1#16, $u-1#18);

        needInvalidateWorkaround = needInvalidateWorkaround ^ 1;

     label2:
        staticinvoke <androidx.core.view.ViewCompat: void compatOffsetTopAndBottom(android.view.View,int)>($u8, $u9);

        if needInvalidateWorkaround == 0 goto label3;

        $u9 = virtualinvoke $u8.<android.view.View: int getLeft()>();

        parentRect = virtualinvoke $u8.<android.view.View: int getTop()>();

        $u-1#14 = virtualinvoke $u8.<android.view.View: int getRight()>();

        $u-1#16 = virtualinvoke $u8.<android.view.View: int getBottom()>();

        needInvalidateWorkaround = virtualinvoke $u-1.<android.graphics.Rect: boolean intersect(int,int,int,int)>($u9, parentRect, $u-1#14, $u-1#16);

        if needInvalidateWorkaround == 0 goto label3;

        $u8 = (android.view.View) $u-1#8;

        virtualinvoke $u8.<android.view.View: void invalidate(android.graphics.Rect)>($u-1);

     label3:
        return;

     label4:
        staticinvoke <androidx.core.view.ViewCompat: void compatOffsetTopAndBottom(android.view.View,int)>($u8, $u9);

        return;
    }

    public static androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View, androidx.core.view.WindowInsetsCompat)
    {
        android.view.View $u3;
        androidx.core.view.WindowInsetsCompat $u4;
        int unwrapped;
        android.view.WindowInsets $u-1, $u-1#5;
        boolean $u-1#7;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: androidx.core.view.WindowInsetsCompat;

        unwrapped = <android.os.Build$VERSION: int SDK_INT>;

        if unwrapped < 21 goto label1;

        $u-1 = virtualinvoke $u4.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>();

        if $u-1 == null goto label1;

        $u-1#5 = virtualinvoke $u3.<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>($u-1);

        $u-1#7 = virtualinvoke $u-1#5.<android.view.WindowInsets: boolean equals(java.lang.Object)>($u-1);

        if $u-1#7 != 0 goto label1;

        $u4 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($u-1#5);

     label1:
        return $u4;
    }

    public static void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.View $u0;
        android.view.accessibility.AccessibilityEvent $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        virtualinvoke $u0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>($u1);

        return;
    }

    public static void onInitializeAccessibilityNodeInfo(android.view.View, androidx.core.view.accessibility.AccessibilityNodeInfoCompat)
    {
        android.view.View $u1;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat $u2;
        android.view.accessibility.AccessibilityNodeInfo $u-1;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat;

        $u-1 = virtualinvoke $u2.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat: android.view.accessibility.AccessibilityNodeInfo unwrap()>();

        virtualinvoke $u1.<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>($u-1);

        return;
    }

    public static void onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.View $u0;
        android.view.accessibility.AccessibilityEvent $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        virtualinvoke $u0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>($u1);

        return;
    }

    private static androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty()
    {
        androidx.core.view.ViewCompat$4 $u0;
        int $u1;

        $u0 = new androidx.core.view.ViewCompat$4;

        $u1 = <androidx.core.R$id: int tag_accessibility_pane_title>;

        specialinvoke $u0.<androidx.core.view.ViewCompat$4: void <init>(int,java.lang.Class,int,int)>($u1, class "Ljava/lang/CharSequence;", 8, 28);

        return $u0;
    }

    public static boolean performAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.view.View $u2;
        int $u3, $u0;
        android.os.Bundle $u4;
        boolean $u-1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: android.os.Bundle;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>($u3, $u4);

        return $u-1;

     label1:
        return 0;
    }

    public static void postInvalidateOnAnimation(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void postInvalidateOnAnimation()>();

        return;

     label1:
        virtualinvoke $u2.<android.view.View: void postInvalidate()>();

        return;
    }

    public static void postInvalidateOnAnimation(android.view.View, int, int, int, int)
    {
        android.view.View $u2;
        int $u3, $u4, $u5, $u6, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u5 := @parameter3: int;

        $u6 := @parameter4: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>($u3, $u4, $u5, $u6);

        return;

     label1:
        virtualinvoke $u2.<android.view.View: void postInvalidate(int,int,int,int)>($u3, $u4, $u5, $u6);

        return;
    }

    public static void postOnAnimation(android.view.View, java.lang.Runnable)
    {
        android.view.View $u2;
        java.lang.Runnable $u3;
        long $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.Runnable;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void postOnAnimation(java.lang.Runnable)>($u3);

        return;

     label1:
        $u-1 = staticinvoke <android.animation.ValueAnimator: long getFrameDelay()>();

        virtualinvoke $u2.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($u3, $u-1);

        return;
    }

    public static void postOnAnimationDelayed(android.view.View, java.lang.Runnable, long)
    {
        android.view.View $u2;
        java.lang.Runnable $u3;
        long $u4, $u-1;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.Runnable;

        $u4 := @parameter2: long;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>($u3, $u4);

        return;

     label1:
        $u-1 = staticinvoke <android.animation.ValueAnimator: long getFrameDelay()>();

        $u4 = $u-1 + $u4;

        virtualinvoke $u2.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($u3, $u4);

        return;
    }

    public static void removeAccessibilityAction(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        staticinvoke <androidx.core.view.ViewCompat: void removeActionWithId(int,android.view.View)>($u3, $u2);

        staticinvoke <androidx.core.view.ViewCompat: void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int)>($u2, 0);

     label1:
        return;
    }

    private static void removeActionWithId(int, android.view.View)
    {
        int $u3, i, $u-1#3;
        android.view.View $u4;
        java.util.List $u-1;
        java.lang.Object $u-1#5;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat $u2;

        $u3 := @parameter0: int;

        $u4 := @parameter1: android.view.View;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: java.util.List getActionList(android.view.View)>($u4);

        i = 0;

     label1:
        $u-1#3 = interfaceinvoke $u-1.<java.util.List: int size()>();

        if i >= $u-1#3 goto label3;

        $u-1#5 = interfaceinvoke $u-1.<java.util.List: java.lang.Object get(int)>(i);

        $u2 = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) $u-1#5;

        $u-1#3 = virtualinvoke $u2.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: int getId()>();

        if $u-1#3 != $u3 goto label2;

        interfaceinvoke $u-1.<java.util.List: java.lang.Object remove(int)>(i);

        return;

     label2:
        i = i + 1;

        goto label1;

     label3:
        return;
    }

    public static void removeOnUnhandledKeyEventListener(android.view.View, androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
    {
        android.view.View $u2;
        androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat $u3;
        int viewListeners;
        java.lang.Object $u-1;
        androidx.collection.SimpleArrayMap viewListeners#6;
        android.view.View$OnUnhandledKeyEventListener fwListener;
        java.util.ArrayList viewListeners#13;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat;

        viewListeners = <android.os.Build$VERSION: int SDK_INT>;

        if viewListeners < 28 goto label2;

        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $u-1 = virtualinvoke $u2.<android.view.View: java.lang.Object getTag(int)>(viewListeners);

        viewListeners#6 = (androidx.collection.SimpleArrayMap) $u-1;

        if viewListeners#6 != null goto label1;

        return;

     label1:
        $u-1 = virtualinvoke viewListeners#6.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($u3);

        fwListener = (android.view.View$OnUnhandledKeyEventListener) $u-1;

        if fwListener == null goto label3;

        virtualinvoke $u2.<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>(fwListener);

        return;

     label2:
        viewListeners = <androidx.core.R$id: int tag_unhandled_key_listeners>;

        $u-1 = virtualinvoke $u2.<android.view.View: java.lang.Object getTag(int)>(viewListeners);

        viewListeners#13 = (java.util.ArrayList) $u-1;

        if viewListeners#13 == null goto label3;

        virtualinvoke viewListeners#13.<java.util.ArrayList: boolean remove(java.lang.Object)>($u3);

        viewListeners = virtualinvoke viewListeners#13.<java.util.ArrayList: int size()>();

        if viewListeners != 0 goto label3;

        staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void unregisterListeningView(android.view.View)>($u2);

     label3:
        return;
    }

    public static void replaceAccessibilityAction(android.view.View, androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat, java.lang.CharSequence, androidx.core.view.accessibility.AccessibilityViewCommand)
    {
        android.view.View $u1;
        androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat $u2;
        java.lang.CharSequence $u3;
        androidx.core.view.accessibility.AccessibilityViewCommand $u4;
        int $u-1;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat;

        $u3 := @parameter2: java.lang.CharSequence;

        $u4 := @parameter3: androidx.core.view.accessibility.AccessibilityViewCommand;

        if $u4 != null goto label1;

        if $u3 != null goto label1;

        $u-1 = virtualinvoke $u2.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: int getId()>();

        staticinvoke <androidx.core.view.ViewCompat: void removeAccessibilityAction(android.view.View,int)>($u1, $u-1);

        return;

     label1:
        $u2 = virtualinvoke $u2.<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat createReplacementAction(java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand)>($u3, $u4);

        staticinvoke <androidx.core.view.ViewCompat: void addAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)>($u1, $u2);

        return;
    }

    public static void requestApplyInsets(android.view.View)
    {
        android.view.View $u2;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 20 goto label1;

        virtualinvoke $u2.<android.view.View: void requestApplyInsets()>();

        return;

     label1:
        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label2;

        virtualinvoke $u2.<android.view.View: void requestFitSystemWindows()>();

     label2:
        return;
    }

    public static android.view.View requireViewById(android.view.View, int)
    {
        android.view.View $u3;
        int $u4, targetView;
        java.lang.IllegalArgumentException $u1;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: int;

        targetView = <android.os.Build$VERSION: int SDK_INT>;

        if targetView < 28 goto label1;

        $u3 = virtualinvoke $u3.<android.view.View: android.view.View requireViewById(int)>($u4);

        return $u3;

     label1:
        $u3 = virtualinvoke $u3.<android.view.View: android.view.View findViewById(int)>($u4);

        if $u3 == null goto label2;

        return $u3;

     label2:
        $u1 = new java.lang.IllegalArgumentException;

        specialinvoke $u1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ID does not reference a View inside this View");

        throw $u1;
    }

    public static int resolveSizeAndState(int, int, int)
    {
        int $u1, $u2, $u3;

        $u1 := @parameter0: int;

        $u2 := @parameter1: int;

        $u3 := @parameter2: int;

        $u1 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>($u1, $u2, $u3);

        return $u1;
    }

    public static boolean restoreDefaultFocus(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u-1;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean restoreDefaultFocus()>();

        return $u-1;

     label1:
        $u-1 = virtualinvoke $u2.<android.view.View: boolean requestFocus()>();

        return $u-1;
    }

    public static void saveAttributeDataForStyleable(android.view.View, android.content.Context, int[], android.util.AttributeSet, android.content.res.TypedArray, int, int)
    {
        android.view.View $u2;
        android.content.Context $u3;
        int[] $u4;
        android.util.AttributeSet $u5;
        android.content.res.TypedArray $u6;
        int $u7, $u8, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.content.Context;

        $u4 := @parameter2: int[];

        $u5 := @parameter3: android.util.AttributeSet;

        $u6 := @parameter4: android.content.res.TypedArray;

        $u7 := @parameter5: int;

        $u8 := @parameter6: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 29 goto label1;

        staticinvoke <androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($u2, $u3, $u4, $u5, $u6, $u7, $u8);

     label1:
        return;
    }

    private static androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty()
    {
        androidx.core.view.ViewCompat$3 $u0;
        int $u1;

        $u0 = new androidx.core.view.ViewCompat$3;

        $u1 = <androidx.core.R$id: int tag_screen_reader_focusable>;

        specialinvoke $u0.<androidx.core.view.ViewCompat$3: void <init>(int,java.lang.Class,int)>($u1, class "Ljava/lang/Boolean;", 28);

        return $u0;
    }

    public static void setAccessibilityDelegate(android.view.View, androidx.core.view.AccessibilityDelegateCompat)
    {
        android.view.View $u1;
        androidx.core.view.AccessibilityDelegateCompat $u2;
        android.view.View$AccessibilityDelegate $u-1;
        boolean $u0;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: androidx.core.view.AccessibilityDelegateCompat;

        if $u2 != null goto label1;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View)>($u1);

        $u0 = $u-1 instanceof androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter;

        if $u0 == 0 goto label1;

        $u2 = new androidx.core.view.AccessibilityDelegateCompat;

        specialinvoke $u2.<androidx.core.view.AccessibilityDelegateCompat: void <init>()>();

     label1:
        if $u2 != null goto label2;

        $u-1 = null;

        goto label3;

     label2:
        $u-1 = virtualinvoke $u2.<androidx.core.view.AccessibilityDelegateCompat: android.view.View$AccessibilityDelegate getBridge()>();

     label3:
        virtualinvoke $u1.<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>($u-1);

        return;
    }

    public static void setAccessibilityHeading(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        java.lang.Boolean $u-1#2;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty accessibilityHeadingProperty()>();

        $u-1#2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($u3);

        virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: void set(android.view.View,java.lang.Object)>($u2, $u-1#2);

        return;
    }

    public static void setAccessibilityLiveRegion(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        virtualinvoke $u2.<android.view.View: void setAccessibilityLiveRegion(int)>($u3);

     label1:
        return;
    }

    public static void setAccessibilityPaneTitle(android.view.View, java.lang.CharSequence)
    {
        android.view.View $u2;
        java.lang.CharSequence $u3;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        int $u0;
        androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager $u0#3;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.CharSequence;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label2;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty()>();

        virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: void set(android.view.View,java.lang.Object)>($u2, $u3);

        if $u3 == null goto label1;

        $u0#3 = <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager>;

        virtualinvoke $u0#3.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void addAccessibilityPane(android.view.View)>($u2);

        return;

     label1:
        $u0#3 = <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager>;

        virtualinvoke $u0#3.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void removeAccessibilityPane(android.view.View)>($u2);

     label2:
        return;
    }

    public static void setActivated(android.view.View, boolean)
    {
        android.view.View $u0;
        boolean $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: boolean;

        virtualinvoke $u0.<android.view.View: void setActivated(boolean)>($u1);

        return;
    }

    public static void setAlpha(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setAlpha(float)>($u1);

        return;
    }

    public static transient void setAutofillHints(android.view.View, java.lang.String[])
    {
        android.view.View $u2;
        java.lang.String[] $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.String[];

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setAutofillHints(java.lang.String[])>($u3);

     label1:
        return;
    }

    public static void setBackground(android.view.View, android.graphics.drawable.Drawable)
    {
        android.view.View $u2;
        android.graphics.drawable.Drawable $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.graphics.drawable.Drawable;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($u3);

        return;

     label1:
        virtualinvoke $u2.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($u3);

        return;
    }

    public static void setBackgroundTintList(android.view.View, android.content.res.ColorStateList)
    {
        android.view.View $u3;
        android.content.res.ColorStateList $u4;
        int background;
        android.graphics.drawable.Drawable $u-1;
        android.graphics.PorterDuff$Mode $u-1#8;
        boolean hasTint;
        int[] $u-1#13;
        androidx.core.view.TintableBackgroundView background#17;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: android.content.res.ColorStateList;

        background = <android.os.Build$VERSION: int SDK_INT>;

        if background < 21 goto label6;

        virtualinvoke $u3.<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>($u4);

        background = <android.os.Build$VERSION: int SDK_INT>;

        if background != 21 goto label7;

        $u-1 = virtualinvoke $u3.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $u4 = virtualinvoke $u3.<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>();

        if $u4 != null goto label2;

        $u-1#8 = virtualinvoke $u3.<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>();

        if $u-1#8 == null goto label1;

        goto label2;

     label1:
        hasTint = 0;

        goto label3;

     label2:
        hasTint = 1;

     label3:
        if $u-1 == null goto label5;

        if hasTint == 0 goto label5;

        hasTint = virtualinvoke $u-1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if hasTint == 0 goto label4;

        $u-1#13 = virtualinvoke $u3.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $u-1.<android.graphics.drawable.Drawable: boolean setState(int[])>($u-1#13);

     label4:
        virtualinvoke $u3.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($u-1);

     label5:
        return;

     label6:
        hasTint = $u3 instanceof androidx.core.view.TintableBackgroundView;

        if hasTint == 0 goto label7;

        background#17 = (androidx.core.view.TintableBackgroundView) $u3;

        interfaceinvoke background#17.<androidx.core.view.TintableBackgroundView: void setSupportBackgroundTintList(android.content.res.ColorStateList)>($u4);

     label7:
        return;
    }

    public static void setBackgroundTintMode(android.view.View, android.graphics.PorterDuff$Mode)
    {
        android.view.View $u3;
        android.graphics.PorterDuff$Mode $u4;
        int background;
        android.graphics.drawable.Drawable $u-1;
        android.content.res.ColorStateList $u-1#6;
        boolean hasTint;
        int[] $u-1#13;
        androidx.core.view.TintableBackgroundView background#17;

        $u3 := @parameter0: android.view.View;

        $u4 := @parameter1: android.graphics.PorterDuff$Mode;

        background = <android.os.Build$VERSION: int SDK_INT>;

        if background < 21 goto label6;

        virtualinvoke $u3.<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>($u4);

        background = <android.os.Build$VERSION: int SDK_INT>;

        if background != 21 goto label7;

        $u-1 = virtualinvoke $u3.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $u-1#6 = virtualinvoke $u3.<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>();

        if $u-1#6 != null goto label2;

        $u4 = virtualinvoke $u3.<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>();

        if $u4 == null goto label1;

        goto label2;

     label1:
        hasTint = 0;

        goto label3;

     label2:
        hasTint = 1;

     label3:
        if $u-1 == null goto label5;

        if hasTint == 0 goto label5;

        hasTint = virtualinvoke $u-1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if hasTint == 0 goto label4;

        $u-1#13 = virtualinvoke $u3.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $u-1.<android.graphics.drawable.Drawable: boolean setState(int[])>($u-1#13);

     label4:
        virtualinvoke $u3.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($u-1);

     label5:
        return;

     label6:
        hasTint = $u3 instanceof androidx.core.view.TintableBackgroundView;

        if hasTint == 0 goto label7;

        background#17 = (androidx.core.view.TintableBackgroundView) $u3;

        interfaceinvoke background#17.<androidx.core.view.TintableBackgroundView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)>($u4);

     label7:
        return;
    }

    public static void setChildrenDrawingOrderEnabled(android.view.ViewGroup, boolean)
    {
        android.view.ViewGroup $u8;
        boolean $u9;
        java.lang.Class[] $u6;
        java.lang.Class $u7, e#3;
        java.lang.reflect.Method e;
        java.lang.NoSuchMethodException e#7;
        java.lang.Object[] $u3;
        java.lang.Boolean $u-1;
        java.lang.reflect.InvocationTargetException e#14;
        java.lang.IllegalArgumentException e#15;
        java.lang.IllegalAccessException e#16;

        $u8 := @parameter0: android.view.ViewGroup;

        $u9 := @parameter1: boolean;

        e = <androidx.core.view.ViewCompat: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        if e != null goto label05;

        e#3 = class "Landroid/view/ViewGroup;";

        $u6 = newarray (java.lang.Class)[1];

        $u7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $u6[0] = $u7;

     label01:
        e = virtualinvoke e#3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setChildrenDrawingOrderEnabled", $u6);

     label02:
        <androidx.core.view.ViewCompat: java.lang.reflect.Method sChildrenDrawingOrderMethod> = e;

        goto label04;

     label03:
        e#7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to find childrenDrawingOrderEnabled", e#7);

     label04:
        e = <androidx.core.view.ViewCompat: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        virtualinvoke e.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label05:
        e = <androidx.core.view.ViewCompat: java.lang.reflect.Method sChildrenDrawingOrderMethod>;

        $u3 = newarray (java.lang.Object)[1];

     label06:
        $u-1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($u9);

     label07:
        $u3[0] = $u-1;

     label08:
        virtualinvoke e.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($u8, $u3);

     label09:
        goto label13;

     label10:
        e#14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", e#14);

        return;

     label11:
        e#15 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", e#15);

        goto label13;

     label12:
        e#16 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", e#16);

     label13:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.IllegalAccessException from label06 to label07 with label12;
        catch java.lang.IllegalAccessException from label08 to label09 with label12;
        catch java.lang.IllegalArgumentException from label06 to label07 with label11;
        catch java.lang.IllegalArgumentException from label08 to label09 with label11;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label10;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label10;
    }

    public static void setClipBounds(android.view.View, android.graphics.Rect)
    {
        android.view.View $u2;
        android.graphics.Rect $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.graphics.Rect;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 18 goto label1;

        virtualinvoke $u2.<android.view.View: void setClipBounds(android.graphics.Rect)>($u3);

     label1:
        return;
    }

    public static void setElevation(android.view.View, float)
    {
        android.view.View $u2;
        float $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: float;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void setElevation(float)>($u3);

     label1:
        return;
    }

    public static void setFitsSystemWindows(android.view.View, boolean)
    {
        android.view.View $u0;
        boolean $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: boolean;

        virtualinvoke $u0.<android.view.View: void setFitsSystemWindows(boolean)>($u1);

        return;
    }

    public static void setFocusedByDefault(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setFocusedByDefault(boolean)>($u3);

     label1:
        return;
    }

    public static void setHasTransientState(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label1;

        virtualinvoke $u2.<android.view.View: void setHasTransientState(boolean)>($u3);

     label1:
        return;
    }

    public static void setImportantForAccessibility(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 19 goto label1;

        virtualinvoke $u2.<android.view.View: void setImportantForAccessibility(int)>($u3);

        return;

     label1:
        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 16 goto label3;

        if $u3 != 4 goto label2;

        $u3 = 2;

     label2:
        virtualinvoke $u2.<android.view.View: void setImportantForAccessibility(int)>($u3);

     label3:
        return;
    }

    public static void setImportantForAutofill(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setImportantForAutofill(int)>($u3);

     label1:
        return;
    }

    public static void setKeyboardNavigationCluster(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setKeyboardNavigationCluster(boolean)>($u3);

     label1:
        return;
    }

    public static void setLabelFor(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        virtualinvoke $u2.<android.view.View: void setLabelFor(int)>($u3);

     label1:
        return;
    }

    public static void setLayerPaint(android.view.View, android.graphics.Paint)
    {
        android.view.View $u2;
        android.graphics.Paint $u3;
        int $u-1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.graphics.Paint;

        $u-1 = <android.os.Build$VERSION: int SDK_INT>;

        if $u-1 < 17 goto label1;

        virtualinvoke $u2.<android.view.View: void setLayerPaint(android.graphics.Paint)>($u3);

        return;

     label1:
        $u-1 = virtualinvoke $u2.<android.view.View: int getLayerType()>();

        virtualinvoke $u2.<android.view.View: void setLayerType(int,android.graphics.Paint)>($u-1, $u3);

        virtualinvoke $u2.<android.view.View: void invalidate()>();

        return;
    }

    public static void setLayerType(android.view.View, int, android.graphics.Paint)
    {
        android.view.View $u0;
        int $u1;
        android.graphics.Paint $u2;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: int;

        $u2 := @parameter2: android.graphics.Paint;

        virtualinvoke $u0.<android.view.View: void setLayerType(int,android.graphics.Paint)>($u1, $u2);

        return;
    }

    public static void setLayoutDirection(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        virtualinvoke $u2.<android.view.View: void setLayoutDirection(int)>($u3);

     label1:
        return;
    }

    public static void setNestedScrollingEnabled(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3, $u0#2;
        int $u0;
        androidx.core.view.NestedScrollingChild $u0#4;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void setNestedScrollingEnabled(boolean)>($u3);

        return;

     label1:
        $u0#2 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u0#2 == 0 goto label2;

        $u0#4 = (androidx.core.view.NestedScrollingChild) $u2;

        interfaceinvoke $u0#4.<androidx.core.view.NestedScrollingChild: void setNestedScrollingEnabled(boolean)>($u3);

     label2:
        return;
    }

    public static void setNextClusterForwardId(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setNextClusterForwardId(int)>($u3);

     label1:
        return;
    }

    public static void setOnApplyWindowInsetsListener(android.view.View, androidx.core.view.OnApplyWindowInsetsListener)
    {
        android.view.View $u2;
        androidx.core.view.OnApplyWindowInsetsListener $u3;
        int $u0;
        androidx.core.view.ViewCompat$1 $u0#3;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: androidx.core.view.OnApplyWindowInsetsListener;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label2;

        if $u3 != null goto label1;

        virtualinvoke $u2.<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>(null);

        return;

     label1:
        $u0#3 = new androidx.core.view.ViewCompat$1;

        specialinvoke $u0#3.<androidx.core.view.ViewCompat$1: void <init>(androidx.core.view.OnApplyWindowInsetsListener)>($u3);

        virtualinvoke $u2.<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>($u0#3);

     label2:
        return;
    }

    public static void setOverScrollMode(android.view.View, int)
    {
        android.view.View $u0;
        int $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: int;

        virtualinvoke $u0.<android.view.View: void setOverScrollMode(int)>($u1);

        return;
    }

    public static void setPaddingRelative(android.view.View, int, int, int, int)
    {
        android.view.View $u2;
        int $u3, $u4, $u5, $u6, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u5 := @parameter3: int;

        $u6 := @parameter4: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 17 goto label1;

        virtualinvoke $u2.<android.view.View: void setPaddingRelative(int,int,int,int)>($u3, $u4, $u5, $u6);

        return;

     label1:
        virtualinvoke $u2.<android.view.View: void setPadding(int,int,int,int)>($u3, $u4, $u5, $u6);

        return;
    }

    public static void setPivotX(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setPivotX(float)>($u1);

        return;
    }

    public static void setPivotY(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setPivotY(float)>($u1);

        return;
    }

    public static void setPointerIcon(android.view.View, androidx.core.view.PointerIconCompat)
    {
        android.view.View $u2;
        androidx.core.view.PointerIconCompat $u3;
        java.lang.Object $u-1;
        int $u0;
        android.view.PointerIcon $u0#3;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: androidx.core.view.PointerIconCompat;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 24 goto label3;

        if $u3 == null goto label1;

        $u-1 = virtualinvoke $u3.<androidx.core.view.PointerIconCompat: java.lang.Object getPointerIcon()>();

        goto label2;

     label1:
        $u-1 = null;

     label2:
        $u0#3 = (android.view.PointerIcon) $u-1;

        virtualinvoke $u2.<android.view.View: void setPointerIcon(android.view.PointerIcon)>($u0#3);

     label3:
        return;
    }

    public static void setRotation(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setRotation(float)>($u1);

        return;
    }

    public static void setRotationX(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setRotationX(float)>($u1);

        return;
    }

    public static void setRotationY(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setRotationY(float)>($u1);

        return;
    }

    public static void setSaveFromParentEnabled(android.view.View, boolean)
    {
        android.view.View $u0;
        boolean $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: boolean;

        virtualinvoke $u0.<android.view.View: void setSaveFromParentEnabled(boolean)>($u1);

        return;
    }

    public static void setScaleX(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setScaleX(float)>($u1);

        return;
    }

    public static void setScaleY(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setScaleY(float)>($u1);

        return;
    }

    public static void setScreenReaderFocusable(android.view.View, boolean)
    {
        android.view.View $u2;
        boolean $u3;
        androidx.core.view.ViewCompat$AccessibilityViewProperty $u-1;
        java.lang.Boolean $u-1#2;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: boolean;

        $u-1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty()>();

        $u-1#2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($u3);

        virtualinvoke $u-1.<androidx.core.view.ViewCompat$AccessibilityViewProperty: void set(android.view.View,java.lang.Object)>($u2, $u-1#2);

        return;
    }

    public static void setScrollIndicators(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 23 goto label1;

        virtualinvoke $u2.<android.view.View: void setScrollIndicators(int)>($u3);

     label1:
        return;
    }

    public static void setScrollIndicators(android.view.View, int, int)
    {
        android.view.View $u2;
        int $u3, $u4, $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u4 := @parameter2: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 23 goto label1;

        virtualinvoke $u2.<android.view.View: void setScrollIndicators(int,int)>($u3, $u4);

     label1:
        return;
    }

    public static void setSystemGestureExclusionRects(android.view.View, java.util.List)
    {
        android.view.View $u2;
        java.util.List rects;
        int $u0;

        $u2 := @parameter0: android.view.View;

        rects := @parameter1: java.util.List;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 29 goto label1;

        virtualinvoke $u2.<android.view.View: void setSystemGestureExclusionRects(java.util.List)>(rects);

     label1:
        return;
    }

    public static void setTooltipText(android.view.View, java.lang.CharSequence)
    {
        android.view.View $u2;
        java.lang.CharSequence $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.CharSequence;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 26 goto label1;

        virtualinvoke $u2.<android.view.View: void setTooltipText(java.lang.CharSequence)>($u3);

     label1:
        return;
    }

    public static void setTransitionName(android.view.View, java.lang.String)
    {
        android.view.View $u2;
        java.lang.String $u3;
        int $u0;
        java.util.WeakHashMap $u0#2;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: java.lang.String;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void setTransitionName(java.lang.String)>($u3);

        return;

     label1:
        $u0#2 = <androidx.core.view.ViewCompat: java.util.WeakHashMap sTransitionNameMap>;

        if $u0#2 != null goto label2;

        $u0#2 = new java.util.WeakHashMap;

        specialinvoke $u0#2.<java.util.WeakHashMap: void <init>()>();

        <androidx.core.view.ViewCompat: java.util.WeakHashMap sTransitionNameMap> = $u0#2;

     label2:
        $u0#2 = <androidx.core.view.ViewCompat: java.util.WeakHashMap sTransitionNameMap>;

        virtualinvoke $u0#2.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($u2, $u3);

        return;
    }

    public static void setTranslationX(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setTranslationX(float)>($u1);

        return;
    }

    public static void setTranslationY(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setTranslationY(float)>($u1);

        return;
    }

    public static void setTranslationZ(android.view.View, float)
    {
        android.view.View $u2;
        float $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: float;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void setTranslationZ(float)>($u3);

     label1:
        return;
    }

    public static void setX(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setX(float)>($u1);

        return;
    }

    public static void setY(android.view.View, float)
    {
        android.view.View $u0;
        float $u1;

        $u0 := @parameter0: android.view.View;

        $u1 := @parameter1: float;

        virtualinvoke $u0.<android.view.View: void setY(float)>($u1);

        return;
    }

    public static void setZ(android.view.View, float)
    {
        android.view.View $u2;
        float $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: float;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void setZ(float)>($u3);

     label1:
        return;
    }

    public static boolean startDragAndDrop(android.view.View, android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
    {
        android.view.View $u2;
        android.content.ClipData $u3;
        android.view.View$DragShadowBuilder $u4;
        java.lang.Object $u5;
        int $u6, $u0;
        boolean $u-1;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.content.ClipData;

        $u4 := @parameter2: android.view.View$DragShadowBuilder;

        $u5 := @parameter3: java.lang.Object;

        $u6 := @parameter4: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 24 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>($u3, $u4, $u5, $u6);

        return $u-1;

     label1:
        $u-1 = virtualinvoke $u2.<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>($u3, $u4, $u5, $u6);

        return $u-1;
    }

    public static boolean startNestedScroll(android.view.View, int)
    {
        android.view.View $u2;
        int $u3, $u0;
        boolean $u-1;
        androidx.core.view.NestedScrollingChild $u0#6;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: int;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        $u-1 = virtualinvoke $u2.<android.view.View: boolean startNestedScroll(int)>($u3);

        return $u-1;

     label1:
        $u-1 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u-1 == 0 goto label2;

        $u0#6 = (androidx.core.view.NestedScrollingChild) $u2;

        $u-1 = interfaceinvoke $u0#6.<androidx.core.view.NestedScrollingChild: boolean startNestedScroll(int)>($u3);

        return $u-1;

     label2:
        return 0;
    }

    public static boolean startNestedScroll(android.view.View, int, int)
    {
        android.view.View $u1;
        int $u2, $u3;
        boolean $u0;
        androidx.core.view.NestedScrollingChild2 $u0#3;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: int;

        $u3 := @parameter2: int;

        $u0 = $u1 instanceof androidx.core.view.NestedScrollingChild2;

        if $u0 == 0 goto label1;

        $u0#3 = (androidx.core.view.NestedScrollingChild2) $u1;

        $u0 = interfaceinvoke $u0#3.<androidx.core.view.NestedScrollingChild2: boolean startNestedScroll(int,int)>($u2, $u3);

        return $u0;

     label1:
        if $u3 != 0 goto label2;

        $u0 = staticinvoke <androidx.core.view.ViewCompat: boolean startNestedScroll(android.view.View,int)>($u1, $u2);

        return $u0;

     label2:
        return 0;
    }

    public static void stopNestedScroll(android.view.View)
    {
        android.view.View $u2;
        int $u0;
        boolean $u0#2;
        androidx.core.view.NestedScrollingChild $u0#4;

        $u2 := @parameter0: android.view.View;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 21 goto label1;

        virtualinvoke $u2.<android.view.View: void stopNestedScroll()>();

        return;

     label1:
        $u0#2 = $u2 instanceof androidx.core.view.NestedScrollingChild;

        if $u0#2 == 0 goto label2;

        $u0#4 = (androidx.core.view.NestedScrollingChild) $u2;

        interfaceinvoke $u0#4.<androidx.core.view.NestedScrollingChild: void stopNestedScroll()>();

     label2:
        return;
    }

    public static void stopNestedScroll(android.view.View, int)
    {
        android.view.View $u1;
        int $u2;
        boolean $u0;
        androidx.core.view.NestedScrollingChild2 $u0#3;

        $u1 := @parameter0: android.view.View;

        $u2 := @parameter1: int;

        $u0 = $u1 instanceof androidx.core.view.NestedScrollingChild2;

        if $u0 == 0 goto label1;

        $u0#3 = (androidx.core.view.NestedScrollingChild2) $u1;

        interfaceinvoke $u0#3.<androidx.core.view.NestedScrollingChild2: void stopNestedScroll(int)>($u2);

        return;

     label1:
        if $u2 != 0 goto label2;

        staticinvoke <androidx.core.view.ViewCompat: void stopNestedScroll(android.view.View)>($u1);

     label2:
        return;
    }

    private static void tickleInvalidationFlag(android.view.View)
    {
        android.view.View $u2;
        float $u-1, $u1;

        $u2 := @parameter0: android.view.View;

        $u-1 = virtualinvoke $u2.<android.view.View: float getTranslationY()>();

        $u1 = 1.0F + $u-1;

        virtualinvoke $u2.<android.view.View: void setTranslationY(float)>($u1);

        virtualinvoke $u2.<android.view.View: void setTranslationY(float)>($u-1);

        return;
    }

    public static void updateDragShadow(android.view.View, android.view.View$DragShadowBuilder)
    {
        android.view.View $u2;
        android.view.View$DragShadowBuilder $u3;
        int $u0;

        $u2 := @parameter0: android.view.View;

        $u3 := @parameter1: android.view.View$DragShadowBuilder;

        $u0 = <android.os.Build$VERSION: int SDK_INT>;

        if $u0 < 24 goto label1;

        virtualinvoke $u2.<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>($u3);

     label1:
        return;
    }
}
